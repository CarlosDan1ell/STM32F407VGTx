
STM32F407VGx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008f18  08008f18  00009f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe8  08008fe8  0000a494  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008fe8  08008fe8  00009fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff0  08008ff0  0000a494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00009ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  08008ff8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a494  2**0
                  CONTENTS
 10 .bss          00000e4c  20000494  20000494  0000a494  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200012e0  200012e0  0000a494  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  0000a494  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fded  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e6  00000000  00000000  0001a2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0001cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b24  00000000  00000000  0001daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022251  00000000  00000000  0001e61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c02  00000000  00000000  0004086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5e8  00000000  00000000  0005346f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000048d  00000000  00000000  0011da57  2**0
                  CONTENTS, READONLY
 21 .iar.rtmodel  00000026  00000000  00000000  0011dee4  2**0
                  CONTENTS, READONLY
 22 .iar_vfe_header 00000004  00000000  00000000  0011df0c  2**2
                  CONTENTS, READONLY
 23 .debug_frame  00004548  00000000  00000000  0011df10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007c  00000000  00000000  00122458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000494 	.word	0x20000494
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f00 	.word	0x08008f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000498 	.word	0x20000498
 80001cc:	08008f00 	.word	0x08008f00

080001d0 <PDM_Filter_Init>:
 80001d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001d4:	f8df 8bb8 	ldr.w	r8, [pc, #3000]	@ 8000d90 <.text_18>
 80001d8:	f898 7000 	ldrb.w	r7, [r8]
 80001dc:	4606      	mov	r6, r0
 80001de:	f8df 0bb4 	ldr.w	r0, [pc, #2996]	@ 8000d94 <.text_19>
 80001e2:	6802      	ldr	r2, [r0, #0]
 80001e4:	0852      	lsrs	r2, r2, #1
 80001e6:	0052      	lsls	r2, r2, #1
 80001e8:	6002      	str	r2, [r0, #0]
 80001ea:	f64f 70f0 	movw	r0, #65520	@ 0xfff0
 80001ee:	f8df 2ba8 	ldr.w	r2, [pc, #2984]	@ 8000d98 <.text_20>
 80001f2:	6813      	ldr	r3, [r2, #0]
 80001f4:	2400      	movs	r4, #0
 80001f6:	2500      	movs	r5, #0
 80001f8:	4003      	ands	r3, r0
 80001fa:	f24c 2140 	movw	r1, #49728	@ 0xc240
 80001fe:	428b      	cmp	r3, r1
 8000200:	bf1f      	itttt	ne
 8000202:	6812      	ldrne	r2, [r2, #0]
 8000204:	4010      	andne	r0, r2
 8000206:	f24c 2370 	movwne	r3, #49776	@ 0xc270
 800020a:	4298      	cmpne	r0, r3
 800020c:	d115      	bne.n	800023a <PDM_Filter_Init+0x6a>
 800020e:	f8df 1b8c 	ldr.w	r1, [pc, #2956]	@ 8000d9c <.text_21>
 8000212:	6808      	ldr	r0, [r1, #0]
 8000214:	b988      	cbnz	r0, 800023a <PDM_Filter_Init+0x6a>
 8000216:	f8df 0b88 	ldr.w	r0, [pc, #2952]	@ 8000da0 <.text_22>
 800021a:	6802      	ldr	r2, [r0, #0]
 800021c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000220:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8000224:	bf1f      	itttt	ne
 8000226:	6800      	ldrne	r0, [r0, #0]
 8000228:	f3c0 000b 	ubfxne	r0, r0, #0, #12
 800022c:	f240 4283 	movwne	r2, #1155	@ 0x483
 8000230:	4290      	cmpne	r0, r2
 8000232:	bf08      	it	eq
 8000234:	f8df 2b6c 	ldreq.w	r2, [pc, #2924]	@ 8000da4 <.text_23>
 8000238:	d001      	beq.n	800023e <PDM_Filter_Init+0x6e>
 800023a:	f8df 2b6c 	ldr.w	r2, [pc, #2924]	@ 8000da8 <.text_24>
 800023e:	2001      	movs	r0, #1
 8000240:	6090      	str	r0, [r2, #8]
 8000242:	6890      	ldr	r0, [r2, #8]
 8000244:	2800      	cmp	r0, #0
 8000246:	d1fc      	bne.n	8000242 <PDM_Filter_Init+0x72>
 8000248:	f8df 3b60 	ldr.w	r3, [pc, #2912]	@ 8000dac <.text_25>
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	6810      	ldr	r0, [r2, #0]
 8000250:	f8df 2b5c 	ldr.w	r2, [pc, #2908]	@ 8000db0 <.text_26>
 8000254:	4290      	cmp	r0, r2
 8000256:	bf08      	it	eq
 8000258:	2501      	moveq	r5, #1
 800025a:	2140      	movs	r1, #64	@ 0x40
 800025c:	f106 000c 	add.w	r0, r6, #12
 8000260:	f007 fe14 	bl	8007e8c <__aeabi_memclr>
 8000264:	2d00      	cmp	r5, #0
 8000266:	bf1a      	itte	ne
 8000268:	f8df 0b44 	ldrne.w	r0, [pc, #2884]	@ 8000db0 <.text_26>
 800026c:	6470      	strne	r0, [r6, #68]	@ 0x44
 800026e:	6474      	streq	r4, [r6, #68]	@ 0x44
 8000270:	61b4      	str	r4, [r6, #24]
 8000272:	6134      	str	r4, [r6, #16]
 8000274:	6174      	str	r4, [r6, #20]
 8000276:	60f4      	str	r4, [r6, #12]
 8000278:	6274      	str	r4, [r6, #36]	@ 0x24
 800027a:	61f4      	str	r4, [r6, #28]
 800027c:	6234      	str	r4, [r6, #32]
 800027e:	8971      	ldrh	r1, [r6, #10]
 8000280:	86b1      	strh	r1, [r6, #52]	@ 0x34
 8000282:	8930      	ldrh	r0, [r6, #8]
 8000284:	86f0      	strh	r0, [r6, #54]	@ 0x36
 8000286:	6434      	str	r4, [r6, #64]	@ 0x40
 8000288:	8830      	ldrh	r0, [r6, #0]
 800028a:	2801      	cmp	r0, #1
 800028c:	d002      	beq.n	8000294 <PDM_Filter_Init+0xc4>
 800028e:	b3b8      	cbz	r0, 8000300 <PDM_Filter_Init+0x130>
 8000290:	2402      	movs	r4, #2
 8000292:	e06a      	b.n	800036a <PDM_Filter_Init+0x19a>
 8000294:	0038      	movs	r0, r7
 8000296:	d168      	bne.n	800036a <PDM_Filter_Init+0x19a>
 8000298:	f108 0304 	add.w	r3, r8, #4
 800029c:	2040      	movs	r0, #64	@ 0x40
 800029e:	f8df 1b14 	ldr.w	r1, [pc, #2836]	@ 8000db4 <.text_27>
 80002a2:	f8df 2d84 	ldr.w	r2, [pc, #3460]	@ 8001028 <.text_29>
 80002a6:	681d      	ldr	r5, [r3, #0]
 80002a8:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 80002ac:	ea01 0c05 	and.w	ip, r1, r5
 80002b0:	4467      	add	r7, ip
 80002b2:	f3c5 5509 	ubfx	r5, r5, #20, #10
 80002b6:	19ef      	adds	r7, r5, r7
 80002b8:	601f      	str	r7, [r3, #0]
 80002ba:	685d      	ldr	r5, [r3, #4]
 80002bc:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 80002c0:	ea01 0c05 	and.w	ip, r1, r5
 80002c4:	4467      	add	r7, ip
 80002c6:	f3c5 5509 	ubfx	r5, r5, #20, #10
 80002ca:	19ef      	adds	r7, r5, r7
 80002cc:	605f      	str	r7, [r3, #4]
 80002ce:	689d      	ldr	r5, [r3, #8]
 80002d0:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 80002d4:	ea01 0c05 	and.w	ip, r1, r5
 80002d8:	4467      	add	r7, ip
 80002da:	f3c5 5509 	ubfx	r5, r5, #20, #10
 80002de:	19ef      	adds	r7, r5, r7
 80002e0:	609f      	str	r7, [r3, #8]
 80002e2:	68dd      	ldr	r5, [r3, #12]
 80002e4:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 80002e8:	ea01 0c05 	and.w	ip, r1, r5
 80002ec:	4467      	add	r7, ip
 80002ee:	f3c5 5509 	ubfx	r5, r5, #20, #10
 80002f2:	19ef      	adds	r7, r5, r7
 80002f4:	60df      	str	r7, [r3, #12]
 80002f6:	3310      	adds	r3, #16
 80002f8:	1e40      	subs	r0, r0, #1
 80002fa:	d1d4      	bne.n	80002a6 <PDM_Filter_Init+0xd6>
 80002fc:	2701      	movs	r7, #1
 80002fe:	e034      	b.n	800036a <PDM_Filter_Init+0x19a>
 8000300:	2f01      	cmp	r7, #1
 8000302:	d132      	bne.n	800036a <PDM_Filter_Init+0x19a>
 8000304:	f108 0304 	add.w	r3, r8, #4
 8000308:	2040      	movs	r0, #64	@ 0x40
 800030a:	f8df 1aa8 	ldr.w	r1, [pc, #2728]	@ 8000db4 <.text_27>
 800030e:	f8df 2d18 	ldr.w	r2, [pc, #3352]	@ 8001028 <.text_29>
 8000312:	681d      	ldr	r5, [r3, #0]
 8000314:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 8000318:	ea01 0c05 	and.w	ip, r1, r5
 800031c:	4467      	add	r7, ip
 800031e:	f3c5 5509 	ubfx	r5, r5, #20, #10
 8000322:	19ef      	adds	r7, r5, r7
 8000324:	601f      	str	r7, [r3, #0]
 8000326:	685d      	ldr	r5, [r3, #4]
 8000328:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 800032c:	ea01 0c05 	and.w	ip, r1, r5
 8000330:	4467      	add	r7, ip
 8000332:	f3c5 5509 	ubfx	r5, r5, #20, #10
 8000336:	19ef      	adds	r7, r5, r7
 8000338:	605f      	str	r7, [r3, #4]
 800033a:	689d      	ldr	r5, [r3, #8]
 800033c:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 8000340:	ea01 0c05 	and.w	ip, r1, r5
 8000344:	4467      	add	r7, ip
 8000346:	f3c5 5509 	ubfx	r5, r5, #20, #10
 800034a:	19ef      	adds	r7, r5, r7
 800034c:	609f      	str	r7, [r3, #8]
 800034e:	68dd      	ldr	r5, [r3, #12]
 8000350:	ea02 5705 	and.w	r7, r2, r5, lsl #20
 8000354:	ea01 0c05 	and.w	ip, r1, r5
 8000358:	4467      	add	r7, ip
 800035a:	f3c5 5509 	ubfx	r5, r5, #20, #10
 800035e:	19ef      	adds	r7, r5, r7
 8000360:	60df      	str	r7, [r3, #12]
 8000362:	3310      	adds	r3, #16
 8000364:	1e40      	subs	r0, r0, #1
 8000366:	d1d4      	bne.n	8000312 <PDM_Filter_Init+0x142>
 8000368:	2700      	movs	r7, #0
 800036a:	8870      	ldrh	r0, [r6, #2]
 800036c:	b130      	cbz	r0, 800037c <PDM_Filter_Init+0x1ac>
 800036e:	2801      	cmp	r0, #1
 8000370:	bf11      	iteee	ne
 8000372:	1c64      	addne	r4, r4, #1
 8000374:	6c30      	ldreq	r0, [r6, #64]	@ 0x40
 8000376:	f040 0020 	orreq.w	r0, r0, #32
 800037a:	6430      	streq	r0, [r6, #64]	@ 0x40
 800037c:	8eb0      	ldrh	r0, [r6, #52]	@ 0x34
 800037e:	2801      	cmp	r0, #1
 8000380:	bf04      	itt	eq
 8000382:	8ef0      	ldrheq	r0, [r6, #54]	@ 0x36
 8000384:	2801      	cmpeq	r0, #1
 8000386:	d103      	bne.n	8000390 <PDM_Filter_Init+0x1c0>
 8000388:	6c30      	ldr	r0, [r6, #64]	@ 0x40
 800038a:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800038e:	6430      	str	r0, [r6, #64]	@ 0x40
 8000390:	6870      	ldr	r0, [r6, #4]
 8000392:	b128      	cbz	r0, 80003a0 <PDM_Filter_Init+0x1d0>
 8000394:	6c30      	ldr	r0, [r6, #64]	@ 0x40
 8000396:	f040 0010 	orr.w	r0, r0, #16
 800039a:	6430      	str	r0, [r6, #64]	@ 0x40
 800039c:	6870      	ldr	r0, [r6, #4]
 800039e:	62f0      	str	r0, [r6, #44]	@ 0x2c
 80003a0:	2100      	movs	r1, #0
 80003a2:	8731      	strh	r1, [r6, #56]	@ 0x38
 80003a4:	b914      	cbnz	r4, 80003ac <PDM_Filter_Init+0x1dc>
 80003a6:	6c30      	ldr	r0, [r6, #64]	@ 0x40
 80003a8:	3080      	adds	r0, #128	@ 0x80
 80003aa:	6430      	str	r0, [r6, #64]	@ 0x40
 80003ac:	f888 7000 	strb.w	r7, [r8]
 80003b0:	4620      	mov	r0, r4
 80003b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080003b8 <PDM_Filter_setConfig>:
 80003b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ba:	b081      	sub	sp, #4
 80003bc:	4605      	mov	r5, r0
 80003be:	ed2d 8b02 	vpush	{d8}
 80003c2:	460e      	mov	r6, r1
 80003c4:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 80003c6:	f8df 19e8 	ldr.w	r1, [pc, #2536]	@ 8000db0 <.text_26>
 80003ca:	2400      	movs	r4, #0
 80003cc:	4288      	cmp	r0, r1
 80003ce:	bf18      	it	ne
 80003d0:	2004      	movne	r0, #4
 80003d2:	f040 80e3 	bne.w	800059c <PDM_Filter_setConfig+0x1e4>
 80003d6:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80003d8:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80003dc:	6429      	str	r1, [r5, #64]	@ 0x40
 80003de:	8832      	ldrh	r2, [r6, #0]
 80003e0:	2a05      	cmp	r2, #5
 80003e2:	bf18      	it	ne
 80003e4:	2a06      	cmpne	r2, #6
 80003e6:	d01d      	beq.n	8000424 <PDM_Filter_setConfig+0x6c>
 80003e8:	2a07      	cmp	r2, #7
 80003ea:	bf18      	it	ne
 80003ec:	2a01      	cmpne	r2, #1
 80003ee:	d019      	beq.n	8000424 <PDM_Filter_setConfig+0x6c>
 80003f0:	2a02      	cmp	r2, #2
 80003f2:	bf1c      	itt	ne
 80003f4:	2a03      	cmpne	r2, #3
 80003f6:	2a04      	cmpne	r2, #4
 80003f8:	d014      	beq.n	8000424 <PDM_Filter_setConfig+0x6c>
 80003fa:	2408      	movs	r4, #8
 80003fc:	f9b5 0038 	ldrsh.w	r0, [r5, #56]	@ 0x38
 8000400:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8000404:	4288      	cmp	r0, r1
 8000406:	bf04      	itt	eq
 8000408:	8e28      	ldrheq	r0, [r5, #48]	@ 0x30
 800040a:	4290      	cmpeq	r0, r2
 800040c:	f000 80be 	beq.w	800058c <PDM_Filter_setConfig+0x1d4>
 8000410:	f9b6 7004 	ldrsh.w	r7, [r6, #4]
 8000414:	f117 0f0c 	cmn.w	r7, #12
 8000418:	da5d      	bge.n	80004d6 <PDM_Filter_setConfig+0x11e>
 800041a:	f06f 000b 	mvn.w	r0, #11
 800041e:	80b0      	strh	r0, [r6, #4]
 8000420:	3440      	adds	r4, #64	@ 0x40
 8000422:	e0b1      	b.n	8000588 <PDM_Filter_setConfig+0x1d0>
 8000424:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8000426:	4293      	cmp	r3, r2
 8000428:	d0e8      	beq.n	80003fc <PDM_Filter_setConfig+0x44>
 800042a:	0909      	lsrs	r1, r1, #4
 800042c:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8000430:	6429      	str	r1, [r5, #64]	@ 0x40
 8000432:	f001 000f 	and.w	r0, r1, #15
 8000436:	f001 0170 	and.w	r1, r1, #112	@ 0x70
 800043a:	2970      	cmp	r1, #112	@ 0x70
 800043c:	d125      	bne.n	800048a <PDM_Filter_setConfig+0xd2>
 800043e:	1e40      	subs	r0, r0, #1
 8000440:	2806      	cmp	r0, #6
 8000442:	d8db      	bhi.n	80003fc <PDM_Filter_setConfig+0x44>
 8000444:	e8df f000 	tbb	[pc, r0]
 8000448:	1d191511 	.word	0x1d191511
 800044c:	000d0905 	.word	0x000d0905
 8000450:	e7d4      	b.n	80003fc <PDM_Filter_setConfig+0x44>
 8000452:	f8df 0bd8 	ldr.w	r0, [pc, #3032]	@ 800102c <.text_30>
 8000456:	64a8      	str	r0, [r5, #72]	@ 0x48
 8000458:	e7da      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 800045a:	f8df 1bd4 	ldr.w	r1, [pc, #3028]	@ 8001030 <.text_31>
 800045e:	64a9      	str	r1, [r5, #72]	@ 0x48
 8000460:	e7d6      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 8000462:	f8df 0bd0 	ldr.w	r0, [pc, #3024]	@ 8001034 <.text_32>
 8000466:	64a8      	str	r0, [r5, #72]	@ 0x48
 8000468:	e7d2      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 800046a:	f8df 1bcc 	ldr.w	r1, [pc, #3020]	@ 8001038 <.text_33>
 800046e:	64a9      	str	r1, [r5, #72]	@ 0x48
 8000470:	e7ce      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 8000472:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	@ 800103c <.text_34>
 8000476:	64a8      	str	r0, [r5, #72]	@ 0x48
 8000478:	e7ca      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 800047a:	f8df 1bc4 	ldr.w	r1, [pc, #3012]	@ 8001040 <.text_35>
 800047e:	64a9      	str	r1, [r5, #72]	@ 0x48
 8000480:	e7c6      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 8000482:	f8df 0bc0 	ldr.w	r0, [pc, #3008]	@ 8001044 <.text_36>
 8000486:	64a8      	str	r0, [r5, #72]	@ 0x48
 8000488:	e7c2      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 800048a:	1e40      	subs	r0, r0, #1
 800048c:	2806      	cmp	r0, #6
 800048e:	d8b5      	bhi.n	80003fc <PDM_Filter_setConfig+0x44>
 8000490:	e8df f000 	tbb	[pc, r0]
 8000494:	1d191511 	.word	0x1d191511
 8000498:	000d0905 	.word	0x000d0905
 800049c:	e7ae      	b.n	80003fc <PDM_Filter_setConfig+0x44>
 800049e:	f20f 1159 	addw	r1, pc, #345	@ 0x159
 80004a2:	64a9      	str	r1, [r5, #72]	@ 0x48
 80004a4:	e7b4      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004a6:	f20f 2065 	addw	r0, pc, #613	@ 0x265
 80004aa:	64a8      	str	r0, [r5, #72]	@ 0x48
 80004ac:	e7b0      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004ae:	f20f 31c5 	addw	r1, pc, #965	@ 0x3c5
 80004b2:	64a9      	str	r1, [r5, #72]	@ 0x48
 80004b4:	e7ac      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004b6:	f20f 5021 	addw	r0, pc, #1313	@ 0x521
 80004ba:	64a8      	str	r0, [r5, #72]	@ 0x48
 80004bc:	e7a8      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004be:	f20f 61d1 	addw	r1, pc, #1745	@ 0x6d1
 80004c2:	64a9      	str	r1, [r5, #72]	@ 0x48
 80004c4:	e7a4      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004c6:	f60f 00f1 	addw	r0, pc, #2289	@ 0x8f1
 80004ca:	64a8      	str	r0, [r5, #72]	@ 0x48
 80004cc:	e7a0      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004ce:	f60f 3181 	addw	r1, pc, #2945	@ 0xb81
 80004d2:	64a9      	str	r1, [r5, #72]	@ 0x48
 80004d4:	e79c      	b.n	8000410 <PDM_Filter_setConfig+0x58>
 80004d6:	2f34      	cmp	r7, #52	@ 0x34
 80004d8:	db03      	blt.n	80004e2 <PDM_Filter_setConfig+0x12a>
 80004da:	2033      	movs	r0, #51	@ 0x33
 80004dc:	80b0      	strh	r0, [r6, #4]
 80004de:	3440      	adds	r4, #64	@ 0x40
 80004e0:	e052      	b.n	8000588 <PDM_Filter_setConfig+0x1d0>
 80004e2:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 80004e6:	f000 000f 	and.w	r0, r0, #15
 80004ea:	1e40      	subs	r0, r0, #1
 80004ec:	2806      	cmp	r0, #6
 80004ee:	ed9f 8a84 	vldr	s16, [pc, #528]	@ 8000700 <.text_8>
 80004f2:	eddf 8a83 	vldr	s17, [pc, #524]	@ 8000700 <.text_8>
 80004f6:	d827      	bhi.n	8000548 <PDM_Filter_setConfig+0x190>
 80004f8:	e8df f000 	tbb	[pc, r0]
 80004fc:	221d1813 	.word	0x221d1813
 8000500:	000e0904 	.word	0x000e0904
 8000504:	eeb3 8a00 	vmov.f32	s16, #48	@ 0x41800000  16.0
 8000508:	eddf 8a7e 	vldr	s17, [pc, #504]	@ 8000704 <.text_9>
 800050c:	e01c      	b.n	8000548 <PDM_Filter_setConfig+0x190>
 800050e:	eeb2 8a0c 	vmov.f32	s16, #44	@ 0x41600000  14.0
 8000512:	eddf 8a7d 	vldr	s17, [pc, #500]	@ 8000708 <.text_10>
 8000516:	e017      	b.n	8000548 <PDM_Filter_setConfig+0x190>
 8000518:	eeb2 8a0a 	vmov.f32	s16, #42	@ 0x41500000  13.0
 800051c:	eef2 8a00 	vmov.f32	s17, #32	@ 0x41000000  8.0
 8000520:	e012      	b.n	8000548 <PDM_Filter_setConfig+0x190>
 8000522:	eeb2 8a06 	vmov.f32	s16, #38	@ 0x41300000  11.0
 8000526:	eddf 8ad0 	vldr	s17, [pc, #832]	@ 8000868 <.text_12>
 800052a:	e00d      	b.n	8000548 <PDM_Filter_setConfig+0x190>
 800052c:	eeb2 8a04 	vmov.f32	s16, #36	@ 0x41200000  10.0
 8000530:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8000534:	e008      	b.n	8000548 <PDM_Filter_setConfig+0x190>
 8000536:	eeb2 8a02 	vmov.f32	s16, #34	@ 0x41100000  9.0
 800053a:	eddf 8acc 	vldr	s17, [pc, #816]	@ 800086c <.text_13>
 800053e:	e003      	b.n	8000548 <PDM_Filter_setConfig+0x190>
 8000540:	eeb1 8a0c 	vmov.f32	s16, #28	@ 0x40e00000  7.0
 8000544:	eef4 8a00 	vmov.f32	s17, #64	@ 0x3e000000  0.125
 8000548:	4638      	mov	r0, r7
 800054a:	ee00 0a10 	vmov	s0, r0
 800054e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000552:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000556:	eec0 0a20 	vdiv.f32	s1, s0, s1
 800055a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800055e:	f008 f8e3 	bl	8008728 <powf>
 8000562:	ee60 8a28 	vmul.f32	s17, s0, s17
 8000566:	eddf 0ac2 	vldr	s1, [pc, #776]	@ 8000870 <.text_14>
 800056a:	ee70 0ac8 	vsub.f32	s1, s1, s16
 800056e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000572:	f008 f8d9 	bl	8008728 <powf>
 8000576:	ee28 0a80 	vmul.f32	s0, s17, s0
 800057a:	f008 f937 	bl	80087ec <roundf>
 800057e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8000582:	ed85 0a0f 	vstr	s0, [r5, #60]	@ 0x3c
 8000586:	872f      	strh	r7, [r5, #56]	@ 0x38
 8000588:	8830      	ldrh	r0, [r6, #0]
 800058a:	8628      	strh	r0, [r5, #48]	@ 0x30
 800058c:	8870      	ldrh	r0, [r6, #2]
 800058e:	8668      	strh	r0, [r5, #50]	@ 0x32
 8000590:	b91c      	cbnz	r4, 800059a <PDM_Filter_setConfig+0x1e2>
 8000592:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8000594:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8000598:	6428      	str	r0, [r5, #64]	@ 0x40
 800059a:	4620      	mov	r0, r4
 800059c:	ecbd 8b02 	vpop	{d8}
 80005a0:	b001      	add	sp, #4
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005a4 <PDM_Filter_getConfig>:
 80005a4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80005a6:	f8df 3808 	ldr.w	r3, [pc, #2056]	@ 8000db0 <.text_26>
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d001      	beq.n	80005b2 <PDM_Filter_getConfig+0xe>
 80005ae:	2004      	movs	r0, #4
 80005b0:	4770      	bx	lr
 80005b2:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 80005b4:	804a      	strh	r2, [r1, #2]
 80005b6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80005b8:	800b      	strh	r3, [r1, #0]
 80005ba:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 80005bc:	8088      	strh	r0, [r1, #4]
 80005be:	2000      	movs	r0, #0
 80005c0:	4770      	bx	lr

080005c2 <PDM_Filter>:
 80005c2:	b410      	push	{r4}
 80005c4:	4613      	mov	r3, r2
 80005c6:	b081      	sub	sp, #4
 80005c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80005ca:	f8df 47e4 	ldr.w	r4, [pc, #2020]	@ 8000db0 <.text_26>
 80005ce:	42a2      	cmp	r2, r4
 80005d0:	bf18      	it	ne
 80005d2:	2004      	movne	r0, #4
 80005d4:	d106      	bne.n	80005e4 <PDM_Filter+0x22>
 80005d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005d8:	05d4      	lsls	r4, r2, #23
 80005da:	d406      	bmi.n	80005ea <PDM_Filter+0x28>
 80005dc:	2020      	movs	r0, #32
 80005de:	0611      	lsls	r1, r2, #24
 80005e0:	bf58      	it	pl
 80005e2:	2030      	movpl	r0, #48	@ 0x30
 80005e4:	b001      	add	sp, #4
 80005e6:	bc10      	pop	{r4}
 80005e8:	4770      	bx	lr
 80005ea:	f103 020c 	add.w	r2, r3, #12
 80005ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005f0:	b001      	add	sp, #4
 80005f2:	bc10      	pop	{r4}

080005f4 <__iar_annotation$$tailcall>:
 80005f4:	4718      	bx	r3
	...

080005f8 <D16_GENERIC>:
 80005f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005fc:	4613      	mov	r3, r2
 80005fe:	b086      	sub	sp, #24
 8000600:	4682      	mov	sl, r0
 8000602:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8000606:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800060a:	6998      	ldr	r0, [r3, #24]
 800060c:	9004      	str	r0, [sp, #16]
 800060e:	460c      	mov	r4, r1
 8000610:	69df      	ldr	r7, [r3, #28]
 8000612:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8000616:	68d9      	ldr	r1, [r3, #12]
 8000618:	f8df 0a2c 	ldr.w	r0, [pc, #2604]	@ 8001048 <.text_37>
 800061c:	9103      	str	r1, [sp, #12]
 800061e:	2500      	movs	r5, #0
 8000620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000622:	f8d3 9030 	ldr.w	r9, [r3, #48]	@ 0x30
 8000626:	f8df 1a24 	ldr.w	r1, [pc, #2596]	@ 800104c <.text_38>
 800062a:	f002 0610 	and.w	r6, r2, #16
 800062e:	9602      	str	r6, [sp, #8]
 8000630:	f002 0220 	and.w	r2, r2, #32
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	8cde      	ldrh	r6, [r3, #38]	@ 0x26
 8000638:	f8df 2754 	ldr.w	r2, [pc, #1876]	@ 8000d90 <.text_18>
 800063c:	2e00      	cmp	r6, #0
 800063e:	d04f      	beq.n	80006e0 <D16_GENERIC+0xe8>
 8000640:	9405      	str	r4, [sp, #20]
 8000642:	8d5c      	ldrh	r4, [r3, #42]	@ 0x2a
 8000644:	2c01      	cmp	r4, #1
 8000646:	d105      	bne.n	8000654 <D16_GENERIC+0x5c>
 8000648:	f85a 6b02 	ldr.w	r6, [sl], #2
 800064c:	9c01      	ldr	r4, [sp, #4]
 800064e:	b154      	cbz	r4, 8000666 <D16_GENERIC+0x6e>
 8000650:	ba76      	rev16	r6, r6
 8000652:	e008      	b.n	8000666 <D16_GENERIC+0x6e>
 8000654:	b2e4      	uxtb	r4, r4
 8000656:	f89a b000 	ldrb.w	fp, [sl]
 800065a:	f81a 6004 	ldrb.w	r6, [sl, r4]
 800065e:	eb0b 2606 	add.w	r6, fp, r6, lsl #8
 8000662:	eb0a 0a44 	add.w	sl, sl, r4, lsl #1
 8000666:	1d14      	adds	r4, r2, #4
 8000668:	f006 0bff 	and.w	fp, r6, #255	@ 0xff
 800066c:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 8000670:	19e7      	adds	r7, r4, r7
 8000672:	f3c7 0409 	ubfx	r4, r7, #0, #10
 8000676:	46bb      	mov	fp, r7
 8000678:	1d17      	adds	r7, r2, #4
 800067a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800067e:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
 8000682:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8000686:	f3c7 0609 	ubfx	r6, r7, #0, #10
 800068a:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800068e:	fb26 cb01 	smlad	fp, r6, r1, ip
 8000692:	9c02      	ldr	r4, [sp, #8]
 8000694:	0abf      	lsrs	r7, r7, #10
 8000696:	fb26 fc00 	smuad	ip, r6, r0
 800069a:	f5ab 6b00 	sub.w	fp, fp, #2048	@ 0x800
 800069e:	b14c      	cbz	r4, 80006b4 <D16_GENERIC+0xbc>
 80006a0:	6a1c      	ldr	r4, [r3, #32]
 80006a2:	44de      	add	lr, fp
 80006a4:	ebae 0e08 	sub.w	lr, lr, r8
 80006a8:	fb5e fe14 	smmulr	lr, lr, r4
 80006ac:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80006b0:	46d8      	mov	r8, fp
 80006b2:	46f3      	mov	fp, lr
 80006b4:	ea4f 460b 	mov.w	r6, fp, lsl #16
 80006b8:	fa1f fb85 	uxth.w	fp, r5
 80006bc:	fb56 f419 	smmulr	r4, r6, r9
 80006c0:	9e05      	ldr	r6, [sp, #20]
 80006c2:	9600      	str	r6, [sp, #0]
 80006c4:	f324 048f 	ssat	r4, #16, r4, asr #2
 80006c8:	8d1e      	ldrh	r6, [r3, #40]	@ 0x28
 80006ca:	fb06 f60b 	mul.w	r6, r6, fp
 80006ce:	f8dd b000 	ldr.w	fp, [sp]
 80006d2:	f82b 4016 	strh.w	r4, [fp, r6, lsl #1]
 80006d6:	1c6d      	adds	r5, r5, #1
 80006d8:	8cde      	ldrh	r6, [r3, #38]	@ 0x26
 80006da:	b2ac      	uxth	r4, r5
 80006dc:	42b4      	cmp	r4, r6
 80006de:	d3b0      	bcc.n	8000642 <D16_GENERIC+0x4a>
 80006e0:	f8c3 c008 	str.w	ip, [r3, #8]
 80006e4:	9803      	ldr	r0, [sp, #12]
 80006e6:	60d8      	str	r0, [r3, #12]
 80006e8:	61df      	str	r7, [r3, #28]
 80006ea:	f8c3 e010 	str.w	lr, [r3, #16]
 80006ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80006f2:	9804      	ldr	r0, [sp, #16]
 80006f4:	6198      	str	r0, [r3, #24]
 80006f6:	b006      	add	sp, #24
 80006f8:	2000      	movs	r0, #0
 80006fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000700 <.text_8>:
 8000700:	00000000 	.word	0x00000000

08000704 <.text_9>:
 8000704:	42800000 	.word	0x42800000

08000708 <.text_10>:
 8000708:	4197b426 	.word	0x4197b426

0800070c <D24_GENERIC>:
 800070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	4607      	mov	r7, r0
 8000714:	460c      	mov	r4, r1
 8000716:	6910      	ldr	r0, [r2, #16]
 8000718:	6951      	ldr	r1, [r2, #20]
 800071a:	6993      	ldr	r3, [r2, #24]
 800071c:	f8df a670 	ldr.w	sl, [pc, #1648]	@ 8000d90 <.text_18>
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	f04f 0800 	mov.w	r8, #0
 8000726:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8000728:	69d3      	ldr	r3, [r2, #28]
 800072a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800072e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8000732:	f8d2 e030 	ldr.w	lr, [r2, #48]	@ 0x30
 8000736:	f006 0b10 	and.w	fp, r6, #16
 800073a:	f8cd b004 	str.w	fp, [sp, #4]
 800073e:	f006 0620 	and.w	r6, r6, #32
 8000742:	9600      	str	r6, [sp, #0]
 8000744:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8000746:	2e00      	cmp	r6, #0
 8000748:	f000 8080 	beq.w	800084c <D24_GENERIC+0x140>
 800074c:	9403      	str	r4, [sp, #12]
 800074e:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8000750:	2d01      	cmp	r5, #1
 8000752:	d11f      	bne.n	8000794 <D24_GENERIC+0x88>
 8000754:	783c      	ldrb	r4, [r7, #0]
 8000756:	9d00      	ldr	r5, [sp, #0]
 8000758:	b1a5      	cbz	r5, 8000784 <D24_GENERIC+0x78>
 800075a:	eb08 75d8 	add.w	r5, r8, r8, lsr #31
 800075e:	106d      	asrs	r5, r5, #1
 8000760:	78fe      	ldrb	r6, [r7, #3]
 8000762:	ebb8 0545 	subs.w	r5, r8, r5, lsl #1
 8000766:	d106      	bne.n	8000776 <D24_GENERIC+0x6a>
 8000768:	0224      	lsls	r4, r4, #8
 800076a:	787d      	ldrb	r5, [r7, #1]
 800076c:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 8000770:	1964      	adds	r4, r4, r5
 8000772:	1cbf      	adds	r7, r7, #2
 8000774:	e01a      	b.n	80007ac <D24_GENERIC+0xa0>
 8000776:	78bd      	ldrb	r5, [r7, #2]
 8000778:	0236      	lsls	r6, r6, #8
 800077a:	eb06 4605 	add.w	r6, r6, r5, lsl #16
 800077e:	19a4      	adds	r4, r4, r6
 8000780:	1d3f      	adds	r7, r7, #4
 8000782:	e013      	b.n	80007ac <D24_GENERIC+0xa0>
 8000784:	787e      	ldrb	r6, [r7, #1]
 8000786:	78bd      	ldrb	r5, [r7, #2]
 8000788:	0236      	lsls	r6, r6, #8
 800078a:	eb06 4605 	add.w	r6, r6, r5, lsl #16
 800078e:	19a4      	adds	r4, r4, r6
 8000790:	1cff      	adds	r7, r7, #3
 8000792:	e00b      	b.n	80007ac <D24_GENERIC+0xa0>
 8000794:	b2ed      	uxtb	r5, r5
 8000796:	5d7e      	ldrb	r6, [r7, r5]
 8000798:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
 800079c:	0236      	lsls	r6, r6, #8
 800079e:	eb06 4604 	add.w	r6, r6, r4, lsl #16
 80007a2:	783c      	ldrb	r4, [r7, #0]
 80007a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007a8:	1934      	adds	r4, r6, r4
 80007aa:	442f      	add	r7, r5
 80007ac:	f10a 0504 	add.w	r5, sl, #4
 80007b0:	f004 06ff 	and.w	r6, r4, #255	@ 0xff
 80007b4:	0a24      	lsrs	r4, r4, #8
 80007b6:	f10a 0b04 	add.w	fp, sl, #4
 80007ba:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 80007be:	f004 06ff 	and.w	r6, r4, #255	@ 0xff
 80007c2:	f85b 6026 	ldr.w	r6, [fp, r6, lsl #2]
 80007c6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80007ca:	f3c5 0309 	ubfx	r3, r5, #0, #10
 80007ce:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80007d2:	f3c6 0509 	ubfx	r5, r6, #0, #10
 80007d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007da:	0a24      	lsrs	r4, r4, #8
 80007dc:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 80007e0:	f8df 4868 	ldr.w	r4, [pc, #2152]	@ 800104c <.text_38>
 80007e4:	fb25 c404 	smlad	r4, r5, r4, ip
 80007e8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80007ec:	f8df cdd8 	ldr.w	ip, [pc, #3544]	@ 80015c8 <.text_42>
 80007f0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80007f4:	fb25 9c0c 	smlad	ip, r5, ip, r9
 80007f8:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80007fc:	eb0c 0c49 	add.w	ip, ip, r9, lsl #1
 8000800:	f04f 0b01 	mov.w	fp, #1
 8000804:	fb25 f90b 	smuad	r9, r5, fp
 8000808:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800080c:	9d01      	ldr	r5, [sp, #4]
 800080e:	44b1      	add	r9, r6
 8000810:	f5a4 54d8 	sub.w	r4, r4, #6912	@ 0x1b00
 8000814:	b13d      	cbz	r5, 8000826 <D24_GENERIC+0x11a>
 8000816:	6a15      	ldr	r5, [r2, #32]
 8000818:	1820      	adds	r0, r4, r0
 800081a:	1a40      	subs	r0, r0, r1
 800081c:	fb50 f015 	smmulr	r0, r0, r5
 8000820:	0040      	lsls	r0, r0, #1
 8000822:	4621      	mov	r1, r4
 8000824:	4604      	mov	r4, r0
 8000826:	03a4      	lsls	r4, r4, #14
 8000828:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800082a:	fb54 f51e 	smmulr	r5, r4, lr
 800082e:	9c03      	ldr	r4, [sp, #12]
 8000830:	f325 058f 	ssat	r5, #16, r5, asr #2
 8000834:	fb06 f608 	mul.w	r6, r6, r8
 8000838:	f824 5016 	strh.w	r5, [r4, r6, lsl #1]
 800083c:	f108 0401 	add.w	r4, r8, #1
 8000840:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8000842:	fa1f f884 	uxth.w	r8, r4
 8000846:	45a8      	cmp	r8, r5
 8000848:	f6ff af81 	blt.w	800074e <D24_GENERIC+0x42>
 800084c:	6110      	str	r0, [r2, #16]
 800084e:	f8c2 9008 	str.w	r9, [r2, #8]
 8000852:	f8c2 c00c 	str.w	ip, [r2, #12]
 8000856:	61d3      	str	r3, [r2, #28]
 8000858:	6151      	str	r1, [r2, #20]
 800085a:	9802      	ldr	r0, [sp, #8]
 800085c:	6190      	str	r0, [r2, #24]
 800085e:	b004      	add	sp, #16
 8000860:	2000      	movs	r0, #0
 8000862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000868 <.text_12>:
 8000868:	4017b426 	.word	0x4017b426

0800086c <.text_13>:
 800086c:	3f03126f 	.word	0x3f03126f

08000870 <.text_14>:
 8000870:	42000000 	.word	0x42000000

08000874 <D32_GENERIC>:
 8000874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	4682      	mov	sl, r0
 800087c:	460d      	mov	r5, r1
 800087e:	6910      	ldr	r0, [r2, #16]
 8000880:	6951      	ldr	r1, [r2, #20]
 8000882:	6993      	ldr	r3, [r2, #24]
 8000884:	f8df 9508 	ldr.w	r9, [pc, #1288]	@ 8000d90 <.text_18>
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	2600      	movs	r6, #0
 800088c:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 800088e:	69d3      	ldr	r3, [r2, #28]
 8000890:	6894      	ldr	r4, [r2, #8]
 8000892:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8000896:	f8d2 8030 	ldr.w	r8, [r2, #48]	@ 0x30
 800089a:	f007 0b10 	and.w	fp, r7, #16
 800089e:	f8cd b004 	str.w	fp, [sp, #4]
 80008a2:	f007 0720 	and.w	r7, r7, #32
 80008a6:	9700      	str	r7, [sp, #0]
 80008a8:	8cd7      	ldrh	r7, [r2, #38]	@ 0x26
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	f000 8087 	beq.w	80009be <D32_GENERIC+0x14a>
 80008b0:	9503      	str	r5, [sp, #12]
 80008b2:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80008b4:	2d01      	cmp	r5, #1
 80008b6:	d106      	bne.n	80008c6 <D32_GENERIC+0x52>
 80008b8:	f85a eb04 	ldr.w	lr, [sl], #4
 80008bc:	9d00      	ldr	r5, [sp, #0]
 80008be:	b1bd      	cbz	r5, 80008f0 <D32_GENERIC+0x7c>
 80008c0:	fa9e fe9e 	rev16.w	lr, lr
 80008c4:	e014      	b.n	80008f0 <D32_GENERIC+0x7c>
 80008c6:	b2ed      	uxtb	r5, r5
 80008c8:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80008cc:	f81a 700e 	ldrb.w	r7, [sl, lr]
 80008d0:	f81a e015 	ldrb.w	lr, [sl, r5, lsl #1]
 80008d4:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80008d8:	eb0e 6e07 	add.w	lr, lr, r7, lsl #24
 80008dc:	f81a 7005 	ldrb.w	r7, [sl, r5]
 80008e0:	eb0e 2e07 	add.w	lr, lr, r7, lsl #8
 80008e4:	f89a 7000 	ldrb.w	r7, [sl]
 80008e8:	eb0e 0e07 	add.w	lr, lr, r7
 80008ec:	eb0a 0a85 	add.w	sl, sl, r5, lsl #2
 80008f0:	f109 0504 	add.w	r5, r9, #4
 80008f4:	f00e 07ff 	and.w	r7, lr, #255	@ 0xff
 80008f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80008fc:	f109 0b04 	add.w	fp, r9, #4
 8000900:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8000904:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8000908:	f00e 03ff 	and.w	r3, lr, #255	@ 0xff
 800090c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8000910:	f3c5 0709 	ubfx	r7, r5, #0, #10
 8000914:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8000918:	f3c3 0509 	ubfx	r5, r3, #0, #10
 800091c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8000920:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000924:	f109 0704 	add.w	r7, r9, #4
 8000928:	f00e 0bff 	and.w	fp, lr, #255	@ 0xff
 800092c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000930:	f857 702b 	ldr.w	r7, [r7, fp, lsl #2]
 8000934:	eb07 2b93 	add.w	fp, r7, r3, lsr #10
 8000938:	f109 0304 	add.w	r3, r9, #4
 800093c:	f3cb 0709 	ubfx	r7, fp, #0, #10
 8000940:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8000944:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8000948:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 800094c:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
 8000950:	f8df 7c78 	ldr.w	r7, [pc, #3192]	@ 80015cc <.text_43>
 8000954:	fb25 cc07 	smlad	ip, r5, r7, ip
 8000958:	f44f 3b80 	mov.w	fp, #65536	@ 0x10000
 800095c:	fb2e c70b 	smlad	r7, lr, fp, ip
 8000960:	f8df cc6c 	ldr.w	ip, [pc, #3180]	@ 80015d0 <.text_44>
 8000964:	f8df bc6c 	ldr.w	fp, [pc, #3180]	@ 80015d4 <.text_45>
 8000968:	fb25 440c 	smlad	r4, r5, ip, r4
 800096c:	fb2e 4c0b 	smlad	ip, lr, fp, r4
 8000970:	2401      	movs	r4, #1
 8000972:	fb25 f404 	smuad	r4, r5, r4
 8000976:	f8df 5d68 	ldr.w	r5, [pc, #3432]	@ 80016e0 <.text_47>
 800097a:	fb2e 4405 	smlad	r4, lr, r5, r4
 800097e:	9d01      	ldr	r5, [sp, #4]
 8000980:	f5a7 4780 	sub.w	r7, r7, #16384	@ 0x4000
 8000984:	b13d      	cbz	r5, 8000996 <D32_GENERIC+0x122>
 8000986:	6a15      	ldr	r5, [r2, #32]
 8000988:	1838      	adds	r0, r7, r0
 800098a:	1a40      	subs	r0, r0, r1
 800098c:	fb50 f015 	smmulr	r0, r0, r5
 8000990:	0040      	lsls	r0, r0, #1
 8000992:	4639      	mov	r1, r7
 8000994:	4607      	mov	r7, r0
 8000996:	037f      	lsls	r7, r7, #13
 8000998:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800099c:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 80009a0:	fb57 f518 	smmulr	r5, r7, r8
 80009a4:	b2b7      	uxth	r7, r6
 80009a6:	f325 058f 	ssat	r5, #16, r5, asr #2
 80009aa:	fb0b f707 	mul.w	r7, fp, r7
 80009ae:	f82e 5017 	strh.w	r5, [lr, r7, lsl #1]
 80009b2:	1c76      	adds	r6, r6, #1
 80009b4:	8cd7      	ldrh	r7, [r2, #38]	@ 0x26
 80009b6:	b2b5      	uxth	r5, r6
 80009b8:	42bd      	cmp	r5, r7
 80009ba:	f4ff af7a 	bcc.w	80008b2 <D32_GENERIC+0x3e>
 80009be:	6110      	str	r0, [r2, #16]
 80009c0:	6094      	str	r4, [r2, #8]
 80009c2:	f8c2 c00c 	str.w	ip, [r2, #12]
 80009c6:	61d3      	str	r3, [r2, #28]
 80009c8:	6151      	str	r1, [r2, #20]
 80009ca:	9802      	ldr	r0, [sp, #8]
 80009cc:	6190      	str	r0, [r2, #24]
 80009ce:	b004      	add	sp, #16
 80009d0:	2000      	movs	r0, #0
 80009d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009d8 <D48_GENERIC>:
 80009d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009dc:	b085      	sub	sp, #20
 80009de:	4607      	mov	r7, r0
 80009e0:	460c      	mov	r4, r1
 80009e2:	6910      	ldr	r0, [r2, #16]
 80009e4:	6951      	ldr	r1, [r2, #20]
 80009e6:	6993      	ldr	r3, [r2, #24]
 80009e8:	f8df a3a4 	ldr.w	sl, [pc, #932]	@ 8000d90 <.text_18>
 80009ec:	9303      	str	r3, [sp, #12]
 80009ee:	f04f 0800 	mov.w	r8, #0
 80009f2:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 80009f4:	69d3      	ldr	r3, [r2, #28]
 80009f6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80009fa:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80009fe:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8000a00:	f006 0b10 	and.w	fp, r6, #16
 8000a04:	f8cd b004 	str.w	fp, [sp, #4]
 8000a08:	f006 0620 	and.w	r6, r6, #32
 8000a0c:	9600      	str	r6, [sp, #0]
 8000a0e:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	f000 80b0 	beq.w	8000b76 <D48_GENERIC+0x19e>
 8000a16:	9404      	str	r4, [sp, #16]
 8000a18:	9502      	str	r5, [sp, #8]
 8000a1a:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8000a1c:	2d01      	cmp	r5, #1
 8000a1e:	d10a      	bne.n	8000a36 <D48_GENERIC+0x5e>
 8000a20:	1d3d      	adds	r5, r7, #4
 8000a22:	683c      	ldr	r4, [r7, #0]
 8000a24:	f8d5 e000 	ldr.w	lr, [r5]
 8000a28:	1caf      	adds	r7, r5, #2
 8000a2a:	9d00      	ldr	r5, [sp, #0]
 8000a2c:	b1f5      	cbz	r5, 8000a6c <D48_GENERIC+0x94>
 8000a2e:	ba64      	rev16	r4, r4
 8000a30:	fa9e fe9e 	rev16.w	lr, lr
 8000a34:	e01a      	b.n	8000a6c <D48_GENERIC+0x94>
 8000a36:	b2ed      	uxtb	r5, r5
 8000a38:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8000a3c:	5dbc      	ldrb	r4, [r7, r6]
 8000a3e:	f817 6015 	ldrb.w	r6, [r7, r5, lsl #1]
 8000a42:	0436      	lsls	r6, r6, #16
 8000a44:	eb06 6604 	add.w	r6, r6, r4, lsl #24
 8000a48:	5d7c      	ldrb	r4, [r7, r5]
 8000a4a:	eb06 2e04 	add.w	lr, r6, r4, lsl #8
 8000a4e:	783e      	ldrb	r6, [r7, #0]
 8000a50:	eb0e 0406 	add.w	r4, lr, r6
 8000a54:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8000a58:	f817 e025 	ldrb.w	lr, [r7, r5, lsl #2]
 8000a5c:	f817 6006 	ldrb.w	r6, [r7, r6]
 8000a60:	eb0e 2e06 	add.w	lr, lr, r6, lsl #8
 8000a64:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8000a68:	eb07 0746 	add.w	r7, r7, r6, lsl #1
 8000a6c:	f10a 0b04 	add.w	fp, sl, #4
 8000a70:	f004 05ff 	and.w	r5, r4, #255	@ 0xff
 8000a74:	0a24      	lsrs	r4, r4, #8
 8000a76:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
 8000a7a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8000a7e:	f004 03ff 	and.w	r3, r4, #255	@ 0xff
 8000a82:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8000a86:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8000a8a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8000a8e:	f3c3 0509 	ubfx	r5, r3, #0, #10
 8000a92:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8000a96:	0a24      	lsrs	r4, r4, #8
 8000a98:	f10a 0604 	add.w	r6, sl, #4
 8000a9c:	f004 0bff 	and.w	fp, r4, #255	@ 0xff
 8000aa0:	0a24      	lsrs	r4, r4, #8
 8000aa2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8000aa6:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
 8000aaa:	eb0b 2b93 	add.w	fp, fp, r3, lsr #10
 8000aae:	eb06 269b 	add.w	r6, r6, fp, lsr #10
 8000ab2:	f3cb 0309 	ubfx	r3, fp, #0, #10
 8000ab6:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8000aba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abe:	f10a 0304 	add.w	r3, sl, #4
 8000ac2:	f00e 0bff 	and.w	fp, lr, #255	@ 0xff
 8000ac6:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8000aca:	f10a 0b04 	add.w	fp, sl, #4
 8000ace:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8000ad2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8000ad6:	f85b e02e 	ldr.w	lr, [fp, lr, lsl #2]
 8000ada:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8000ade:	eb0e 2393 	add.w	r3, lr, r3, lsr #10
 8000ae2:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 8000ae6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
 8000aea:	f8df 6bf8 	ldr.w	r6, [pc, #3064]	@ 80016e4 <.text_48>
 8000aee:	fb25 cc06 	smlad	ip, r5, r6, ip
 8000af2:	f8df 6ad8 	ldr.w	r6, [pc, #2776]	@ 80015cc <.text_43>
 8000af6:	fb24 cc06 	smlad	ip, r4, r6, ip
 8000afa:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8000afe:	fb2e c606 	smlad	r6, lr, r6, ip
 8000b02:	f8df cbe4 	ldr.w	ip, [pc, #3044]	@ 80016e8 <.text_49>
 8000b06:	fb25 990c 	smlad	r9, r5, ip, r9
 8000b0a:	f04f 1b1b 	mov.w	fp, #1769499	@ 0x1b001b
 8000b0e:	fb24 990b 	smlad	r9, r4, fp, r9
 8000b12:	f8df cbd8 	ldr.w	ip, [pc, #3032]	@ 80016ec <.text_50>
 8000b16:	fb2e 9c0c 	smlad	ip, lr, ip, r9
 8000b1a:	f04f 0901 	mov.w	r9, #1
 8000b1e:	fb25 f909 	smuad	r9, r5, r9
 8000b22:	f8df 5bbc 	ldr.w	r5, [pc, #3004]	@ 80016e0 <.text_47>
 8000b26:	fb24 9905 	smlad	r9, r4, r5, r9
 8000b2a:	f8df 4d20 	ldr.w	r4, [pc, #3360]	@ 800184c <.text_52>
 8000b2e:	9d01      	ldr	r5, [sp, #4]
 8000b30:	fb2e 9904 	smlad	r9, lr, r4, r9
 8000b34:	f5a6 4658 	sub.w	r6, r6, #55296	@ 0xd800
 8000b38:	b13d      	cbz	r5, 8000b4a <D48_GENERIC+0x172>
 8000b3a:	6a15      	ldr	r5, [r2, #32]
 8000b3c:	1830      	adds	r0, r6, r0
 8000b3e:	1a40      	subs	r0, r0, r1
 8000b40:	fb50 f015 	smmulr	r0, r0, r5
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	4631      	mov	r1, r6
 8000b48:	4606      	mov	r6, r0
 8000b4a:	9d02      	ldr	r5, [sp, #8]
 8000b4c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8000b50:	02f6      	lsls	r6, r6, #11
 8000b52:	fb56 f515 	smmulr	r5, r6, r5
 8000b56:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8000b58:	fa1f f488 	uxth.w	r4, r8
 8000b5c:	f325 058f 	ssat	r5, #16, r5, asr #2
 8000b60:	4374      	muls	r4, r6
 8000b62:	f82e 5014 	strh.w	r5, [lr, r4, lsl #1]
 8000b66:	f108 0801 	add.w	r8, r8, #1
 8000b6a:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8000b6c:	fa1f f588 	uxth.w	r5, r8
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	f4ff af52 	bcc.w	8000a1a <D48_GENERIC+0x42>
 8000b76:	6110      	str	r0, [r2, #16]
 8000b78:	f8c2 9008 	str.w	r9, [r2, #8]
 8000b7c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	6151      	str	r1, [r2, #20]
 8000b84:	9803      	ldr	r0, [sp, #12]
 8000b86:	6190      	str	r0, [r2, #24]
 8000b88:	b005      	add	sp, #20
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b90 <D64_GENERIC>:
 8000b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b94:	4613      	mov	r3, r2
 8000b96:	b084      	sub	sp, #16
 8000b98:	4686      	mov	lr, r0
 8000b9a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8000b9e:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8000ba2:	6998      	ldr	r0, [r3, #24]
 8000ba4:	4a7a      	ldr	r2, [pc, #488]	@ (8000d90 <.text_18>)
 8000ba6:	9002      	str	r0, [sp, #8]
 8000ba8:	f04f 0c00 	mov.w	ip, #0
 8000bac:	8cde      	ldrh	r6, [r3, #38]	@ 0x26
 8000bae:	69dc      	ldr	r4, [r3, #28]
 8000bb0:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8000bb4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8000bb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	f000 80d9 	beq.w	8000d72 <D64_GENERIC+0x1e2>
 8000bc0:	9103      	str	r1, [sp, #12]
 8000bc2:	9001      	str	r0, [sp, #4]
 8000bc4:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8000bc6:	2901      	cmp	r1, #1
 8000bc8:	d10a      	bne.n	8000be0 <D64_GENERIC+0x50>
 8000bca:	e8fe 0102 	ldrd	r0, r1, [lr], #8
 8000bce:	f893 6034 	ldrb.w	r6, [r3, #52]	@ 0x34
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	06b1      	lsls	r1, r6, #26
 8000bd6:	d52a      	bpl.n	8000c2e <D64_GENERIC+0x9e>
 8000bd8:	ba40      	rev16	r0, r0
 8000bda:	ba6d      	rev16	r5, r5
 8000bdc:	e027      	b.n	8000c2e <D64_GENERIC+0x9e>
 8000bde:	bf00      	nop
 8000be0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8000be4:	f81e 5000 	ldrb.w	r5, [lr, r0]
 8000be8:	f81e 0011 	ldrb.w	r0, [lr, r1, lsl #1]
 8000bec:	f89e 6000 	ldrb.w	r6, [lr]
 8000bf0:	0400      	lsls	r0, r0, #16
 8000bf2:	eb00 6005 	add.w	r0, r0, r5, lsl #24
 8000bf6:	f81e 5001 	ldrb.w	r5, [lr, r1]
 8000bfa:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8000bfe:	1980      	adds	r0, r0, r6
 8000c00:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000c04:	0076      	lsls	r6, r6, #1
 8000c06:	ebc1 07c1 	rsb	r7, r1, r1, lsl #3
 8000c0a:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8000c0e:	f81e 5007 	ldrb.w	r5, [lr, r7]
 8000c12:	0436      	lsls	r6, r6, #16
 8000c14:	eb06 6605 	add.w	r6, r6, r5, lsl #24
 8000c18:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000c1c:	f81e 7005 	ldrb.w	r7, [lr, r5]
 8000c20:	f81e 5021 	ldrb.w	r5, [lr, r1, lsl #2]
 8000c24:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8000c28:	1975      	adds	r5, r6, r5
 8000c2a:	eb0e 0ec1 	add.w	lr, lr, r1, lsl #3
 8000c2e:	1d11      	adds	r1, r2, #4
 8000c30:	f000 06ff 	and.w	r6, r0, #255	@ 0xff
 8000c34:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8000c38:	0a00      	lsrs	r0, r0, #8
 8000c3a:	f000 01ff 	and.w	r1, r0, #255	@ 0xff
 8000c3e:	193c      	adds	r4, r7, r4
 8000c40:	1d17      	adds	r7, r2, #4
 8000c42:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8000c46:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8000c4a:	eb01 2494 	add.w	r4, r1, r4, lsr #10
 8000c4e:	0a01      	lsrs	r1, r0, #8
 8000c50:	f3c4 0009 	ubfx	r0, r4, #0, #10
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	1d16      	adds	r6, r2, #4
 8000c5a:	f001 07ff 	and.w	r7, r1, #255	@ 0xff
 8000c5e:	0a09      	lsrs	r1, r1, #8
 8000c60:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8000c64:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8000c68:	1d14      	adds	r4, r2, #4
 8000c6a:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8000c6e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8000c72:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8000c76:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8000c7a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8000c7e:	1d17      	adds	r7, r2, #4
 8000c80:	f005 06ff 	and.w	r6, r5, #255	@ 0xff
 8000c84:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8000c88:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8000c8c:	0a2c      	lsrs	r4, r5, #8
 8000c8e:	9600      	str	r6, [sp, #0]
 8000c90:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8000c94:	f004 06ff 	and.w	r6, r4, #255	@ 0xff
 8000c98:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8000c9c:	9f00      	ldr	r7, [sp, #0]
 8000c9e:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 8000ca2:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8000ca6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8000caa:	9600      	str	r6, [sp, #0]
 8000cac:	0a24      	lsrs	r4, r4, #8
 8000cae:	1d17      	adds	r7, r2, #4
 8000cb0:	f004 06ff 	and.w	r6, r4, #255	@ 0xff
 8000cb4:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
 8000cb8:	9e00      	ldr	r6, [sp, #0]
 8000cba:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8000cbe:	9700      	str	r7, [sp, #0]
 8000cc0:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8000cc4:	1d17      	adds	r7, r2, #4
 8000cc6:	0a24      	lsrs	r4, r4, #8
 8000cc8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8000ccc:	9f00      	ldr	r7, [sp, #0]
 8000cce:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8000cd2:	f3c4 0709 	ubfx	r7, r4, #0, #10
 8000cd6:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000cda:	f8df 7b74 	ldr.w	r7, [pc, #2932]	@ 8001850 <.text_53>
 8000cde:	fb20 bb07 	smlad	fp, r0, r7, fp
 8000ce2:	f8df 7a00 	ldr.w	r7, [pc, #2560]	@ 80016e4 <.text_48>
 8000ce6:	fb21 bb07 	smlad	fp, r1, r7, fp
 8000cea:	f8df 78e0 	ldr.w	r7, [pc, #2272]	@ 80015cc <.text_43>
 8000cee:	fb25 bb07 	smlad	fp, r5, r7, fp
 8000cf2:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8000cf6:	fb26 b707 	smlad	r7, r6, r7, fp
 8000cfa:	f8df bb58 	ldr.w	fp, [pc, #2904]	@ 8001854 <.text_54>
 8000cfe:	fb20 aa0b 	smlad	sl, r0, fp, sl
 8000d02:	fb26 aa1b 	smladx	sl, r6, fp, sl
 8000d06:	f8df bb50 	ldr.w	fp, [pc, #2896]	@ 8001858 <.text_55>
 8000d0a:	fb21 aa0b 	smlad	sl, r1, fp, sl
 8000d0e:	fb25 ab1b 	smladx	fp, r5, fp, sl
 8000d12:	f04f 0a01 	mov.w	sl, #1
 8000d16:	fb20 fa0a 	smuad	sl, r0, sl
 8000d1a:	f8df 09c4 	ldr.w	r0, [pc, #2500]	@ 80016e0 <.text_47>
 8000d1e:	fb21 a000 	smlad	r0, r1, r0, sl
 8000d22:	f8df 1b28 	ldr.w	r1, [pc, #2856]	@ 800184c <.text_52>
 8000d26:	f8df acd4 	ldr.w	sl, [pc, #3284]	@ 80019fc <.text_57>
 8000d2a:	fb25 0001 	smlad	r0, r5, r1, r0
 8000d2e:	fb26 0a0a 	smlad	sl, r6, sl, r0
 8000d32:	6a18      	ldr	r0, [r3, #32]
 8000d34:	0aa4      	lsrs	r4, r4, #10
 8000d36:	f5a7 3700 	sub.w	r7, r7, #131072	@ 0x20000
 8000d3a:	b140      	cbz	r0, 8000d4e <D64_GENERIC+0x1be>
 8000d3c:	44b8      	add	r8, r7
 8000d3e:	eba8 0809 	sub.w	r8, r8, r9
 8000d42:	fb58 f810 	smmulr	r8, r8, r0
 8000d46:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000d4a:	46b9      	mov	r9, r7
 8000d4c:	4647      	mov	r7, r8
 8000d4e:	9801      	ldr	r0, [sp, #4]
 8000d50:	9903      	ldr	r1, [sp, #12]
 8000d52:	8d1d      	ldrh	r5, [r3, #40]	@ 0x28
 8000d54:	02bf      	lsls	r7, r7, #10
 8000d56:	fb57 f010 	smmulr	r0, r7, r0
 8000d5a:	f320 008f 	ssat	r0, #16, r0, asr #2
 8000d5e:	fb05 f50c 	mul.w	r5, r5, ip
 8000d62:	f821 0015 	strh.w	r0, [r1, r5, lsl #1]
 8000d66:	f10c 0c01 	add.w	ip, ip, #1
 8000d6a:	8cd8      	ldrh	r0, [r3, #38]	@ 0x26
 8000d6c:	4584      	cmp	ip, r0
 8000d6e:	f6ff af29 	blt.w	8000bc4 <D64_GENERIC+0x34>
 8000d72:	f8c3 a008 	str.w	sl, [r3, #8]
 8000d76:	f8c3 b00c 	str.w	fp, [r3, #12]
 8000d7a:	61dc      	str	r4, [r3, #28]
 8000d7c:	f8c3 8010 	str.w	r8, [r3, #16]
 8000d80:	f8c3 9014 	str.w	r9, [r3, #20]
 8000d84:	9802      	ldr	r0, [sp, #8]
 8000d86:	6198      	str	r0, [r3, #24]
 8000d88:	b004      	add	sp, #16
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d90 <.text_18>:
 8000d90:	20000000 	.word	0x20000000

08000d94 <.text_19>:
 8000d94:	e0002000 	.word	0xe0002000

08000d98 <.text_20>:
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <.text_21>:
 8000d9c:	e0042000 	.word	0xe0042000

08000da0 <.text_22>:
 8000da0:	5c001000 	.word	0x5c001000

08000da4 <.text_23>:
 8000da4:	58024c00 	.word	0x58024c00

08000da8 <.text_24>:
 8000da8:	40023000 	.word	0x40023000

08000dac <.text_25>:
 8000dac:	f407a5c2 	.word	0xf407a5c2

08000db0 <.text_26>:
 8000db0:	b5e8b5cd 	.word	0xb5e8b5cd

08000db4 <.text_27>:
 8000db4:	000ffc00 	.word	0x000ffc00

08000db8 <D80_GENERIC>:
 8000db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dbc:	460e      	mov	r6, r1
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	690b      	ldr	r3, [r1, #16]
 8000dc4:	694c      	ldr	r4, [r1, #20]
 8000dc6:	698a      	ldr	r2, [r1, #24]
 8000dc8:	9202      	str	r2, [sp, #8]
 8000dca:	f04f 0900 	mov.w	r9, #0
 8000dce:	f8b1 c026 	ldrh.w	ip, [r1, #38]	@ 0x26
 8000dd2:	69ca      	ldr	r2, [r1, #28]
 8000dd4:	688d      	ldr	r5, [r1, #8]
 8000dd6:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8000dda:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8000ddc:	f1bc 0f00 	cmp.w	ip, #0
 8000de0:	f000 8116 	beq.w	8001010 <D80_GENERIC+0x258>
 8000de4:	9603      	str	r6, [sp, #12]
 8000de6:	9100      	str	r1, [sp, #0]
 8000de8:	4684      	mov	ip, r0
 8000dea:	9701      	str	r7, [sp, #4]
 8000dec:	9800      	ldr	r0, [sp, #0]
 8000dee:	8d46      	ldrh	r6, [r0, #42]	@ 0x2a
 8000df0:	2e01      	cmp	r6, #1
 8000df2:	d112      	bne.n	8000e1a <D80_GENERIC+0x62>
 8000df4:	f10c 0004 	add.w	r0, ip, #4
 8000df8:	1d06      	adds	r6, r0, #4
 8000dfa:	6801      	ldr	r1, [r0, #0]
 8000dfc:	f8dc e000 	ldr.w	lr, [ip]
 8000e00:	6830      	ldr	r0, [r6, #0]
 8000e02:	f106 0c02 	add.w	ip, r6, #2
 8000e06:	9e00      	ldr	r6, [sp, #0]
 8000e08:	f896 7034 	ldrb.w	r7, [r6, #52]	@ 0x34
 8000e0c:	06be      	lsls	r6, r7, #26
 8000e0e:	d537      	bpl.n	8000e80 <D80_GENERIC+0xc8>
 8000e10:	fa9e fe9e 	rev16.w	lr, lr
 8000e14:	ba49      	rev16	r1, r1
 8000e16:	ba40      	rev16	r0, r0
 8000e18:	e032      	b.n	8000e80 <D80_GENERIC+0xc8>
 8000e1a:	b2f6      	uxtb	r6, r6
 8000e1c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8000e20:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8000e24:	f81c 0016 	ldrb.w	r0, [ip, r6, lsl #1]
 8000e28:	f89c e000 	ldrb.w	lr, [ip]
 8000e2c:	0400      	lsls	r0, r0, #16
 8000e2e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8000e32:	f81c 1006 	ldrb.w	r1, [ip, r6]
 8000e36:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8000e3a:	4486      	add	lr, r0
 8000e3c:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 8000e40:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8000e44:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8000e48:	007f      	lsls	r7, r7, #1
 8000e4a:	f81c 0007 	ldrb.w	r0, [ip, r7]
 8000e4e:	0400      	lsls	r0, r0, #16
 8000e50:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8000e54:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000e58:	f81c 7001 	ldrb.w	r7, [ip, r1]
 8000e5c:	f81c 1026 	ldrb.w	r1, [ip, r6, lsl #2]
 8000e60:	eb00 2007 	add.w	r0, r0, r7, lsl #8
 8000e64:	eb10 0101 	adds.w	r1, r0, r1
 8000e68:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8000e6c:	f81c 7000 	ldrb.w	r7, [ip, r0]
 8000e70:	f81c 0036 	ldrb.w	r0, [ip, r6, lsl #3]
 8000e74:	eb00 2007 	add.w	r0, r0, r7, lsl #8
 8000e78:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8000e7c:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
 8000e80:	f8df ab7c 	ldr.w	sl, [pc, #2940]	@ 8001a00 <.text_58>
 8000e84:	f00e 06ff 	and.w	r6, lr, #255	@ 0xff
 8000e88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000e8c:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 8000e90:	f00e 0bff 	and.w	fp, lr, #255	@ 0xff
 8000e94:	f85a 602b 	ldr.w	r6, [sl, fp, lsl #2]
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8000e9e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8000ea2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8000ea6:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 8000eaa:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
 8000eae:	4657      	mov	r7, sl
 8000eb0:	f002 0aff 	and.w	sl, r2, #255	@ 0xff
 8000eb4:	f857 b02a 	ldr.w	fp, [r7, sl, lsl #2]
 8000eb8:	0a12      	lsrs	r2, r2, #8
 8000eba:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8000ebe:	f8df 2b40 	ldr.w	r2, [pc, #2880]	@ 8001a00 <.text_58>
 8000ec2:	eb0b 2696 	add.w	r6, fp, r6, lsr #10
 8000ec6:	f3c6 0a09 	ubfx	sl, r6, #0, #10
 8000eca:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8000ece:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8000ed2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8000ed6:	f001 0aff 	and.w	sl, r1, #255	@ 0xff
 8000eda:	0a09      	lsrs	r1, r1, #8
 8000edc:	f8df bb20 	ldr.w	fp, [pc, #2848]	@ 8001a00 <.text_58>
 8000ee0:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8000ee4:	f001 0aff 	and.w	sl, r1, #255	@ 0xff
 8000ee8:	f85b a02a 	ldr.w	sl, [fp, sl, lsl #2]
 8000eec:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8000ef0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8000ef4:	eb0a 2a92 	add.w	sl, sl, r2, lsr #10
 8000ef8:	0a0a      	lsrs	r2, r1, #8
 8000efa:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8000efe:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8000f02:	465f      	mov	r7, fp
 8000f04:	f002 0bff 	and.w	fp, r2, #255	@ 0xff
 8000f08:	f857 702b 	ldr.w	r7, [r7, fp, lsl #2]
 8000f0c:	f8df baf0 	ldr.w	fp, [pc, #2800]	@ 8001a00 <.text_58>
 8000f10:	0a12      	lsrs	r2, r2, #8
 8000f12:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8000f16:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8000f1a:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 8000f1e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8000f22:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8000f26:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8000f2a:	46da      	mov	sl, fp
 8000f2c:	f000 0bff 	and.w	fp, r0, #255	@ 0xff
 8000f30:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8000f34:	f85a b02b 	ldr.w	fp, [sl, fp, lsl #2]
 8000f38:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8000f3c:	f8df 2ac0 	ldr.w	r2, [pc, #2752]	@ 8001a00 <.text_58>
 8000f40:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000f44:	eb02 229b 	add.w	r2, r2, fp, lsr #10
 8000f48:	f3cb 0a09 	ubfx	sl, fp, #0, #10
 8000f4c:	f3c2 0009 	ubfx	r0, r2, #0, #10
 8000f50:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000f54:	f8df aaac 	ldr.w	sl, [pc, #2732]	@ 8001a04 <.text_59>
 8000f58:	f8df b8f4 	ldr.w	fp, [pc, #2292]	@ 8001850 <.text_53>
 8000f5c:	fb2e 880a 	smlad	r8, lr, sl, r8
 8000f60:	fb26 880b 	smlad	r8, r6, fp, r8
 8000f64:	f8df a77c 	ldr.w	sl, [pc, #1916]	@ 80016e4 <.text_48>
 8000f68:	f8df b660 	ldr.w	fp, [pc, #1632]	@ 80015cc <.text_43>
 8000f6c:	fb21 880a 	smlad	r8, r1, sl, r8
 8000f70:	fb27 880b 	smlad	r8, r7, fp, r8
 8000f74:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8000f78:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8000f7c:	f8df 8c90 	ldr.w	r8, [pc, #3216]	@ 8001c10 <.text_61>
 8000f80:	f8df bc90 	ldr.w	fp, [pc, #3216]	@ 8001c14 <.text_62>
 8000f84:	fb2e 5508 	smlad	r5, lr, r8, r5
 8000f88:	fb26 550b 	smlad	r5, r6, fp, r5
 8000f8c:	f04f 184b 	mov.w	r8, #4915275	@ 0x4b004b
 8000f90:	fb21 5508 	smlad	r5, r1, r8, r5
 8000f94:	f8df bc80 	ldr.w	fp, [pc, #3200]	@ 8001c18 <.text_63>
 8000f98:	f8df 8c80 	ldr.w	r8, [pc, #3200]	@ 8001c1c <.text_64>
 8000f9c:	fb27 550b 	smlad	r5, r7, fp, r5
 8000fa0:	fb20 5808 	smlad	r8, r0, r8, r5
 8000fa4:	2501      	movs	r5, #1
 8000fa6:	fb2e f505 	smuad	r5, lr, r5
 8000faa:	f8df e734 	ldr.w	lr, [pc, #1844]	@ 80016e0 <.text_47>
 8000fae:	fb26 550e 	smlad	r5, r6, lr, r5
 8000fb2:	f8df 6898 	ldr.w	r6, [pc, #2200]	@ 800184c <.text_52>
 8000fb6:	fb21 5106 	smlad	r1, r1, r6, r5
 8000fba:	f8df 5a40 	ldr.w	r5, [pc, #2624]	@ 80019fc <.text_57>
 8000fbe:	f8df 6c60 	ldr.w	r6, [pc, #3168]	@ 8001c20 <.text_65>
 8000fc2:	fb27 1105 	smlad	r1, r7, r5, r1
 8000fc6:	fb20 1506 	smlad	r5, r0, r6, r1
 8000fca:	9800      	ldr	r0, [sp, #0]
 8000fcc:	6a00      	ldr	r0, [r0, #32]
 8000fce:	0a92      	lsrs	r2, r2, #10
 8000fd0:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 8000fd4:	b130      	cbz	r0, 8000fe4 <D80_GENERIC+0x22c>
 8000fd6:	4453      	add	r3, sl
 8000fd8:	1b1b      	subs	r3, r3, r4
 8000fda:	fb53 f310 	smmulr	r3, r3, r0
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4654      	mov	r4, sl
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	9f00      	ldr	r7, [sp, #0]
 8000fe6:	9801      	ldr	r0, [sp, #4]
 8000fe8:	8d3e      	ldrh	r6, [r7, #40]	@ 0x28
 8000fea:	ea4f 214a 	mov.w	r1, sl, lsl #9
 8000fee:	fb51 f010 	smmulr	r0, r1, r0
 8000ff2:	9903      	ldr	r1, [sp, #12]
 8000ff4:	f320 008f 	ssat	r0, #16, r0, asr #2
 8000ff8:	fb06 f609 	mul.w	r6, r6, r9
 8000ffc:	f821 0016 	strh.w	r0, [r1, r6, lsl #1]
 8001000:	f109 0901 	add.w	r9, r9, #1
 8001004:	9800      	ldr	r0, [sp, #0]
 8001006:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8001008:	4589      	cmp	r9, r1
 800100a:	f6ff aeef 	blt.w	8000dec <D80_GENERIC+0x34>
 800100e:	4601      	mov	r1, r0
 8001010:	608d      	str	r5, [r1, #8]
 8001012:	f8c1 800c 	str.w	r8, [r1, #12]
 8001016:	61ca      	str	r2, [r1, #28]
 8001018:	610b      	str	r3, [r1, #16]
 800101a:	614c      	str	r4, [r1, #20]
 800101c:	9802      	ldr	r0, [sp, #8]
 800101e:	6188      	str	r0, [r1, #24]
 8001020:	b004      	add	sp, #16
 8001022:	2000      	movs	r0, #0
 8001024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001028 <.text_29>:
 8001028:	3ff00000 	.word	0x3ff00000

0800102c <.text_30>:
 800102c:	080013f1 	.word	0x080013f1

08001030 <.text_31>:
 8001030:	080014a9 	.word	0x080014a9

08001034 <.text_32>:
 8001034:	080015d9 	.word	0x080015d9

08001038 <.text_33>:
 8001038:	080016f1 	.word	0x080016f1

0800103c <.text_34>:
 800103c:	0800185d 	.word	0x0800185d

08001040 <.text_35>:
 8001040:	08001a09 	.word	0x08001a09

08001044 <.text_36>:
 8001044:	08001c39 	.word	0x08001c39

08001048 <.text_37>:
 8001048:	00010003 	.word	0x00010003

0800104c <.text_38>:
 800104c:	00030001 	.word	0x00030001

08001050 <D128_GENERIC>:
 8001050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001054:	b089      	sub	sp, #36	@ 0x24
 8001056:	4681      	mov	r9, r0
 8001058:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800105c:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8001060:	6990      	ldr	r0, [r2, #24]
 8001062:	f8df 4bc0 	ldr.w	r4, [pc, #3008]	@ 8001c24 <.text_66>
 8001066:	9007      	str	r0, [sp, #28]
 8001068:	f04f 0800 	mov.w	r8, #0
 800106c:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 800106e:	69d5      	ldr	r5, [r2, #28]
 8001070:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8001074:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001078:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800107a:	2e00      	cmp	r6, #0
 800107c:	f000 81a8 	beq.w	80013d0 <D128_GENERIC+0x380>
 8001080:	9108      	str	r1, [sp, #32]
 8001082:	9201      	str	r2, [sp, #4]
 8001084:	9006      	str	r0, [sp, #24]
 8001086:	9801      	ldr	r0, [sp, #4]
 8001088:	8d46      	ldrh	r6, [r0, #42]	@ 0x2a
 800108a:	2e01      	cmp	r6, #1
 800108c:	d10d      	bne.n	80010aa <D128_GENERIC+0x5a>
 800108e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8001092:	9e01      	ldr	r6, [sp, #4]
 8001094:	f896 7034 	ldrb.w	r7, [r6, #52]	@ 0x34
 8001098:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800109c:	06be      	lsls	r6, r7, #26
 800109e:	d55b      	bpl.n	8001158 <D128_GENERIC+0x108>
 80010a0:	ba40      	rev16	r0, r0
 80010a2:	ba49      	rev16	r1, r1
 80010a4:	ba52      	rev16	r2, r2
 80010a6:	ba5b      	rev16	r3, r3
 80010a8:	e056      	b.n	8001158 <D128_GENERIC+0x108>
 80010aa:	b2f6      	uxtb	r6, r6
 80010ac:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80010b0:	f819 1000 	ldrb.w	r1, [r9, r0]
 80010b4:	f819 0016 	ldrb.w	r0, [r9, r6, lsl #1]
 80010b8:	f899 2000 	ldrb.w	r2, [r9]
 80010bc:	0400      	lsls	r0, r0, #16
 80010be:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 80010c2:	f819 1006 	ldrb.w	r1, [r9, r6]
 80010c6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 80010ca:	1880      	adds	r0, r0, r2
 80010cc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80010d0:	0052      	lsls	r2, r2, #1
 80010d2:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 80010d6:	f819 1002 	ldrb.w	r1, [r9, r2]
 80010da:	f819 7003 	ldrb.w	r7, [r9, r3]
 80010de:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80010e2:	0409      	lsls	r1, r1, #16
 80010e4:	f819 2003 	ldrb.w	r2, [r9, r3]
 80010e8:	f819 3026 	ldrb.w	r3, [r9, r6, lsl #2]
 80010ec:	eb01 6107 	add.w	r1, r1, r7, lsl #24
 80010f0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80010f4:	18c9      	adds	r1, r1, r3
 80010f6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80010fa:	270b      	movs	r7, #11
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fb17 f706 	smulbb	r7, r7, r6
 8001102:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001106:	f819 2007 	ldrb.w	r2, [r9, r7]
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8001110:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 8001114:	f819 7002 	ldrb.w	r7, [r9, r2]
 8001118:	f819 2036 	ldrb.w	r2, [r9, r6, lsl #3]
 800111c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001120:	ebc6 1706 	rsb	r7, r6, r6, lsl #4
 8001124:	189a      	adds	r2, r3, r2
 8001126:	f819 3007 	ldrb.w	r3, [r9, r7]
 800112a:	ebc6 07c6 	rsb	r7, r6, r6, lsl #3
 800112e:	007f      	lsls	r7, r7, #1
 8001130:	f819 7007 	ldrb.w	r7, [r9, r7]
 8001134:	043f      	lsls	r7, r7, #16
 8001136:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 800113a:	230d      	movs	r3, #13
 800113c:	fb13 f306 	smulbb	r3, r3, r6
 8001140:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001144:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8001148:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	eb09 1906 	add.w	r9, r9, r6, lsl #4
 8001158:	1d26      	adds	r6, r4, #4
 800115a:	f000 07ff 	and.w	r7, r0, #255	@ 0xff
 800115e:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8001162:	197e      	adds	r6, r7, r5
 8001164:	9600      	str	r6, [sp, #0]
 8001166:	0a00      	lsrs	r0, r0, #8
 8001168:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800116c:	1d27      	adds	r7, r4, #4
 800116e:	f000 06ff 	and.w	r6, r0, #255	@ 0xff
 8001172:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8001176:	9f00      	ldr	r7, [sp, #0]
 8001178:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 800117c:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001180:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001184:	9705      	str	r7, [sp, #20]
 8001186:	0a00      	lsrs	r0, r0, #8
 8001188:	1d27      	adds	r7, r4, #4
 800118a:	f000 05ff 	and.w	r5, r0, #255	@ 0xff
 800118e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8001192:	0a00      	lsrs	r0, r0, #8
 8001194:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001198:	1d26      	adds	r6, r4, #4
 800119a:	f3c5 0709 	ubfx	r7, r5, #0, #10
 800119e:	f856 6020 	ldr.w	r6, [r6, r0, lsl #2]
 80011a2:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80011a6:	f3c6 0509 	ubfx	r5, r6, #0, #10
 80011aa:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80011ae:	9504      	str	r5, [sp, #16]
 80011b0:	f001 07ff 	and.w	r7, r1, #255	@ 0xff
 80011b4:	1d25      	adds	r5, r4, #4
 80011b6:	0a09      	lsrs	r1, r1, #8
 80011b8:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 80011bc:	1d27      	adds	r7, r4, #4
 80011be:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80011c2:	f001 06ff 	and.w	r6, r1, #255	@ 0xff
 80011c6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80011ca:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80011ce:	f3c0 0509 	ubfx	r5, r0, #0, #10
 80011d2:	f3c6 0709 	ubfx	r7, r6, #0, #10
 80011d6:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 80011da:	9703      	str	r7, [sp, #12]
 80011dc:	0a09      	lsrs	r1, r1, #8
 80011de:	1d25      	adds	r5, r4, #4
 80011e0:	f001 07ff 	and.w	r7, r1, #255	@ 0xff
 80011e4:	0a09      	lsrs	r1, r1, #8
 80011e6:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 80011ea:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80011ee:	1d26      	adds	r6, r4, #4
 80011f0:	f3c0 0509 	ubfx	r5, r0, #0, #10
 80011f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80011f8:	eb01 2190 	add.w	r1, r1, r0, lsr #10
 80011fc:	f3c1 0609 	ubfx	r6, r1, #0, #10
 8001200:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8001204:	9602      	str	r6, [sp, #8]
 8001206:	1d25      	adds	r5, r4, #4
 8001208:	f002 06ff 	and.w	r6, r2, #255	@ 0xff
 800120c:	0a12      	lsrs	r2, r2, #8
 800120e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8001212:	f002 06ff 	and.w	r6, r2, #255	@ 0xff
 8001216:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800121a:	1d21      	adds	r1, r4, #4
 800121c:	f3c0 0509 	ubfx	r5, r0, #0, #10
 8001220:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8001224:	eb01 2190 	add.w	r1, r1, r0, lsr #10
 8001228:	f3c1 0609 	ubfx	r6, r1, #0, #10
 800122c:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8001230:	9600      	str	r6, [sp, #0]
 8001232:	0a12      	lsrs	r2, r2, #8
 8001234:	1d25      	adds	r5, r4, #4
 8001236:	f002 06ff 	and.w	r6, r2, #255	@ 0xff
 800123a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800123e:	0a12      	lsrs	r2, r2, #8
 8001240:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8001244:	1d21      	adds	r1, r4, #4
 8001246:	f3c0 0509 	ubfx	r5, r0, #0, #10
 800124a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800124e:	eb01 2190 	add.w	r1, r1, r0, lsr #10
 8001252:	f3c1 0009 	ubfx	r0, r1, #0, #10
 8001256:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800125a:	1d22      	adds	r2, r4, #4
 800125c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 07ff 	and.w	r7, r3, #255	@ 0xff
 8001266:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 800126a:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800126e:	1d21      	adds	r1, r4, #4
 8001270:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001274:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8001278:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800127c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8001280:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	1d25      	adds	r5, r4, #4
 8001288:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
 8001292:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8001296:	1d22      	adds	r2, r4, #4
 8001298:	f3c7 0609 	ubfx	r6, r7, #0, #10
 800129c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80012a0:	f8df 3984 	ldr.w	r3, [pc, #2436]	@ 8001c28 <.text_67>
 80012a4:	eb05 2597 	add.w	r5, r5, r7, lsr #10
 80012a8:	f3c5 0209 	ubfx	r2, r5, #0, #10
 80012ac:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80012b0:	9e05      	ldr	r6, [sp, #20]
 80012b2:	f8df 7978 	ldr.w	r7, [pc, #2424]	@ 8001c2c <.text_68>
 80012b6:	fb26 e303 	smlad	r3, r6, r3, lr
 80012ba:	9e04      	ldr	r6, [sp, #16]
 80012bc:	fb26 3307 	smlad	r3, r6, r7, r3
 80012c0:	9e03      	ldr	r6, [sp, #12]
 80012c2:	f8df 796c 	ldr.w	r7, [pc, #2412]	@ 8001c30 <.text_69>
 80012c6:	fb26 3307 	smlad	r3, r6, r7, r3
 80012ca:	9e02      	ldr	r6, [sp, #8]
 80012cc:	f8df 7734 	ldr.w	r7, [pc, #1844]	@ 8001a04 <.text_59>
 80012d0:	fb26 3307 	smlad	r3, r6, r7, r3
 80012d4:	9e00      	ldr	r6, [sp, #0]
 80012d6:	f8df 7578 	ldr.w	r7, [pc, #1400]	@ 8001850 <.text_53>
 80012da:	fb26 3307 	smlad	r3, r6, r7, r3
 80012de:	f8df 6404 	ldr.w	r6, [pc, #1028]	@ 80016e4 <.text_48>
 80012e2:	9f05      	ldr	r7, [sp, #20]
 80012e4:	fb20 3306 	smlad	r3, r0, r6, r3
 80012e8:	4eb8      	ldr	r6, [pc, #736]	@ (80015cc <.text_43>)
 80012ea:	fb21 3306 	smlad	r3, r1, r6, r3
 80012ee:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80012f2:	fb22 3306 	smlad	r3, r2, r6, r3
 80012f6:	f8df 6c1c 	ldr.w	r6, [pc, #3100]	@ 8001f14 <.text_72>
 80012fa:	0aad      	lsrs	r5, r5, #10
 80012fc:	fb27 cc06 	smlad	ip, r7, r6, ip
 8001300:	9f04      	ldr	r7, [sp, #16]
 8001302:	f8df 6c14 	ldr.w	r6, [pc, #3092]	@ 8001f18 <.text_73>
 8001306:	fb27 cc06 	smlad	ip, r7, r6, ip
 800130a:	9f03      	ldr	r7, [sp, #12]
 800130c:	f8df 6c0c 	ldr.w	r6, [pc, #3084]	@ 8001f1c <.text_74>
 8001310:	fb27 cc06 	smlad	ip, r7, r6, ip
 8001314:	9f02      	ldr	r7, [sp, #8]
 8001316:	f8df 6c08 	ldr.w	r6, [pc, #3080]	@ 8001f20 <.text_75>
 800131a:	fb27 cc06 	smlad	ip, r7, r6, ip
 800131e:	9f00      	ldr	r7, [sp, #0]
 8001320:	f8df 6c00 	ldr.w	r6, [pc, #3072]	@ 8001f24 <.text_76>
 8001324:	fb27 cc06 	smlad	ip, r7, r6, ip
 8001328:	f8df 6bfc 	ldr.w	r6, [pc, #3068]	@ 8001f28 <.text_77>
 800132c:	f8df 73b0 	ldr.w	r7, [pc, #944]	@ 80016e0 <.text_47>
 8001330:	fb20 cc06 	smlad	ip, r0, r6, ip
 8001334:	f8df 6bf4 	ldr.w	r6, [pc, #3060]	@ 8001f2c <.text_78>
 8001338:	fb21 cc06 	smlad	ip, r1, r6, ip
 800133c:	f8df 6bf0 	ldr.w	r6, [pc, #3056]	@ 8001f30 <.text_79>
 8001340:	fb22 ce06 	smlad	lr, r2, r6, ip
 8001344:	9e05      	ldr	r6, [sp, #20]
 8001346:	f04f 0c01 	mov.w	ip, #1
 800134a:	fb26 fc0c 	smuad	ip, r6, ip
 800134e:	9e04      	ldr	r6, [sp, #16]
 8001350:	fb26 cc07 	smlad	ip, r6, r7, ip
 8001354:	9e03      	ldr	r6, [sp, #12]
 8001356:	f8df 74f4 	ldr.w	r7, [pc, #1268]	@ 800184c <.text_52>
 800135a:	fb26 cc07 	smlad	ip, r6, r7, ip
 800135e:	9e02      	ldr	r6, [sp, #8]
 8001360:	f8df 7698 	ldr.w	r7, [pc, #1688]	@ 80019fc <.text_57>
 8001364:	fb26 cc07 	smlad	ip, r6, r7, ip
 8001368:	9e00      	ldr	r6, [sp, #0]
 800136a:	f8df 78b4 	ldr.w	r7, [pc, #2228]	@ 8001c20 <.text_65>
 800136e:	fb26 cc07 	smlad	ip, r6, r7, ip
 8001372:	f8df 7bc0 	ldr.w	r7, [pc, #3008]	@ 8001f34 <.text_80>
 8001376:	f8df 6bc0 	ldr.w	r6, [pc, #3008]	@ 8001f38 <.text_81>
 800137a:	fb20 c007 	smlad	r0, r0, r7, ip
 800137e:	fb21 0006 	smlad	r0, r1, r6, r0
 8001382:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8001f3c <.text_82>
 8001386:	fb22 0c01 	smlad	ip, r2, r1, r0
 800138a:	9801      	ldr	r0, [sp, #4]
 800138c:	6a00      	ldr	r0, [r0, #32]
 800138e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8001392:	b140      	cbz	r0, 80013a6 <D128_GENERIC+0x356>
 8001394:	449a      	add	sl, r3
 8001396:	ebaa 0a0b 	sub.w	sl, sl, fp
 800139a:	fb5a fa10 	smmulr	sl, sl, r0
 800139e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80013a2:	469b      	mov	fp, r3
 80013a4:	4653      	mov	r3, sl
 80013a6:	9a01      	ldr	r2, [sp, #4]
 80013a8:	9806      	ldr	r0, [sp, #24]
 80013aa:	9908      	ldr	r1, [sp, #32]
 80013ac:	01db      	lsls	r3, r3, #7
 80013ae:	fb53 f010 	smmulr	r0, r3, r0
 80013b2:	8d13      	ldrh	r3, [r2, #40]	@ 0x28
 80013b4:	f320 008f 	ssat	r0, #16, r0, asr #2
 80013b8:	fb03 f308 	mul.w	r3, r3, r8
 80013bc:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
 80013c0:	f108 0801 	add.w	r8, r8, #1
 80013c4:	9801      	ldr	r0, [sp, #4]
 80013c6:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 80013c8:	4588      	cmp	r8, r1
 80013ca:	f6ff ae5c 	blt.w	8001086 <D128_GENERIC+0x36>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f8c2 c008 	str.w	ip, [r2, #8]
 80013d4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80013d8:	61d5      	str	r5, [r2, #28]
 80013da:	f8c2 a010 	str.w	sl, [r2, #16]
 80013de:	f8c2 b014 	str.w	fp, [r2, #20]
 80013e2:	9807      	ldr	r0, [sp, #28]
 80013e4:	6190      	str	r0, [r2, #24]
 80013e6:	b009      	add	sp, #36	@ 0x24
 80013e8:	2000      	movs	r0, #0
 80013ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080013f0 <D16_1CH_HTONS_VOL_HP>:
 80013f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f4:	4616      	mov	r6, r2
 80013f6:	b083      	sub	sp, #12
 80013f8:	4681      	mov	r9, r0
 80013fa:	6934      	ldr	r4, [r6, #16]
 80013fc:	6975      	ldr	r5, [r6, #20]
 80013fe:	69b0      	ldr	r0, [r6, #24]
 8001400:	9002      	str	r0, [sp, #8]
 8001402:	4688      	mov	r8, r1
 8001404:	69f1      	ldr	r1, [r6, #28]
 8001406:	68b3      	ldr	r3, [r6, #8]
 8001408:	68f0      	ldr	r0, [r6, #12]
 800140a:	9001      	str	r0, [sp, #4]
 800140c:	8cf0      	ldrh	r0, [r6, #38]	@ 0x26
 800140e:	f8d6 c030 	ldr.w	ip, [r6, #48]	@ 0x30
 8001412:	f8d6 e020 	ldr.w	lr, [r6, #32]
 8001416:	2801      	cmp	r0, #1
 8001418:	db39      	blt.n	800148e <D16_1CH_HTONS_VOL_HP+0x9e>
 800141a:	f8df 7b24 	ldr.w	r7, [pc, #2852]	@ 8001f40 <.text_83>
 800141e:	9700      	str	r7, [sp, #0]
 8001420:	464a      	mov	r2, r9
 8001422:	f8df 7800 	ldr.w	r7, [pc, #2048]	@ 8001c24 <.text_66>
 8001426:	46e1      	mov	r9, ip
 8001428:	f852 cb02 	ldr.w	ip, [r2], #2
 800142c:	fa9c fb9c 	rev16.w	fp, ip
 8001430:	f107 0c04 	add.w	ip, r7, #4
 8001434:	f00b 0aff 	and.w	sl, fp, #255	@ 0xff
 8001438:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800143c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8001440:	eb0a 0c01 	add.w	ip, sl, r1
 8001444:	1d39      	adds	r1, r7, #4
 8001446:	f3cc 0a09 	ubfx	sl, ip, #0, #10
 800144a:	f851 102b 	ldr.w	r1, [r1, fp, lsl #2]
 800144e:	eb01 219c 	add.w	r1, r1, ip, lsr #10
 8001452:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 8001456:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 800145a:	f8df aae8 	ldr.w	sl, [pc, #2792]	@ 8001f44 <.text_84>
 800145e:	fb2c 3a0a 	smlad	sl, ip, sl, r3
 8001462:	f5aa 6a00 	sub.w	sl, sl, #2048	@ 0x800
 8001466:	4454      	add	r4, sl
 8001468:	9b00      	ldr	r3, [sp, #0]
 800146a:	1b64      	subs	r4, r4, r5
 800146c:	fb54 f41e 	smmulr	r4, r4, lr
 8001470:	fb2c f303 	smuad	r3, ip, r3
 8001474:	0064      	lsls	r4, r4, #1
 8001476:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 800147a:	0a89      	lsrs	r1, r1, #10
 800147c:	fb5c fc19 	smmulr	ip, ip, r9
 8001480:	f32c 0c8f 	ssat	ip, #16, ip, asr #2
 8001484:	1e40      	subs	r0, r0, #1
 8001486:	4655      	mov	r5, sl
 8001488:	f828 cb02 	strh.w	ip, [r8], #2
 800148c:	d1cc      	bne.n	8001428 <D16_1CH_HTONS_VOL_HP+0x38>
 800148e:	60b3      	str	r3, [r6, #8]
 8001490:	9801      	ldr	r0, [sp, #4]
 8001492:	60f0      	str	r0, [r6, #12]
 8001494:	61f1      	str	r1, [r6, #28]
 8001496:	6134      	str	r4, [r6, #16]
 8001498:	6175      	str	r5, [r6, #20]
 800149a:	9802      	ldr	r0, [sp, #8]
 800149c:	61b0      	str	r0, [r6, #24]
 800149e:	b003      	add	sp, #12
 80014a0:	2000      	movs	r0, #0
 80014a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080014a8 <D24_1CH_HTONS_VOL_HP>:
 80014a8:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	4686      	mov	lr, r0
 80014b0:	468c      	mov	ip, r1
 80014b2:	6910      	ldr	r0, [r2, #16]
 80014b4:	6951      	ldr	r1, [r2, #20]
 80014b6:	6994      	ldr	r4, [r2, #24]
 80014b8:	9b02      	ldr	r3, [sp, #8]
 80014ba:	9401      	str	r4, [sp, #4]
 80014bc:	f04f 0b00 	mov.w	fp, #0
 80014c0:	9e02      	ldr	r6, [sp, #8]
 80014c2:	f8b6 8026 	ldrh.w	r8, [r6, #38]	@ 0x26
 80014c6:	9c02      	ldr	r4, [sp, #8]
 80014c8:	9e02      	ldr	r6, [sp, #8]
 80014ca:	69dd      	ldr	r5, [r3, #28]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80014d2:	f8d6 a020 	ldr.w	sl, [r6, #32]
 80014d6:	f1b8 0f00 	cmp.w	r8, #0
 80014da:	dd64      	ble.n	80015a6 <D24_1CH_HTONS_VOL_HP+0xfe>
 80014dc:	eb0b 79db 	add.w	r9, fp, fp, lsr #31
 80014e0:	ea4f 0969 	mov.w	r9, r9, asr #1
 80014e4:	f89e 6003 	ldrb.w	r6, [lr, #3]
 80014e8:	f89e 7000 	ldrb.w	r7, [lr]
 80014ec:	ebbb 0949 	subs.w	r9, fp, r9, lsl #1
 80014f0:	d10a      	bne.n	8001508 <D24_1CH_HTONS_VOL_HP+0x60>
 80014f2:	023f      	lsls	r7, r7, #8
 80014f4:	f89e 9001 	ldrb.w	r9, [lr, #1]
 80014f8:	eb07 4706 	add.w	r7, r7, r6, lsl #16
 80014fc:	eb07 0609 	add.w	r6, r7, r9
 8001500:	f10e 0e02 	add.w	lr, lr, #2
 8001504:	e008      	b.n	8001518 <D24_1CH_HTONS_VOL_HP+0x70>
 8001506:	bf00      	nop
 8001508:	f89e 9002 	ldrb.w	r9, [lr, #2]
 800150c:	0236      	lsls	r6, r6, #8
 800150e:	eb06 4609 	add.w	r6, r6, r9, lsl #16
 8001512:	19be      	adds	r6, r7, r6
 8001514:	f10e 0e04 	add.w	lr, lr, #4
 8001518:	f8df 94e4 	ldr.w	r9, [pc, #1252]	@ 8001a00 <.text_58>
 800151c:	f006 07ff 	and.w	r7, r6, #255	@ 0xff
 8001520:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 8001524:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8001528:	9700      	str	r7, [sp, #0]
 800152a:	f3c7 0909 	ubfx	r9, r7, #0, #10
 800152e:	0a35      	lsrs	r5, r6, #8
 8001530:	f8df 74cc 	ldr.w	r7, [pc, #1228]	@ 8001a00 <.text_58>
 8001534:	f005 06ff 	and.w	r6, r5, #255	@ 0xff
 8001538:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800153c:	9f00      	ldr	r7, [sp, #0]
 800153e:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 8001542:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001546:	ea47 4909 	orr.w	r9, r7, r9, lsl #16
 800154a:	f8df 74b4 	ldr.w	r7, [pc, #1204]	@ 8001a00 <.text_58>
 800154e:	0a2d      	lsrs	r5, r5, #8
 8001550:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8001554:	f8df 79ec 	ldr.w	r7, [pc, #2540]	@ 8001f44 <.text_84>
 8001558:	fb29 3707 	smlad	r7, r9, r7, r3
 800155c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <.text_42>)
 8001562:	f5a7 57d8 	sub.w	r7, r7, #6912	@ 0x1b00
 8001566:	f3c5 0609 	ubfx	r6, r5, #0, #10
 800156a:	fb29 2303 	smlad	r3, r9, r3, r2
 800156e:	1838      	adds	r0, r7, r0
 8001570:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001574:	1a40      	subs	r0, r0, r1
 8001576:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800157a:	fb50 f01a 	smmulr	r0, r0, sl
 800157e:	2201      	movs	r2, #1
 8001580:	0040      	lsls	r0, r0, #1
 8001582:	fb29 f202 	smuad	r2, r9, r2
 8001586:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800158a:	ea4f 3980 	mov.w	r9, r0, lsl #14
 800158e:	18b2      	adds	r2, r6, r2
 8001590:	fb59 f914 	smmulr	r9, r9, r4
 8001594:	f10b 0b01 	add.w	fp, fp, #1
 8001598:	f329 098f 	ssat	r9, #16, r9, asr #2
 800159c:	45c3      	cmp	fp, r8
 800159e:	4639      	mov	r1, r7
 80015a0:	f82c 9b02 	strh.w	r9, [ip], #2
 80015a4:	db9a      	blt.n	80014dc <D24_1CH_HTONS_VOL_HP+0x34>
 80015a6:	9c02      	ldr	r4, [sp, #8]
 80015a8:	60a2      	str	r2, [r4, #8]
 80015aa:	9a02      	ldr	r2, [sp, #8]
 80015ac:	60d3      	str	r3, [r2, #12]
 80015ae:	9b02      	ldr	r3, [sp, #8]
 80015b0:	61dd      	str	r5, [r3, #28]
 80015b2:	9a02      	ldr	r2, [sp, #8]
 80015b4:	6110      	str	r0, [r2, #16]
 80015b6:	9802      	ldr	r0, [sp, #8]
 80015b8:	6141      	str	r1, [r0, #20]
 80015ba:	9802      	ldr	r0, [sp, #8]
 80015bc:	9901      	ldr	r1, [sp, #4]
 80015be:	6181      	str	r1, [r0, #24]
 80015c0:	2000      	movs	r0, #0
 80015c2:	b003      	add	sp, #12
 80015c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015c8 <.text_42>:
 80015c8:	00060007 	.word	0x00060007

080015cc <.text_43>:
 80015cc:	00060003 	.word	0x00060003

080015d0 <.text_44>:
 80015d0:	000a000c 	.word	0x000a000c

080015d4 <.text_45>:
 80015d4:	000c000a 	.word	0x000c000a

080015d8 <D32_1CH_HTONS_VOL_HP>:
 80015d8:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015dc:	b083      	sub	sp, #12
 80015de:	4684      	mov	ip, r0
 80015e0:	4689      	mov	r9, r1
 80015e2:	6910      	ldr	r0, [r2, #16]
 80015e4:	6951      	ldr	r1, [r2, #20]
 80015e6:	6994      	ldr	r4, [r2, #24]
 80015e8:	9b03      	ldr	r3, [sp, #12]
 80015ea:	9d03      	ldr	r5, [sp, #12]
 80015ec:	9402      	str	r4, [sp, #8]
 80015ee:	9c03      	ldr	r4, [sp, #12]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80015f6:	8cee      	ldrh	r6, [r5, #38]	@ 0x26
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80015fc:	6a2d      	ldr	r5, [r5, #32]
 80015fe:	2e01      	cmp	r6, #1
 8001600:	db5c      	blt.n	80016bc <D32_1CH_HTONS_VOL_HP+0xe4>
 8001602:	9401      	str	r4, [sp, #4]
 8001604:	9500      	str	r5, [sp, #0]
 8001606:	4634      	mov	r4, r6
 8001608:	f8df 893c 	ldr.w	r8, [pc, #2364]	@ 8001f48 <.text_85>
 800160c:	f8df 7614 	ldr.w	r7, [pc, #1556]	@ 8001c24 <.text_66>
 8001610:	f85c 5b04 	ldr.w	r5, [ip], #4
 8001614:	ba6d      	rev16	r5, r5
 8001616:	1d3e      	adds	r6, r7, #4
 8001618:	f005 0aff 	and.w	sl, r5, #255	@ 0xff
 800161c:	0a2d      	lsrs	r5, r5, #8
 800161e:	f107 0b04 	add.w	fp, r7, #4
 8001622:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
 8001626:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800162a:	f005 02ff 	and.w	r2, r5, #255	@ 0xff
 800162e:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8001632:	f3c6 0a09 	ubfx	sl, r6, #0, #10
 8001636:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800163a:	f3c2 0609 	ubfx	r6, r2, #0, #10
 800163e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8001642:	0a2d      	lsrs	r5, r5, #8
 8001644:	f107 0a04 	add.w	sl, r7, #4
 8001648:	f005 0bff 	and.w	fp, r5, #255	@ 0xff
 800164c:	0a2d      	lsrs	r5, r5, #8
 800164e:	f85a b02b 	ldr.w	fp, [sl, fp, lsl #2]
 8001652:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8001656:	1d3a      	adds	r2, r7, #4
 8001658:	f3cb 0a09 	ubfx	sl, fp, #0, #10
 800165c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8001660:	eb02 229b 	add.w	r2, r2, fp, lsr #10
 8001664:	f3c2 0509 	ubfx	r5, r2, #0, #10
 8001668:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800166c:	fb26 ee08 	smlad	lr, r6, r8, lr
 8001670:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8001674:	fb25 ea0a 	smlad	sl, r5, sl, lr
 8001678:	f8df e8d0 	ldr.w	lr, [pc, #2256]	@ 8001f4c <.text_86>
 800167c:	f8df b8d0 	ldr.w	fp, [pc, #2256]	@ 8001f50 <.text_87>
 8001680:	fb26 330e 	smlad	r3, r6, lr, r3
 8001684:	fb25 3e0b 	smlad	lr, r5, fp, r3
 8001688:	2301      	movs	r3, #1
 800168a:	fb26 f303 	smuad	r3, r6, r3
 800168e:	f8df 68c4 	ldr.w	r6, [pc, #2244]	@ 8001f54 <.text_88>
 8001692:	fb25 3306 	smlad	r3, r5, r6, r3
 8001696:	f5aa 4680 	sub.w	r6, sl, #16384	@ 0x4000
 800169a:	9d00      	ldr	r5, [sp, #0]
 800169c:	4430      	add	r0, r6
 800169e:	1a40      	subs	r0, r0, r1
 80016a0:	fb50 f015 	smmulr	r0, r0, r5
 80016a4:	0040      	lsls	r0, r0, #1
 80016a6:	4631      	mov	r1, r6
 80016a8:	9d01      	ldr	r5, [sp, #4]
 80016aa:	0346      	lsls	r6, r0, #13
 80016ac:	fb56 f515 	smmulr	r5, r6, r5
 80016b0:	f325 058f 	ssat	r5, #16, r5, asr #2
 80016b4:	1e64      	subs	r4, r4, #1
 80016b6:	f829 5b02 	strh.w	r5, [r9], #2
 80016ba:	d1a9      	bne.n	8001610 <D32_1CH_HTONS_VOL_HP+0x38>
 80016bc:	9c03      	ldr	r4, [sp, #12]
 80016be:	60a3      	str	r3, [r4, #8]
 80016c0:	9b03      	ldr	r3, [sp, #12]
 80016c2:	f8c3 e00c 	str.w	lr, [r3, #12]
 80016c6:	9c03      	ldr	r4, [sp, #12]
 80016c8:	61e2      	str	r2, [r4, #28]
 80016ca:	9a03      	ldr	r2, [sp, #12]
 80016cc:	6110      	str	r0, [r2, #16]
 80016ce:	9803      	ldr	r0, [sp, #12]
 80016d0:	6141      	str	r1, [r0, #20]
 80016d2:	9803      	ldr	r0, [sp, #12]
 80016d4:	9902      	ldr	r1, [sp, #8]
 80016d6:	6181      	str	r1, [r0, #24]
 80016d8:	2000      	movs	r0, #0
 80016da:	b004      	add	sp, #16
 80016dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080016e0 <.text_47>:
 80016e0:	00030006 	.word	0x00030006

080016e4 <.text_48>:
 80016e4:	000f000a 	.word	0x000f000a

080016e8 <.text_49>:
 80016e8:	00150019 	.word	0x00150019

080016ec <.text_50>:
 80016ec:	00190015 	.word	0x00190015

080016f0 <D48_1CH_HTONS_VOL_HP>:
 80016f0:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016f4:	b083      	sub	sp, #12
 80016f6:	4684      	mov	ip, r0
 80016f8:	4688      	mov	r8, r1
 80016fa:	6910      	ldr	r0, [r2, #16]
 80016fc:	6951      	ldr	r1, [r2, #20]
 80016fe:	6994      	ldr	r4, [r2, #24]
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	9d03      	ldr	r5, [sp, #12]
 8001704:	9402      	str	r4, [sp, #8]
 8001706:	9c03      	ldr	r4, [sp, #12]
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800170e:	f8b5 9026 	ldrh.w	r9, [r5, #38]	@ 0x26
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8001716:	6a2d      	ldr	r5, [r5, #32]
 8001718:	f1b9 0f01 	cmp.w	r9, #1
 800171c:	f2c0 8084 	blt.w	8001828 <D48_1CH_HTONS_VOL_HP+0x138>
 8001720:	f8df 7500 	ldr.w	r7, [pc, #1280]	@ 8001c24 <.text_66>
 8001724:	9401      	str	r4, [sp, #4]
 8001726:	9500      	str	r5, [sp, #0]
 8001728:	f10c 0404 	add.w	r4, ip, #4
 800172c:	f8dc 5000 	ldr.w	r5, [ip]
 8001730:	6826      	ldr	r6, [r4, #0]
 8001732:	f104 0c02 	add.w	ip, r4, #2
 8001736:	ba74      	rev16	r4, r6
 8001738:	ba6d      	rev16	r5, r5
 800173a:	1d3e      	adds	r6, r7, #4
 800173c:	f005 0aff 	and.w	sl, r5, #255	@ 0xff
 8001740:	0a2d      	lsrs	r5, r5, #8
 8001742:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
 8001746:	f005 0aff 	and.w	sl, r5, #255	@ 0xff
 800174a:	eb06 2b92 	add.w	fp, r6, r2, lsr #10
 800174e:	1d3a      	adds	r2, r7, #4
 8001750:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8001754:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8001758:	eb02 2a9b 	add.w	sl, r2, fp, lsr #10
 800175c:	0a2a      	lsrs	r2, r5, #8
 800175e:	f3ca 0509 	ubfx	r5, sl, #0, #10
 8001762:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001766:	1d3e      	adds	r6, r7, #4
 8001768:	f002 0bff 	and.w	fp, r2, #255	@ 0xff
 800176c:	f856 602b 	ldr.w	r6, [r6, fp, lsl #2]
 8001770:	0a12      	lsrs	r2, r2, #8
 8001772:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8001776:	f107 0a04 	add.w	sl, r7, #4
 800177a:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 800177e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8001782:	eb02 2a96 	add.w	sl, r2, r6, lsr #10
 8001786:	f3ca 0609 	ubfx	r6, sl, #0, #10
 800178a:	ea46 460b 	orr.w	r6, r6, fp, lsl #16
 800178e:	1d3a      	adds	r2, r7, #4
 8001790:	f004 0bff 	and.w	fp, r4, #255	@ 0xff
 8001794:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
 8001798:	f107 0b04 	add.w	fp, r7, #4
 800179c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80017a0:	eb02 229a 	add.w	r2, r2, sl, lsr #10
 80017a4:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 80017a8:	f8df b79c 	ldr.w	fp, [pc, #1948]	@ 8001f48 <.text_85>
 80017ac:	f3c2 0a09 	ubfx	sl, r2, #0, #10
 80017b0:	eb04 2292 	add.w	r2, r4, r2, lsr #10
 80017b4:	f3c2 0409 	ubfx	r4, r2, #0, #10
 80017b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80017bc:	f8df a798 	ldr.w	sl, [pc, #1944]	@ 8001f58 <.text_89>
 80017c0:	fb25 ee0a 	smlad	lr, r5, sl, lr
 80017c4:	fb26 ee0b 	smlad	lr, r6, fp, lr
 80017c8:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 80017cc:	fb24 ea0a 	smlad	sl, r4, sl, lr
 80017d0:	f8df e788 	ldr.w	lr, [pc, #1928]	@ 8001f5c <.text_90>
 80017d4:	fb25 330e 	smlad	r3, r5, lr, r3
 80017d8:	f04f 1b1b 	mov.w	fp, #1769499	@ 0x1b001b
 80017dc:	fb26 330b 	smlad	r3, r6, fp, r3
 80017e0:	f8df e77c 	ldr.w	lr, [pc, #1916]	@ 8001f60 <.text_91>
 80017e4:	fb24 3e0e 	smlad	lr, r4, lr, r3
 80017e8:	2301      	movs	r3, #1
 80017ea:	fb25 f303 	smuad	r3, r5, r3
 80017ee:	f8df 5764 	ldr.w	r5, [pc, #1892]	@ 8001f54 <.text_88>
 80017f2:	fb26 3305 	smlad	r3, r6, r5, r3
 80017f6:	f8df 676c 	ldr.w	r6, [pc, #1900]	@ 8001f64 <.text_92>
 80017fa:	fb24 3306 	smlad	r3, r4, r6, r3
 80017fe:	f5aa 4558 	sub.w	r5, sl, #55296	@ 0xd800
 8001802:	9c00      	ldr	r4, [sp, #0]
 8001804:	4428      	add	r0, r5
 8001806:	1a40      	subs	r0, r0, r1
 8001808:	fb50 f014 	smmulr	r0, r0, r4
 800180c:	0040      	lsls	r0, r0, #1
 800180e:	4629      	mov	r1, r5
 8001810:	9c01      	ldr	r4, [sp, #4]
 8001812:	02c5      	lsls	r5, r0, #11
 8001814:	fb55 f414 	smmulr	r4, r5, r4
 8001818:	f324 048f 	ssat	r4, #16, r4, asr #2
 800181c:	f1b9 0901 	subs.w	r9, r9, #1
 8001820:	f828 4b02 	strh.w	r4, [r8], #2
 8001824:	f47f af80 	bne.w	8001728 <D48_1CH_HTONS_VOL_HP+0x38>
 8001828:	9c03      	ldr	r4, [sp, #12]
 800182a:	60a3      	str	r3, [r4, #8]
 800182c:	9b03      	ldr	r3, [sp, #12]
 800182e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8001832:	9c03      	ldr	r4, [sp, #12]
 8001834:	61e2      	str	r2, [r4, #28]
 8001836:	9a03      	ldr	r2, [sp, #12]
 8001838:	6110      	str	r0, [r2, #16]
 800183a:	9803      	ldr	r0, [sp, #12]
 800183c:	6141      	str	r1, [r0, #20]
 800183e:	9803      	ldr	r0, [sp, #12]
 8001840:	9902      	ldr	r1, [sp, #8]
 8001842:	6181      	str	r1, [r0, #24]
 8001844:	2000      	movs	r0, #0
 8001846:	b004      	add	sp, #16
 8001848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800184c <.text_52>:
 800184c:	000a000f 	.word	0x000a000f

08001850 <.text_53>:
 8001850:	001c0015 	.word	0x001c0015

08001854 <.text_54>:
 8001854:	0024002a 	.word	0x0024002a

08001858 <.text_55>:
 8001858:	002e0030 	.word	0x002e0030

0800185c <D64_1CH_HTONS_VOL_HP>:
 800185c:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	468e      	mov	lr, r1
 8001864:	4604      	mov	r4, r0
 8001866:	6916      	ldr	r6, [r2, #16]
 8001868:	6957      	ldr	r7, [r2, #20]
 800186a:	6991      	ldr	r1, [r2, #24]
 800186c:	9804      	ldr	r0, [sp, #16]
 800186e:	9b04      	ldr	r3, [sp, #16]
 8001870:	9102      	str	r1, [sp, #8]
 8001872:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8001876:	69c1      	ldr	r1, [r0, #28]
 8001878:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800187c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800187e:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	2801      	cmp	r0, #1
 8001884:	f2c0 80a7 	blt.w	80019d6 <D64_1CH_HTONS_VOL_HP+0x17a>
 8001888:	9403      	str	r4, [sp, #12]
 800188a:	9201      	str	r2, [sp, #4]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	f8df c394 	ldr.w	ip, [pc, #916]	@ 8001c24 <.text_66>
 8001892:	9d03      	ldr	r5, [sp, #12]
 8001894:	3508      	adds	r5, #8
 8001896:	9503      	str	r5, [sp, #12]
 8001898:	3d08      	subs	r5, #8
 800189a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800189e:	ba54      	rev16	r4, r2
 80018a0:	f10c 0504 	add.w	r5, ip, #4
 80018a4:	ba5a      	rev16	r2, r3
 80018a6:	f004 0aff 	and.w	sl, r4, #255	@ 0xff
 80018aa:	0a24      	lsrs	r4, r4, #8
 80018ac:	f004 0bff 	and.w	fp, r4, #255	@ 0xff
 80018b0:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 80018b4:	1859      	adds	r1, r3, r1
 80018b6:	f10c 0304 	add.w	r3, ip, #4
 80018ba:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80018be:	f853 502b 	ldr.w	r5, [r3, fp, lsl #2]
 80018c2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80018c6:	f3c5 0309 	ubfx	r3, r5, #0, #10
 80018ca:	0a24      	lsrs	r4, r4, #8
 80018cc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80018d0:	f10c 0104 	add.w	r1, ip, #4
 80018d4:	f10c 0b04 	add.w	fp, ip, #4
 80018d8:	f004 0aff 	and.w	sl, r4, #255	@ 0xff
 80018dc:	0a24      	lsrs	r4, r4, #8
 80018de:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 80018e2:	eb01 2a95 	add.w	sl, r1, r5, lsr #10
 80018e6:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80018ea:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80018ee:	f3ca 0509 	ubfx	r5, sl, #0, #10
 80018f2:	f3c1 0409 	ubfx	r4, r1, #0, #10
 80018f6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80018fa:	f10c 0504 	add.w	r5, ip, #4
 80018fe:	f002 0aff 	and.w	sl, r2, #255	@ 0xff
 8001902:	0a12      	lsrs	r2, r2, #8
 8001904:	f855 502a 	ldr.w	r5, [r5, sl, lsl #2]
 8001908:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800190c:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
 8001910:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8001914:	f3c5 0a09 	ubfx	sl, r5, #0, #10
 8001918:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800191c:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001920:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8001924:	0a12      	lsrs	r2, r2, #8
 8001926:	f10c 0a04 	add.w	sl, ip, #4
 800192a:	f002 0bff 	and.w	fp, r2, #255	@ 0xff
 800192e:	0a12      	lsrs	r2, r2, #8
 8001930:	f85a b02b 	ldr.w	fp, [sl, fp, lsl #2]
 8001934:	eb0b 2b91 	add.w	fp, fp, r1, lsr #10
 8001938:	f10c 0104 	add.w	r1, ip, #4
 800193c:	f3cb 0a09 	ubfx	sl, fp, #0, #10
 8001940:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001944:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8001948:	f3c1 0209 	ubfx	r2, r1, #0, #10
 800194c:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001950:	f8df a614 	ldr.w	sl, [pc, #1556]	@ 8001f68 <.text_93>
 8001954:	f8df b600 	ldr.w	fp, [pc, #1536]	@ 8001f58 <.text_89>
 8001958:	fb23 880a 	smlad	r8, r3, sl, r8
 800195c:	fb24 880b 	smlad	r8, r4, fp, r8
 8001960:	f8df a5e4 	ldr.w	sl, [pc, #1508]	@ 8001f48 <.text_85>
 8001964:	fb25 880a 	smlad	r8, r5, sl, r8
 8001968:	f44f 3b80 	mov.w	fp, #65536	@ 0x10000
 800196c:	fb22 8a0b 	smlad	sl, r2, fp, r8
 8001970:	f8df 85f8 	ldr.w	r8, [pc, #1528]	@ 8001f6c <.text_94>
 8001974:	f8df b5f8 	ldr.w	fp, [pc, #1528]	@ 8001f70 <.text_95>
 8001978:	fb23 9808 	smlad	r8, r3, r8, r9
 800197c:	f8df 95ec 	ldr.w	r9, [pc, #1516]	@ 8001f6c <.text_94>
 8001980:	fb22 8819 	smladx	r8, r2, r9, r8
 8001984:	fb24 880b 	smlad	r8, r4, fp, r8
 8001988:	fb25 881b 	smladx	r8, r5, fp, r8
 800198c:	f04f 0b01 	mov.w	fp, #1
 8001990:	fb23 f30b 	smuad	r3, r3, fp
 8001994:	f8df 95bc 	ldr.w	r9, [pc, #1468]	@ 8001f54 <.text_88>
 8001998:	fb24 3309 	smlad	r3, r4, r9, r3
 800199c:	f8df 45c4 	ldr.w	r4, [pc, #1476]	@ 8001f64 <.text_92>
 80019a0:	f8df 95d0 	ldr.w	r9, [pc, #1488]	@ 8001f74 <.text_96>
 80019a4:	fb25 3304 	smlad	r3, r5, r4, r3
 80019a8:	fb22 3909 	smlad	r9, r2, r9, r3
 80019ac:	f5aa 3300 	sub.w	r3, sl, #131072	@ 0x20000
 80019b0:	9a00      	ldr	r2, [sp, #0]
 80019b2:	441e      	add	r6, r3
 80019b4:	1bf6      	subs	r6, r6, r7
 80019b6:	fb56 f612 	smmulr	r6, r6, r2
 80019ba:	0076      	lsls	r6, r6, #1
 80019bc:	461f      	mov	r7, r3
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	02b3      	lsls	r3, r6, #10
 80019c2:	0a89      	lsrs	r1, r1, #10
 80019c4:	fb53 f212 	smmulr	r2, r3, r2
 80019c8:	f322 028f 	ssat	r2, #16, r2, asr #2
 80019cc:	1e40      	subs	r0, r0, #1
 80019ce:	f82e 2b02 	strh.w	r2, [lr], #2
 80019d2:	f47f af5e 	bne.w	8001892 <D64_1CH_HTONS_VOL_HP+0x36>
 80019d6:	9804      	ldr	r0, [sp, #16]
 80019d8:	f8c0 9008 	str.w	r9, [r0, #8]
 80019dc:	9a04      	ldr	r2, [sp, #16]
 80019de:	f8c2 800c 	str.w	r8, [r2, #12]
 80019e2:	9804      	ldr	r0, [sp, #16]
 80019e4:	61c1      	str	r1, [r0, #28]
 80019e6:	9904      	ldr	r1, [sp, #16]
 80019e8:	610e      	str	r6, [r1, #16]
 80019ea:	9804      	ldr	r0, [sp, #16]
 80019ec:	6147      	str	r7, [r0, #20]
 80019ee:	9804      	ldr	r0, [sp, #16]
 80019f0:	9902      	ldr	r1, [sp, #8]
 80019f2:	6181      	str	r1, [r0, #24]
 80019f4:	2000      	movs	r0, #0
 80019f6:	b005      	add	sp, #20
 80019f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019fc <.text_57>:
 80019fc:	0015001c 	.word	0x0015001c

08001a00 <.text_58>:
 8001a00:	20000004 	.word	0x20000004

08001a04 <.text_59>:
 8001a04:	002d0024 	.word	0x002d0024

08001a08 <D80_1CH_HTONS_VOL_HP>:
 8001a08:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a0c:	4683      	mov	fp, r0
 8001a0e:	4610      	mov	r0, r2
 8001a10:	b085      	sub	sp, #20
 8001a12:	6902      	ldr	r2, [r0, #16]
 8001a14:	6943      	ldr	r3, [r0, #20]
 8001a16:	6984      	ldr	r4, [r0, #24]
 8001a18:	9805      	ldr	r0, [sp, #20]
 8001a1a:	9f05      	ldr	r7, [sp, #20]
 8001a1c:	9404      	str	r4, [sp, #16]
 8001a1e:	69c5      	ldr	r5, [r0, #28]
 8001a20:	6884      	ldr	r4, [r0, #8]
 8001a22:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8001a26:	8cfe      	ldrh	r6, [r7, #38]	@ 0x26
 8001a28:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001a2a:	6a3f      	ldr	r7, [r7, #32]
 8001a2c:	2e01      	cmp	r6, #1
 8001a2e:	f2c0 80dd 	blt.w	8001bec <D80_1CH_HTONS_VOL_HP+0x1e4>
 8001a32:	9003      	str	r0, [sp, #12]
 8001a34:	468c      	mov	ip, r1
 8001a36:	497b      	ldr	r1, [pc, #492]	@ (8001c24 <.text_66>)
 8001a38:	9702      	str	r7, [sp, #8]
 8001a3a:	f8cd c004 	str.w	ip, [sp, #4]
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f101 0c04 	add.w	ip, r1, #4
 8001a44:	f8db 7000 	ldr.w	r7, [fp]
 8001a48:	f8db 6004 	ldr.w	r6, [fp, #4]
 8001a4c:	f8db 8008 	ldr.w	r8, [fp, #8]
 8001a50:	fa97 fe97 	rev16.w	lr, r7
 8001a54:	fa98 f798 	rev16.w	r7, r8
 8001a58:	fa96 f996 	rev16.w	r9, r6
 8001a5c:	f00e 08ff 	and.w	r8, lr, #255	@ 0xff
 8001a60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001a64:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 8001a68:	f00e 08ff 	and.w	r8, lr, #255	@ 0xff
 8001a6c:	1975      	adds	r5, r6, r5
 8001a6e:	1d0e      	adds	r6, r1, #4
 8001a70:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8001a74:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8001a78:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8001a7c:	f3c8 0509 	ubfx	r5, r8, #0, #10
 8001a80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001a84:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8001a88:	f00e 05ff 	and.w	r5, lr, #255	@ 0xff
 8001a8c:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8001a90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8001a94:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8001a98:	f101 0804 	add.w	r8, r1, #4
 8001a9c:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001aa0:	f858 802e 	ldr.w	r8, [r8, lr, lsl #2]
 8001aa4:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 8001aa8:	f3c8 0609 	ubfx	r6, r8, #0, #10
 8001aac:	ea46 4e05 	orr.w	lr, r6, r5, lsl #16
 8001ab0:	1d0e      	adds	r6, r1, #4
 8001ab2:	f009 05ff 	and.w	r5, r9, #255	@ 0xff
 8001ab6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8001aba:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8001abe:	9500      	str	r5, [sp, #0]
 8001ac0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8001ac4:	f3c5 0809 	ubfx	r8, r5, #0, #10
 8001ac8:	f009 05ff 	and.w	r5, r9, #255	@ 0xff
 8001acc:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8001ad0:	9e00      	ldr	r6, [sp, #0]
 8001ad2:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8001ad6:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8001ada:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8001ade:	9500      	str	r5, [sp, #0]
 8001ae0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8001ae4:	1d0e      	adds	r6, r1, #4
 8001ae6:	f009 05ff 	and.w	r5, r9, #255	@ 0xff
 8001aea:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8001aee:	9d00      	ldr	r5, [sp, #0]
 8001af0:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8001af4:	9600      	str	r6, [sp, #0]
 8001af6:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001afa:	1d0e      	adds	r6, r1, #4
 8001afc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8001b00:	f856 6029 	ldr.w	r6, [r6, r9, lsl #2]
 8001b04:	f8dd 9000 	ldr.w	r9, [sp]
 8001b08:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8001b0c:	9600      	str	r6, [sp, #0]
 8001b0e:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8001b12:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
 8001b16:	1d0e      	adds	r6, r1, #4
 8001b18:	f007 05ff 	and.w	r5, r7, #255	@ 0xff
 8001b1c:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8001b20:	9d00      	ldr	r5, [sp, #0]
 8001b22:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8001b26:	9600      	str	r6, [sp, #0]
 8001b28:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001b2c:	1d0e      	adds	r6, r1, #4
 8001b2e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8001b32:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
 8001b36:	9f00      	ldr	r7, [sp, #0]
 8001b38:	eb06 2697 	add.w	r6, r6, r7, lsr #10
 8001b3c:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8001b40:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001b44:	0ab5      	lsrs	r5, r6, #10
 8001b46:	f8df 6430 	ldr.w	r6, [pc, #1072]	@ 8001f78 <.text_97>
 8001b4a:	fb2c aa06 	smlad	sl, ip, r6, sl
 8001b4e:	f8df 6418 	ldr.w	r6, [pc, #1048]	@ 8001f68 <.text_93>
 8001b52:	fb2e aa06 	smlad	sl, lr, r6, sl
 8001b56:	f8df 6400 	ldr.w	r6, [pc, #1024]	@ 8001f58 <.text_89>
 8001b5a:	fb28 aa06 	smlad	sl, r8, r6, sl
 8001b5e:	f8df 63e8 	ldr.w	r6, [pc, #1000]	@ 8001f48 <.text_85>
 8001b62:	fb29 aa06 	smlad	sl, r9, r6, sl
 8001b66:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8001b6a:	fb27 a606 	smlad	r6, r7, r6, sl
 8001b6e:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 8001c10 <.text_61>
 8001b72:	fb2c 440a 	smlad	r4, ip, sl, r4
 8001b76:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8001c14 <.text_62>
 8001b7a:	fb2e 440a 	smlad	r4, lr, sl, r4
 8001b7e:	f04f 1a4b 	mov.w	sl, #4915275	@ 0x4b004b
 8001b82:	fb28 440a 	smlad	r4, r8, sl, r4
 8001b86:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8001c18 <.text_63>
 8001b8a:	fb29 440a 	smlad	r4, r9, sl, r4
 8001b8e:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 8001c1c <.text_64>
 8001b92:	fb27 4a0a 	smlad	sl, r7, sl, r4
 8001b96:	2401      	movs	r4, #1
 8001b98:	fb2c fc04 	smuad	ip, ip, r4
 8001b9c:	4ced      	ldr	r4, [pc, #948]	@ (8001f54 <.text_88>)
 8001b9e:	fb2e c404 	smlad	r4, lr, r4, ip
 8001ba2:	f8df c3c0 	ldr.w	ip, [pc, #960]	@ 8001f64 <.text_92>
 8001ba6:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8001c34 <.text_70>
 8001baa:	fb28 440c 	smlad	r4, r8, ip, r4
 8001bae:	fb29 440e 	smlad	r4, r9, lr, r4
 8001bb2:	f8df c3c8 	ldr.w	ip, [pc, #968]	@ 8001f7c <.text_98>
 8001bb6:	fb27 440c 	smlad	r4, r7, ip, r4
 8001bba:	f5a6 367a 	sub.w	r6, r6, #256000	@ 0x3e800
 8001bbe:	9f02      	ldr	r7, [sp, #8]
 8001bc0:	18b2      	adds	r2, r6, r2
 8001bc2:	1ad2      	subs	r2, r2, r3
 8001bc4:	fb52 f217 	smmulr	r2, r2, r7
 8001bc8:	0052      	lsls	r2, r2, #1
 8001bca:	4633      	mov	r3, r6
 8001bcc:	9f03      	ldr	r7, [sp, #12]
 8001bce:	0256      	lsls	r6, r2, #9
 8001bd0:	fb56 f717 	smmulr	r7, r6, r7
 8001bd4:	9e01      	ldr	r6, [sp, #4]
 8001bd6:	1cb6      	adds	r6, r6, #2
 8001bd8:	9601      	str	r6, [sp, #4]
 8001bda:	f327 078f 	ssat	r7, #16, r7, asr #2
 8001bde:	1e40      	subs	r0, r0, #1
 8001be0:	f10b 0b0a 	add.w	fp, fp, #10
 8001be4:	f826 7d02 	strh.w	r7, [r6, #-2]!
 8001be8:	f47f af2a 	bne.w	8001a40 <D80_1CH_HTONS_VOL_HP+0x38>
 8001bec:	9805      	ldr	r0, [sp, #20]
 8001bee:	6084      	str	r4, [r0, #8]
 8001bf0:	9905      	ldr	r1, [sp, #20]
 8001bf2:	f8c1 a00c 	str.w	sl, [r1, #12]
 8001bf6:	9805      	ldr	r0, [sp, #20]
 8001bf8:	61c5      	str	r5, [r0, #28]
 8001bfa:	9905      	ldr	r1, [sp, #20]
 8001bfc:	610a      	str	r2, [r1, #16]
 8001bfe:	9805      	ldr	r0, [sp, #20]
 8001c00:	6143      	str	r3, [r0, #20]
 8001c02:	9805      	ldr	r0, [sp, #20]
 8001c04:	9904      	ldr	r1, [sp, #16]
 8001c06:	6181      	str	r1, [r0, #24]
 8001c08:	2000      	movs	r0, #0
 8001c0a:	b006      	add	sp, #24
 8001c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c10 <.text_61>:
 8001c10:	0037003f 	.word	0x0037003f

08001c14 <.text_62>:
 8001c14:	00450049 	.word	0x00450049

08001c18 <.text_63>:
 8001c18:	00490045 	.word	0x00490045

08001c1c <.text_64>:
 8001c1c:	003f0037 	.word	0x003f0037

08001c20 <.text_65>:
 8001c20:	0024002d 	.word	0x0024002d

08001c24 <.text_66>:
 8001c24:	20000000 	.word	0x20000000

08001c28 <.text_67>:
 8001c28:	00780069 	.word	0x00780069

08001c2c <.text_68>:
 8001c2c:	005b004e 	.word	0x005b004e

08001c30 <.text_69>:
 8001c30:	00420037 	.word	0x00420037

08001c34 <.text_70>:
 8001c34:	0015001c 	.word	0x0015001c

08001c38 <D128_1CH_HTONS_VOL_HP>:
 8001c38:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c3c:	4605      	mov	r5, r0
 8001c3e:	b088      	sub	sp, #32
 8001c40:	9808      	ldr	r0, [sp, #32]
 8001c42:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8001c46:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8001c4a:	6992      	ldr	r2, [r2, #24]
 8001c4c:	9b08      	ldr	r3, [sp, #32]
 8001c4e:	9207      	str	r2, [sp, #28]
 8001c50:	460c      	mov	r4, r1
 8001c52:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001c56:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001c5a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8001c5c:	9908      	ldr	r1, [sp, #32]
 8001c5e:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8001c60:	69c9      	ldr	r1, [r1, #28]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	2801      	cmp	r0, #1
 8001c66:	f2c0 813f 	blt.w	8001ee8 <D128_1CH_HTONS_VOL_HP+0x2b0>
 8001c6a:	9503      	str	r5, [sp, #12]
 8001c6c:	9206      	str	r2, [sp, #24]
 8001c6e:	9305      	str	r3, [sp, #20]
 8001c70:	9404      	str	r4, [sp, #16]
 8001c72:	4ec3      	ldr	r6, [pc, #780]	@ (8001f80 <.text_99>)
 8001c74:	9c03      	ldr	r4, [sp, #12]
 8001c76:	3408      	adds	r4, #8
 8001c78:	9403      	str	r4, [sp, #12]
 8001c7a:	3c08      	subs	r4, #8
 8001c7c:	9d03      	ldr	r5, [sp, #12]
 8001c7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001c82:	3508      	adds	r5, #8
 8001c84:	9503      	str	r5, [sp, #12]
 8001c86:	3d08      	subs	r5, #8
 8001c88:	e9d5 4700 	ldrd	r4, r7, [r5]
 8001c8c:	ba55      	rev16	r5, r2
 8001c8e:	ba5a      	rev16	r2, r3
 8001c90:	ba63      	rev16	r3, r4
 8001c92:	ba7c      	rev16	r4, r7
 8001c94:	1d37      	adds	r7, r6, #4
 8001c96:	f005 0bff 	and.w	fp, r5, #255	@ 0xff
 8001c9a:	f857 902b 	ldr.w	r9, [r7, fp, lsl #2]
 8001c9e:	0a2d      	lsrs	r5, r5, #8
 8001ca0:	f005 0bff 	and.w	fp, r5, #255	@ 0xff
 8001ca4:	4449      	add	r1, r9
 8001ca6:	f857 702b 	ldr.w	r7, [r7, fp, lsl #2]
 8001caa:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8001cae:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8001cb2:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8001cb6:	0a2d      	lsrs	r5, r5, #8
 8001cb8:	ea47 4909 	orr.w	r9, r7, r9, lsl #16
 8001cbc:	f106 0b04 	add.w	fp, r6, #4
 8001cc0:	f005 07ff 	and.w	r7, r5, #255	@ 0xff
 8001cc4:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 8001cc8:	0a2d      	lsrs	r5, r5, #8
 8001cca:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
 8001cce:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8001cd2:	f3c7 0109 	ubfx	r1, r7, #0, #10
 8001cd6:	eb05 2597 	add.w	r5, r5, r7, lsr #10
 8001cda:	f3c5 0709 	ubfx	r7, r5, #0, #10
 8001cde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001ce2:	9702      	str	r7, [sp, #8]
 8001ce4:	f002 0bff 	and.w	fp, r2, #255	@ 0xff
 8001ce8:	1d37      	adds	r7, r6, #4
 8001cea:	0a12      	lsrs	r2, r2, #8
 8001cec:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 8001cf0:	f106 0b04 	add.w	fp, r6, #4
 8001cf4:	f002 07ff 	and.w	r7, r2, #255	@ 0xff
 8001cf8:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 8001cfc:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8001d00:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001d04:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8001d08:	f3c7 0109 	ubfx	r1, r7, #0, #10
 8001d0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001d10:	0a12      	lsrs	r2, r2, #8
 8001d12:	9101      	str	r1, [sp, #4]
 8001d14:	1d35      	adds	r5, r6, #4
 8001d16:	f002 0bff 	and.w	fp, r2, #255	@ 0xff
 8001d1a:	0a12      	lsrs	r2, r2, #8
 8001d1c:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 8001d20:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8001d24:	1d37      	adds	r7, r6, #4
 8001d26:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001d2a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8001d2e:	eb02 2291 	add.w	r2, r2, r1, lsr #10
 8001d32:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8001d36:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001d3a:	9700      	str	r7, [sp, #0]
 8001d3c:	1d35      	adds	r5, r6, #4
 8001d3e:	f003 07ff 	and.w	r7, r3, #255	@ 0xff
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 0bff 	and.w	fp, r3, #255	@ 0xff
 8001d48:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8001d4c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8001d50:	1d32      	adds	r2, r6, #4
 8001d52:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8001d56:	f852 102b 	ldr.w	r1, [r2, fp, lsl #2]
 8001d5a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8001d5e:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8001d62:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	1d35      	adds	r5, r6, #4
 8001d6a:	f106 0b04 	add.w	fp, r6, #4
 8001d6e:	f003 07ff 	and.w	r7, r3, #255	@ 0xff
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8001d78:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8001d7c:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
 8001d80:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8001d84:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8001d88:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8001d8c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001d90:	1d35      	adds	r5, r6, #4
 8001d92:	f004 07ff 	and.w	r7, r4, #255	@ 0xff
 8001d96:	0a24      	lsrs	r4, r4, #8
 8001d98:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8001d9c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8001da0:	f004 01ff 	and.w	r1, r4, #255	@ 0xff
 8001da4:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8001da8:	f3c5 0709 	ubfx	r7, r5, #0, #10
 8001dac:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8001db0:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8001db4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8001db8:	0a24      	lsrs	r4, r4, #8
 8001dba:	1d37      	adds	r7, r6, #4
 8001dbc:	f004 0bff 	and.w	fp, r4, #255	@ 0xff
 8001dc0:	0a24      	lsrs	r4, r4, #8
 8001dc2:	f857 702b 	ldr.w	r7, [r7, fp, lsl #2]
 8001dc6:	eb07 2b91 	add.w	fp, r7, r1, lsr #10
 8001dca:	1d31      	adds	r1, r6, #4
 8001dcc:	f3cb 0709 	ubfx	r7, fp, #0, #10
 8001dd0:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8001dd4:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8001dd8:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8001ddc:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8001de0:	4f68      	ldr	r7, [pc, #416]	@ (8001f84 <.text_100>)
 8001de2:	f8df b1a4 	ldr.w	fp, [pc, #420]	@ 8001f88 <.text_101>
 8001de6:	fb29 8807 	smlad	r8, r9, r7, r8
 8001dea:	9f02      	ldr	r7, [sp, #8]
 8001dec:	fb27 880b 	smlad	r8, r7, fp, r8
 8001df0:	9f01      	ldr	r7, [sp, #4]
 8001df2:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8001f8c <.text_102>
 8001df6:	fb27 880b 	smlad	r8, r7, fp, r8
 8001dfa:	9f00      	ldr	r7, [sp, #0]
 8001dfc:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8001f78 <.text_97>
 8001e00:	fb27 880b 	smlad	r8, r7, fp, r8
 8001e04:	4f58      	ldr	r7, [pc, #352]	@ (8001f68 <.text_93>)
 8001e06:	fb22 8807 	smlad	r8, r2, r7, r8
 8001e0a:	4f53      	ldr	r7, [pc, #332]	@ (8001f58 <.text_89>)
 8001e0c:	fb23 8807 	smlad	r8, r3, r7, r8
 8001e10:	4f4d      	ldr	r7, [pc, #308]	@ (8001f48 <.text_85>)
 8001e12:	0a89      	lsrs	r1, r1, #10
 8001e14:	fb25 8807 	smlad	r8, r5, r7, r8
 8001e18:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8001e1c:	fb24 8707 	smlad	r7, r4, r7, r8
 8001e20:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8001f14 <.text_72>
 8001e24:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8001f18 <.text_73>
 8001e28:	fb29 ee08 	smlad	lr, r9, r8, lr
 8001e2c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8001e30:	fb28 ee0b 	smlad	lr, r8, fp, lr
 8001e34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001e38:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8001f1c <.text_74>
 8001e3c:	fb28 ee0b 	smlad	lr, r8, fp, lr
 8001e40:	f8dd 8000 	ldr.w	r8, [sp]
 8001e44:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8001f20 <.text_75>
 8001e48:	fb28 ee0b 	smlad	lr, r8, fp, lr
 8001e4c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8001f24 <.text_76>
 8001e50:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001f28 <.text_77>
 8001e54:	fb22 ee0b 	smlad	lr, r2, fp, lr
 8001e58:	fb23 ee08 	smlad	lr, r3, r8, lr
 8001e5c:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8001f2c <.text_78>
 8001e60:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8001f30 <.text_79>
 8001e64:	fb25 ee0b 	smlad	lr, r5, fp, lr
 8001e68:	fb24 e808 	smlad	r8, r4, r8, lr
 8001e6c:	f04f 0e01 	mov.w	lr, #1
 8001e70:	fb29 f90e 	smuad	r9, r9, lr
 8001e74:	f8dd e008 	ldr.w	lr, [sp, #8]
 8001e78:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8001f54 <.text_88>
 8001e7c:	fb2e 990b 	smlad	r9, lr, fp, r9
 8001e80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001e84:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8001f64 <.text_92>
 8001e88:	fb2e 990b 	smlad	r9, lr, fp, r9
 8001e8c:	f8dd e000 	ldr.w	lr, [sp]
 8001e90:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8001f74 <.text_96>
 8001e94:	fb2e 990b 	smlad	r9, lr, fp, r9
 8001e98:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8001f7c <.text_98>
 8001e9c:	fb22 920b 	smlad	r2, r2, fp, r9
 8001ea0:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001f34 <.text_80>
 8001ea4:	fb23 2209 	smlad	r2, r3, r9, r2
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <.text_81>)
 8001eaa:	fb25 2203 	smlad	r2, r5, r3, r2
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <.text_82>)
 8001eb0:	fb24 2e03 	smlad	lr, r4, r3, r2
 8001eb4:	f5a7 1780 	sub.w	r7, r7, #1048576	@ 0x100000
 8001eb8:	9a05      	ldr	r2, [sp, #20]
 8001eba:	44ba      	add	sl, r7
 8001ebc:	ebaa 0a0c 	sub.w	sl, sl, ip
 8001ec0:	fb5a fa12 	smmulr	sl, sl, r2
 8001ec4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001ec8:	9a06      	ldr	r2, [sp, #24]
 8001eca:	ea4f 13ca 	mov.w	r3, sl, lsl #7
 8001ece:	fb53 f212 	smmulr	r2, r3, r2
 8001ed2:	9b04      	ldr	r3, [sp, #16]
 8001ed4:	1c9b      	adds	r3, r3, #2
 8001ed6:	9304      	str	r3, [sp, #16]
 8001ed8:	f322 028f 	ssat	r2, #16, r2, asr #2
 8001edc:	1e40      	subs	r0, r0, #1
 8001ede:	46bc      	mov	ip, r7
 8001ee0:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8001ee4:	f47f aec6 	bne.w	8001c74 <D128_1CH_HTONS_VOL_HP+0x3c>
 8001ee8:	9808      	ldr	r0, [sp, #32]
 8001eea:	f8c0 e008 	str.w	lr, [r0, #8]
 8001eee:	9a08      	ldr	r2, [sp, #32]
 8001ef0:	f8c2 800c 	str.w	r8, [r2, #12]
 8001ef4:	9808      	ldr	r0, [sp, #32]
 8001ef6:	61c1      	str	r1, [r0, #28]
 8001ef8:	9908      	ldr	r1, [sp, #32]
 8001efa:	f8c1 a010 	str.w	sl, [r1, #16]
 8001efe:	9808      	ldr	r0, [sp, #32]
 8001f00:	f8c0 c014 	str.w	ip, [r0, #20]
 8001f04:	9808      	ldr	r0, [sp, #32]
 8001f06:	9907      	ldr	r1, [sp, #28]
 8001f08:	6181      	str	r1, [r0, #24]
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	b009      	add	sp, #36	@ 0x24
 8001f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001f14 <.text_72>:
 8001f14:	00880096 	.word	0x00880096

08001f18 <.text_73>:
 8001f18:	00a200ac 	.word	0x00a200ac

08001f1c <.text_74>:
 8001f1c:	00b400ba 	.word	0x00b400ba

08001f20 <.text_75>:
 8001f20:	00be00c0 	.word	0x00be00c0

08001f24 <.text_76>:
 8001f24:	00c000be 	.word	0x00c000be

08001f28 <.text_77>:
 8001f28:	00ba00b4 	.word	0x00ba00b4

08001f2c <.text_78>:
 8001f2c:	00ac00a2 	.word	0x00ac00a2

08001f30 <.text_79>:
 8001f30:	00960088 	.word	0x00960088

08001f34 <.text_80>:
 8001f34:	00370042 	.word	0x00370042

08001f38 <.text_81>:
 8001f38:	004e005b 	.word	0x004e005b

08001f3c <.text_82>:
 8001f3c:	00690078 	.word	0x00690078

08001f40 <.text_83>:
 8001f40:	00010003 	.word	0x00010003

08001f44 <.text_84>:
 8001f44:	00030001 	.word	0x00030001

08001f48 <.text_85>:
 8001f48:	00060003 	.word	0x00060003

08001f4c <.text_86>:
 8001f4c:	000a000c 	.word	0x000a000c

08001f50 <.text_87>:
 8001f50:	000c000a 	.word	0x000c000a

08001f54 <.text_88>:
 8001f54:	00030006 	.word	0x00030006

08001f58 <.text_89>:
 8001f58:	000f000a 	.word	0x000f000a

08001f5c <.text_90>:
 8001f5c:	00150019 	.word	0x00150019

08001f60 <.text_91>:
 8001f60:	00190015 	.word	0x00190015

08001f64 <.text_92>:
 8001f64:	000a000f 	.word	0x000a000f

08001f68 <.text_93>:
 8001f68:	001c0015 	.word	0x001c0015

08001f6c <.text_94>:
 8001f6c:	0024002a 	.word	0x0024002a

08001f70 <.text_95>:
 8001f70:	002e0030 	.word	0x002e0030

08001f74 <.text_96>:
 8001f74:	0015001c 	.word	0x0015001c

08001f78 <.text_97>:
 8001f78:	002d0024 	.word	0x002d0024

08001f7c <.text_98>:
 8001f7c:	0024002d 	.word	0x0024002d

08001f80 <.text_99>:
 8001f80:	20000000 	.word	0x20000000

08001f84 <.text_100>:
 8001f84:	00780069 	.word	0x00780069

08001f88 <.text_101>:
 8001f88:	005b004e 	.word	0x005b004e

08001f8c <.text_102>:
 8001f8c:	00420037 	.word	0x00420037

08001f90 <strlen>:
 8001f90:	4603      	mov	r3, r0
 8001f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d1fb      	bne.n	8001f92 <strlen+0x2>
 8001f9a:	1a18      	subs	r0, r3, r0
 8001f9c:	3801      	subs	r0, #1
 8001f9e:	4770      	bx	lr

08001fa0 <__aeabi_memset>:
 8001fa0:	b470      	push	{r4, r5, r6}
 8001fa2:	0784      	lsls	r4, r0, #30
 8001fa4:	d046      	beq.n	8002034 <__aeabi_memset+0x94>
 8001fa6:	1e4c      	subs	r4, r1, #1
 8001fa8:	2900      	cmp	r1, #0
 8001faa:	d041      	beq.n	8002030 <__aeabi_memset+0x90>
 8001fac:	b2d5      	uxtb	r5, r2
 8001fae:	4603      	mov	r3, r0
 8001fb0:	e002      	b.n	8001fb8 <__aeabi_memset+0x18>
 8001fb2:	1e61      	subs	r1, r4, #1
 8001fb4:	b3e4      	cbz	r4, 8002030 <__aeabi_memset+0x90>
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	f803 5b01 	strb.w	r5, [r3], #1
 8001fbc:	0799      	lsls	r1, r3, #30
 8001fbe:	d1f8      	bne.n	8001fb2 <__aeabi_memset+0x12>
 8001fc0:	2c03      	cmp	r4, #3
 8001fc2:	d92e      	bls.n	8002022 <__aeabi_memset+0x82>
 8001fc4:	b2d5      	uxtb	r5, r2
 8001fc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001fca:	2c0f      	cmp	r4, #15
 8001fcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001fd0:	d919      	bls.n	8002006 <__aeabi_memset+0x66>
 8001fd2:	4626      	mov	r6, r4
 8001fd4:	f103 0110 	add.w	r1, r3, #16
 8001fd8:	3e10      	subs	r6, #16
 8001fda:	2e0f      	cmp	r6, #15
 8001fdc:	f841 5c10 	str.w	r5, [r1, #-16]
 8001fe0:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001fe4:	f841 5c08 	str.w	r5, [r1, #-8]
 8001fe8:	f841 5c04 	str.w	r5, [r1, #-4]
 8001fec:	f101 0110 	add.w	r1, r1, #16
 8001ff0:	d8f2      	bhi.n	8001fd8 <__aeabi_memset+0x38>
 8001ff2:	f1a4 0110 	sub.w	r1, r4, #16
 8001ff6:	f021 010f 	bic.w	r1, r1, #15
 8001ffa:	f004 040f 	and.w	r4, r4, #15
 8001ffe:	3110      	adds	r1, #16
 8002000:	2c03      	cmp	r4, #3
 8002002:	440b      	add	r3, r1
 8002004:	d90d      	bls.n	8002022 <__aeabi_memset+0x82>
 8002006:	461e      	mov	r6, r3
 8002008:	4621      	mov	r1, r4
 800200a:	3904      	subs	r1, #4
 800200c:	2903      	cmp	r1, #3
 800200e:	f846 5b04 	str.w	r5, [r6], #4
 8002012:	d8fa      	bhi.n	800200a <__aeabi_memset+0x6a>
 8002014:	1f21      	subs	r1, r4, #4
 8002016:	f021 0103 	bic.w	r1, r1, #3
 800201a:	3104      	adds	r1, #4
 800201c:	440b      	add	r3, r1
 800201e:	f004 0403 	and.w	r4, r4, #3
 8002022:	b12c      	cbz	r4, 8002030 <__aeabi_memset+0x90>
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	441c      	add	r4, r3
 8002028:	f803 2b01 	strb.w	r2, [r3], #1
 800202c:	42a3      	cmp	r3, r4
 800202e:	d1fb      	bne.n	8002028 <__aeabi_memset+0x88>
 8002030:	bc70      	pop	{r4, r5, r6}
 8002032:	4770      	bx	lr
 8002034:	460c      	mov	r4, r1
 8002036:	4603      	mov	r3, r0
 8002038:	e7c2      	b.n	8001fc0 <__aeabi_memset+0x20>
 800203a:	0000      	movs	r0, r0
 800203c:	0000      	movs	r0, r0
	...

08002040 <memchr>:
 8002040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002044:	2a10      	cmp	r2, #16
 8002046:	db2b      	blt.n	80020a0 <memchr+0x60>
 8002048:	f010 0f07 	tst.w	r0, #7
 800204c:	d008      	beq.n	8002060 <memchr+0x20>
 800204e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002052:	3a01      	subs	r2, #1
 8002054:	428b      	cmp	r3, r1
 8002056:	d02d      	beq.n	80020b4 <memchr+0x74>
 8002058:	f010 0f07 	tst.w	r0, #7
 800205c:	b342      	cbz	r2, 80020b0 <memchr+0x70>
 800205e:	d1f6      	bne.n	800204e <memchr+0xe>
 8002060:	b4f0      	push	{r4, r5, r6, r7}
 8002062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800206a:	f022 0407 	bic.w	r4, r2, #7
 800206e:	f07f 0700 	mvns.w	r7, #0
 8002072:	2300      	movs	r3, #0
 8002074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002078:	3c08      	subs	r4, #8
 800207a:	ea85 0501 	eor.w	r5, r5, r1
 800207e:	ea86 0601 	eor.w	r6, r6, r1
 8002082:	fa85 f547 	uadd8	r5, r5, r7
 8002086:	faa3 f587 	sel	r5, r3, r7
 800208a:	fa86 f647 	uadd8	r6, r6, r7
 800208e:	faa5 f687 	sel	r6, r5, r7
 8002092:	b98e      	cbnz	r6, 80020b8 <memchr+0x78>
 8002094:	d1ee      	bne.n	8002074 <memchr+0x34>
 8002096:	bcf0      	pop	{r4, r5, r6, r7}
 8002098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800209c:	f002 0207 	and.w	r2, r2, #7
 80020a0:	b132      	cbz	r2, 80020b0 <memchr+0x70>
 80020a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80020a6:	3a01      	subs	r2, #1
 80020a8:	ea83 0301 	eor.w	r3, r3, r1
 80020ac:	b113      	cbz	r3, 80020b4 <memchr+0x74>
 80020ae:	d1f8      	bne.n	80020a2 <memchr+0x62>
 80020b0:	2000      	movs	r0, #0
 80020b2:	4770      	bx	lr
 80020b4:	3801      	subs	r0, #1
 80020b6:	4770      	bx	lr
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	bf06      	itte	eq
 80020bc:	4635      	moveq	r5, r6
 80020be:	3803      	subeq	r0, #3
 80020c0:	3807      	subne	r0, #7
 80020c2:	f015 0f01 	tst.w	r5, #1
 80020c6:	d107      	bne.n	80020d8 <memchr+0x98>
 80020c8:	3001      	adds	r0, #1
 80020ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80020ce:	bf02      	ittt	eq
 80020d0:	3001      	addeq	r0, #1
 80020d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80020d6:	3001      	addeq	r0, #1
 80020d8:	bcf0      	pop	{r4, r5, r6, r7}
 80020da:	3801      	subs	r0, #1
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <__aeabi_uldivmod>:
 80020e0:	b953      	cbnz	r3, 80020f8 <__aeabi_uldivmod+0x18>
 80020e2:	b94a      	cbnz	r2, 80020f8 <__aeabi_uldivmod+0x18>
 80020e4:	2900      	cmp	r1, #0
 80020e6:	bf08      	it	eq
 80020e8:	2800      	cmpeq	r0, #0
 80020ea:	bf1c      	itt	ne
 80020ec:	f04f 31ff 	movne.w	r1, #4294967295
 80020f0:	f04f 30ff 	movne.w	r0, #4294967295
 80020f4:	f000 b988 	b.w	8002408 <__aeabi_idiv0>
 80020f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80020fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002100:	f000 f806 	bl	8002110 <__udivmoddi4>
 8002104:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800210c:	b004      	add	sp, #16
 800210e:	4770      	bx	lr

08002110 <__udivmoddi4>:
 8002110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002114:	9d08      	ldr	r5, [sp, #32]
 8002116:	468e      	mov	lr, r1
 8002118:	4604      	mov	r4, r0
 800211a:	4688      	mov	r8, r1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d14a      	bne.n	80021b6 <__udivmoddi4+0xa6>
 8002120:	428a      	cmp	r2, r1
 8002122:	4617      	mov	r7, r2
 8002124:	d962      	bls.n	80021ec <__udivmoddi4+0xdc>
 8002126:	fab2 f682 	clz	r6, r2
 800212a:	b14e      	cbz	r6, 8002140 <__udivmoddi4+0x30>
 800212c:	f1c6 0320 	rsb	r3, r6, #32
 8002130:	fa01 f806 	lsl.w	r8, r1, r6
 8002134:	fa20 f303 	lsr.w	r3, r0, r3
 8002138:	40b7      	lsls	r7, r6
 800213a:	ea43 0808 	orr.w	r8, r3, r8
 800213e:	40b4      	lsls	r4, r6
 8002140:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002144:	fa1f fc87 	uxth.w	ip, r7
 8002148:	fbb8 f1fe 	udiv	r1, r8, lr
 800214c:	0c23      	lsrs	r3, r4, #16
 800214e:	fb0e 8811 	mls	r8, lr, r1, r8
 8002152:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8002156:	fb01 f20c 	mul.w	r2, r1, ip
 800215a:	429a      	cmp	r2, r3
 800215c:	d909      	bls.n	8002172 <__udivmoddi4+0x62>
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	f101 30ff 	add.w	r0, r1, #4294967295
 8002164:	f080 80ea 	bcs.w	800233c <__udivmoddi4+0x22c>
 8002168:	429a      	cmp	r2, r3
 800216a:	f240 80e7 	bls.w	800233c <__udivmoddi4+0x22c>
 800216e:	3902      	subs	r1, #2
 8002170:	443b      	add	r3, r7
 8002172:	1a9a      	subs	r2, r3, r2
 8002174:	b2a3      	uxth	r3, r4
 8002176:	fbb2 f0fe 	udiv	r0, r2, lr
 800217a:	fb0e 2210 	mls	r2, lr, r0, r2
 800217e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002182:	fb00 fc0c 	mul.w	ip, r0, ip
 8002186:	459c      	cmp	ip, r3
 8002188:	d909      	bls.n	800219e <__udivmoddi4+0x8e>
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	f100 32ff 	add.w	r2, r0, #4294967295
 8002190:	f080 80d6 	bcs.w	8002340 <__udivmoddi4+0x230>
 8002194:	459c      	cmp	ip, r3
 8002196:	f240 80d3 	bls.w	8002340 <__udivmoddi4+0x230>
 800219a:	443b      	add	r3, r7
 800219c:	3802      	subs	r0, #2
 800219e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80021a2:	eba3 030c 	sub.w	r3, r3, ip
 80021a6:	2100      	movs	r1, #0
 80021a8:	b11d      	cbz	r5, 80021b2 <__udivmoddi4+0xa2>
 80021aa:	40f3      	lsrs	r3, r6
 80021ac:	2200      	movs	r2, #0
 80021ae:	e9c5 3200 	strd	r3, r2, [r5]
 80021b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b6:	428b      	cmp	r3, r1
 80021b8:	d905      	bls.n	80021c6 <__udivmoddi4+0xb6>
 80021ba:	b10d      	cbz	r5, 80021c0 <__udivmoddi4+0xb0>
 80021bc:	e9c5 0100 	strd	r0, r1, [r5]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4608      	mov	r0, r1
 80021c4:	e7f5      	b.n	80021b2 <__udivmoddi4+0xa2>
 80021c6:	fab3 f183 	clz	r1, r3
 80021ca:	2900      	cmp	r1, #0
 80021cc:	d146      	bne.n	800225c <__udivmoddi4+0x14c>
 80021ce:	4573      	cmp	r3, lr
 80021d0:	d302      	bcc.n	80021d8 <__udivmoddi4+0xc8>
 80021d2:	4282      	cmp	r2, r0
 80021d4:	f200 8105 	bhi.w	80023e2 <__udivmoddi4+0x2d2>
 80021d8:	1a84      	subs	r4, r0, r2
 80021da:	eb6e 0203 	sbc.w	r2, lr, r3
 80021de:	2001      	movs	r0, #1
 80021e0:	4690      	mov	r8, r2
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d0e5      	beq.n	80021b2 <__udivmoddi4+0xa2>
 80021e6:	e9c5 4800 	strd	r4, r8, [r5]
 80021ea:	e7e2      	b.n	80021b2 <__udivmoddi4+0xa2>
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	f000 8090 	beq.w	8002312 <__udivmoddi4+0x202>
 80021f2:	fab2 f682 	clz	r6, r2
 80021f6:	2e00      	cmp	r6, #0
 80021f8:	f040 80a4 	bne.w	8002344 <__udivmoddi4+0x234>
 80021fc:	1a8a      	subs	r2, r1, r2
 80021fe:	0c03      	lsrs	r3, r0, #16
 8002200:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002204:	b280      	uxth	r0, r0
 8002206:	b2bc      	uxth	r4, r7
 8002208:	2101      	movs	r1, #1
 800220a:	fbb2 fcfe 	udiv	ip, r2, lr
 800220e:	fb0e 221c 	mls	r2, lr, ip, r2
 8002212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002216:	fb04 f20c 	mul.w	r2, r4, ip
 800221a:	429a      	cmp	r2, r3
 800221c:	d907      	bls.n	800222e <__udivmoddi4+0x11e>
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	f10c 38ff 	add.w	r8, ip, #4294967295
 8002224:	d202      	bcs.n	800222c <__udivmoddi4+0x11c>
 8002226:	429a      	cmp	r2, r3
 8002228:	f200 80e0 	bhi.w	80023ec <__udivmoddi4+0x2dc>
 800222c:	46c4      	mov	ip, r8
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	fbb3 f2fe 	udiv	r2, r3, lr
 8002234:	fb0e 3312 	mls	r3, lr, r2, r3
 8002238:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800223c:	fb02 f404 	mul.w	r4, r2, r4
 8002240:	429c      	cmp	r4, r3
 8002242:	d907      	bls.n	8002254 <__udivmoddi4+0x144>
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	f102 30ff 	add.w	r0, r2, #4294967295
 800224a:	d202      	bcs.n	8002252 <__udivmoddi4+0x142>
 800224c:	429c      	cmp	r4, r3
 800224e:	f200 80ca 	bhi.w	80023e6 <__udivmoddi4+0x2d6>
 8002252:	4602      	mov	r2, r0
 8002254:	1b1b      	subs	r3, r3, r4
 8002256:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800225a:	e7a5      	b.n	80021a8 <__udivmoddi4+0x98>
 800225c:	f1c1 0620 	rsb	r6, r1, #32
 8002260:	408b      	lsls	r3, r1
 8002262:	fa22 f706 	lsr.w	r7, r2, r6
 8002266:	431f      	orrs	r7, r3
 8002268:	fa0e f401 	lsl.w	r4, lr, r1
 800226c:	fa20 f306 	lsr.w	r3, r0, r6
 8002270:	fa2e fe06 	lsr.w	lr, lr, r6
 8002274:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8002278:	4323      	orrs	r3, r4
 800227a:	fa00 f801 	lsl.w	r8, r0, r1
 800227e:	fa1f fc87 	uxth.w	ip, r7
 8002282:	fbbe f0f9 	udiv	r0, lr, r9
 8002286:	0c1c      	lsrs	r4, r3, #16
 8002288:	fb09 ee10 	mls	lr, r9, r0, lr
 800228c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8002290:	fb00 fe0c 	mul.w	lr, r0, ip
 8002294:	45a6      	cmp	lr, r4
 8002296:	fa02 f201 	lsl.w	r2, r2, r1
 800229a:	d909      	bls.n	80022b0 <__udivmoddi4+0x1a0>
 800229c:	193c      	adds	r4, r7, r4
 800229e:	f100 3aff 	add.w	sl, r0, #4294967295
 80022a2:	f080 809c 	bcs.w	80023de <__udivmoddi4+0x2ce>
 80022a6:	45a6      	cmp	lr, r4
 80022a8:	f240 8099 	bls.w	80023de <__udivmoddi4+0x2ce>
 80022ac:	3802      	subs	r0, #2
 80022ae:	443c      	add	r4, r7
 80022b0:	eba4 040e 	sub.w	r4, r4, lr
 80022b4:	fa1f fe83 	uxth.w	lr, r3
 80022b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80022bc:	fb09 4413 	mls	r4, r9, r3, r4
 80022c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80022c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80022c8:	45a4      	cmp	ip, r4
 80022ca:	d908      	bls.n	80022de <__udivmoddi4+0x1ce>
 80022cc:	193c      	adds	r4, r7, r4
 80022ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80022d2:	f080 8082 	bcs.w	80023da <__udivmoddi4+0x2ca>
 80022d6:	45a4      	cmp	ip, r4
 80022d8:	d97f      	bls.n	80023da <__udivmoddi4+0x2ca>
 80022da:	3b02      	subs	r3, #2
 80022dc:	443c      	add	r4, r7
 80022de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80022e2:	eba4 040c 	sub.w	r4, r4, ip
 80022e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80022ea:	4564      	cmp	r4, ip
 80022ec:	4673      	mov	r3, lr
 80022ee:	46e1      	mov	r9, ip
 80022f0:	d362      	bcc.n	80023b8 <__udivmoddi4+0x2a8>
 80022f2:	d05f      	beq.n	80023b4 <__udivmoddi4+0x2a4>
 80022f4:	b15d      	cbz	r5, 800230e <__udivmoddi4+0x1fe>
 80022f6:	ebb8 0203 	subs.w	r2, r8, r3
 80022fa:	eb64 0409 	sbc.w	r4, r4, r9
 80022fe:	fa04 f606 	lsl.w	r6, r4, r6
 8002302:	fa22 f301 	lsr.w	r3, r2, r1
 8002306:	431e      	orrs	r6, r3
 8002308:	40cc      	lsrs	r4, r1
 800230a:	e9c5 6400 	strd	r6, r4, [r5]
 800230e:	2100      	movs	r1, #0
 8002310:	e74f      	b.n	80021b2 <__udivmoddi4+0xa2>
 8002312:	fbb1 fcf2 	udiv	ip, r1, r2
 8002316:	0c01      	lsrs	r1, r0, #16
 8002318:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800231c:	b280      	uxth	r0, r0
 800231e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8002322:	463b      	mov	r3, r7
 8002324:	4638      	mov	r0, r7
 8002326:	463c      	mov	r4, r7
 8002328:	46b8      	mov	r8, r7
 800232a:	46be      	mov	lr, r7
 800232c:	2620      	movs	r6, #32
 800232e:	fbb1 f1f7 	udiv	r1, r1, r7
 8002332:	eba2 0208 	sub.w	r2, r2, r8
 8002336:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800233a:	e766      	b.n	800220a <__udivmoddi4+0xfa>
 800233c:	4601      	mov	r1, r0
 800233e:	e718      	b.n	8002172 <__udivmoddi4+0x62>
 8002340:	4610      	mov	r0, r2
 8002342:	e72c      	b.n	800219e <__udivmoddi4+0x8e>
 8002344:	f1c6 0220 	rsb	r2, r6, #32
 8002348:	fa2e f302 	lsr.w	r3, lr, r2
 800234c:	40b7      	lsls	r7, r6
 800234e:	40b1      	lsls	r1, r6
 8002350:	fa20 f202 	lsr.w	r2, r0, r2
 8002354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002358:	430a      	orrs	r2, r1
 800235a:	fbb3 f8fe 	udiv	r8, r3, lr
 800235e:	b2bc      	uxth	r4, r7
 8002360:	fb0e 3318 	mls	r3, lr, r8, r3
 8002364:	0c11      	lsrs	r1, r2, #16
 8002366:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800236a:	fb08 f904 	mul.w	r9, r8, r4
 800236e:	40b0      	lsls	r0, r6
 8002370:	4589      	cmp	r9, r1
 8002372:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8002376:	b280      	uxth	r0, r0
 8002378:	d93e      	bls.n	80023f8 <__udivmoddi4+0x2e8>
 800237a:	1879      	adds	r1, r7, r1
 800237c:	f108 3cff 	add.w	ip, r8, #4294967295
 8002380:	d201      	bcs.n	8002386 <__udivmoddi4+0x276>
 8002382:	4589      	cmp	r9, r1
 8002384:	d81f      	bhi.n	80023c6 <__udivmoddi4+0x2b6>
 8002386:	eba1 0109 	sub.w	r1, r1, r9
 800238a:	fbb1 f9fe 	udiv	r9, r1, lr
 800238e:	fb09 f804 	mul.w	r8, r9, r4
 8002392:	fb0e 1119 	mls	r1, lr, r9, r1
 8002396:	b292      	uxth	r2, r2
 8002398:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800239c:	4542      	cmp	r2, r8
 800239e:	d229      	bcs.n	80023f4 <__udivmoddi4+0x2e4>
 80023a0:	18ba      	adds	r2, r7, r2
 80023a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80023a6:	d2c4      	bcs.n	8002332 <__udivmoddi4+0x222>
 80023a8:	4542      	cmp	r2, r8
 80023aa:	d2c2      	bcs.n	8002332 <__udivmoddi4+0x222>
 80023ac:	f1a9 0102 	sub.w	r1, r9, #2
 80023b0:	443a      	add	r2, r7
 80023b2:	e7be      	b.n	8002332 <__udivmoddi4+0x222>
 80023b4:	45f0      	cmp	r8, lr
 80023b6:	d29d      	bcs.n	80022f4 <__udivmoddi4+0x1e4>
 80023b8:	ebbe 0302 	subs.w	r3, lr, r2
 80023bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80023c0:	3801      	subs	r0, #1
 80023c2:	46e1      	mov	r9, ip
 80023c4:	e796      	b.n	80022f4 <__udivmoddi4+0x1e4>
 80023c6:	eba7 0909 	sub.w	r9, r7, r9
 80023ca:	4449      	add	r1, r9
 80023cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80023d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80023d4:	fb09 f804 	mul.w	r8, r9, r4
 80023d8:	e7db      	b.n	8002392 <__udivmoddi4+0x282>
 80023da:	4673      	mov	r3, lr
 80023dc:	e77f      	b.n	80022de <__udivmoddi4+0x1ce>
 80023de:	4650      	mov	r0, sl
 80023e0:	e766      	b.n	80022b0 <__udivmoddi4+0x1a0>
 80023e2:	4608      	mov	r0, r1
 80023e4:	e6fd      	b.n	80021e2 <__udivmoddi4+0xd2>
 80023e6:	443b      	add	r3, r7
 80023e8:	3a02      	subs	r2, #2
 80023ea:	e733      	b.n	8002254 <__udivmoddi4+0x144>
 80023ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80023f0:	443b      	add	r3, r7
 80023f2:	e71c      	b.n	800222e <__udivmoddi4+0x11e>
 80023f4:	4649      	mov	r1, r9
 80023f6:	e79c      	b.n	8002332 <__udivmoddi4+0x222>
 80023f8:	eba1 0109 	sub.w	r1, r1, r9
 80023fc:	46c4      	mov	ip, r8
 80023fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8002402:	fb09 f804 	mul.w	r8, r9, r4
 8002406:	e7c4      	b.n	8002392 <__udivmoddi4+0x282>

08002408 <__aeabi_idiv0>:
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop

0800240c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	4603      	mov	r3, r0
 8002416:	81fb      	strh	r3, [r7, #14]
 8002418:	460b      	mov	r3, r1
 800241a:	81bb      	strh	r3, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8002424:	f005 fa3e 	bl	80078a4 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2201      	movs	r2, #1
 800242e:	2102      	movs	r1, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fb01 	bl	8002a38 <CODEC_IO_Write>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4413      	add	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8002440:	89bb      	ldrh	r3, [r7, #12]
 8002442:	3b01      	subs	r3, #1
 8002444:	2b03      	cmp	r3, #3
 8002446:	d81b      	bhi.n	8002480 <cs43l22_Init+0x74>
 8002448:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <cs43l22_Init+0x44>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002461 	.word	0x08002461
 8002454:	08002469 	.word	0x08002469
 8002458:	08002471 	.word	0x08002471
 800245c:	08002479 	.word	0x08002479
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8002460:	4b5b      	ldr	r3, [pc, #364]	@ (80025d0 <cs43l22_Init+0x1c4>)
 8002462:	22fa      	movs	r2, #250	@ 0xfa
 8002464:	701a      	strb	r2, [r3, #0]
    break;
 8002466:	e00f      	b.n	8002488 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <cs43l22_Init+0x1c4>)
 800246a:	22af      	movs	r2, #175	@ 0xaf
 800246c:	701a      	strb	r2, [r3, #0]
    break;
 800246e:	e00b      	b.n	8002488 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8002470:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <cs43l22_Init+0x1c4>)
 8002472:	22aa      	movs	r2, #170	@ 0xaa
 8002474:	701a      	strb	r2, [r3, #0]
    break;
 8002476:	e007      	b.n	8002488 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8002478:	4b55      	ldr	r3, [pc, #340]	@ (80025d0 <cs43l22_Init+0x1c4>)
 800247a:	2205      	movs	r2, #5
 800247c:	701a      	strb	r2, [r3, #0]
    break;    
 800247e:	e003      	b.n	8002488 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8002480:	4b53      	ldr	r3, [pc, #332]	@ (80025d0 <cs43l22_Init+0x1c4>)
 8002482:	2205      	movs	r2, #5
 8002484:	701a      	strb	r2, [r3, #0]
    break;    
 8002486:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4a50      	ldr	r2, [pc, #320]	@ (80025d0 <cs43l22_Init+0x1c4>)
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	2104      	movs	r1, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f000 facf 	bl	8002a38 <CODEC_IO_Write>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4413      	add	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2281      	movs	r2, #129	@ 0x81
 80024aa:	2105      	movs	r1, #5
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fac3 	bl	8002a38 <CODEC_IO_Write>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, 0X07);
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2207      	movs	r2, #7
 80024c2:	2106      	movs	r1, #6
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fab7 	bl	8002a38 <CODEC_IO_Write>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80024d4:	7afa      	ldrb	r2, [r7, #11]
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f964 	bl	80027a8 <cs43l22_SetVolume>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	4413      	add	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80024e8:	89bb      	ldrh	r3, [r7, #12]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d023      	beq.n	8002536 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80024ee:	89fb      	ldrh	r3, [r7, #14]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2206      	movs	r2, #6
 80024f4:	210f      	movs	r1, #15
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fa9e 	bl	8002a38 <CODEC_IO_Write>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4413      	add	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8002506:	89fb      	ldrh	r3, [r7, #14]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2200      	movs	r2, #0
 800250c:	2124      	movs	r1, #36	@ 0x24
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fa92 	bl	8002a38 <CODEC_IO_Write>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	4413      	add	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2200      	movs	r2, #0
 8002524:	2125      	movs	r1, #37	@ 0x25
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fa86 	bl	8002a38 <CODEC_IO_Write>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2200      	movs	r2, #0
 800253c:	210a      	movs	r1, #10
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa7a 	bl	8002a38 <CODEC_IO_Write>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2204      	movs	r2, #4
 8002554:	210e      	movs	r1, #14
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa6e 	bl	8002a38 <CODEC_IO_Write>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4413      	add	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2200      	movs	r2, #0
 800256c:	2127      	movs	r1, #39	@ 0x27
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa62 	bl	8002a38 <CODEC_IO_Write>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x88);	//tava 15
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2288      	movs	r2, #136	@ 0x88
 8002584:	211f      	movs	r1, #31
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fa56 	bl	8002a38 <CODEC_IO_Write>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x00);	//tava 0x0A
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2200      	movs	r2, #0
 800259c:	211a      	movs	r1, #26
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fa4a 	bl	8002a38 <CODEC_IO_Write>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x00);	//tava 0x0A
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	211b      	movs	r1, #27
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fa3e 	bl	8002a38 <CODEC_IO_Write>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80025c6:	697b      	ldr	r3, [r7, #20]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200004b0 	.word	0x200004b0

080025d4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80025d8:	f005 f96e 	bl	80078b8 <AUDIO_IO_DeInit>
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80025ea:	f005 f95b 	bl	80078a4 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f005 f989 	bl	800790c <AUDIO_IO_Read>
 80025fa:	4603      	mov	r3, r0
 80025fc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	f023 0307 	bic.w	r3, r3, #7
 8002604:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	80fb      	strh	r3, [r7, #6]
 800261c:	4613      	mov	r3, r2
 800261e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <cs43l22_Play+0x70>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d123      	bne.n	8002674 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2206      	movs	r2, #6
 8002632:	210e      	movs	r1, #14
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f9ff 	bl	8002a38 <CODEC_IO_Write>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f919 	bl	8002880 <cs43l22_SetMute>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	229e      	movs	r2, #158	@ 0x9e
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f9ea 	bl	8002a38 <CODEC_IO_Write>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <cs43l22_Play+0x70>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000434 	.word	0x20000434

08002684 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f8f2 	bl	8002880 <cs43l22_SetMute>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2201      	movs	r2, #1
 80026aa:	2102      	movs	r1, #2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f9c3 	bl	8002a38 <CODEC_IO_Write>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80026bc:	68fb      	ldr	r3, [r7, #12]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f8ce 	bl	8002880 <cs43l22_SetMute>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	e002      	b.n	80026f8 <cs43l22_Resume+0x30>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80026fc:	d9f9      	bls.n	80026f2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4a0e      	ldr	r2, [pc, #56]	@ (800273c <cs43l22_Resume+0x74>)
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	2104      	movs	r1, #4
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f994 	bl	8002a38 <CODEC_IO_Write>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	229e      	movs	r2, #158	@ 0x9e
 8002720:	2102      	movs	r1, #2
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f988 	bl	8002a38 <CODEC_IO_Write>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200004b0 	.word	0x200004b0

08002740 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f893 	bl	8002880 <cs43l22_SetMute>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2204      	movs	r2, #4
 8002768:	210e      	movs	r1, #14
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f964 	bl	8002a38 <CODEC_IO_Write>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	229f      	movs	r2, #159	@ 0x9f
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f958 	bl	8002a38 <CODEC_IO_Write>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8002792:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <cs43l22_Stop+0x64>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
  return counter;    
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000434 	.word	0x20000434

080027a8 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	460a      	mov	r2, r1
 80027b2:	80fb      	strh	r3, [r7, #6]
 80027b4:	4613      	mov	r3, r2
 80027b6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80027bc:	797b      	ldrb	r3, [r7, #5]
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d80b      	bhi.n	80027da <cs43l22_SetVolume+0x32>
 80027c2:	797a      	ldrb	r2, [r7, #5]
 80027c4:	4613      	mov	r3, r2
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	4a25      	ldr	r2, [pc, #148]	@ (8002860 <cs43l22_SetVolume+0xb8>)
 80027cc:	fb82 1203 	smull	r1, r2, r2, r3
 80027d0:	1152      	asrs	r2, r2, #5
 80027d2:	17db      	asrs	r3, r3, #31
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	e000      	b.n	80027dc <cs43l22_SetVolume+0x34>
 80027da:	23ff      	movs	r3, #255	@ 0xff
 80027dc:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	2be6      	cmp	r3, #230	@ 0xe6
 80027e2:	d91c      	bls.n	800281e <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	b2d8      	uxtb	r0, r3
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	3319      	adds	r3, #25
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	2120      	movs	r1, #32
 80027f2:	f000 f921 	bl	8002a38 <CODEC_IO_Write>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	b2d8      	uxtb	r0, r3
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	3319      	adds	r3, #25
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	2121      	movs	r1, #33	@ 0x21
 800280e:	f000 f913 	bl	8002a38 <CODEC_IO_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e01b      	b.n	8002856 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	b2d8      	uxtb	r0, r3
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	3319      	adds	r3, #25
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	2120      	movs	r1, #32
 800282c:	f000 f904 	bl	8002a38 <CODEC_IO_Write>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2d8      	uxtb	r0, r3
 800283e:	7afb      	ldrb	r3, [r7, #11]
 8002840:	3319      	adds	r3, #25
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	2121      	movs	r1, #33	@ 0x21
 8002848:	f000 f8f6 	bl	8002a38 <CODEC_IO_Write>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	51eb851f 	.word	0x51eb851f

08002864 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d124      	bne.n	80028e0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	22ff      	movs	r2, #255	@ 0xff
 800289c:	2104      	movs	r1, #4
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f8ca 	bl	8002a38 <CODEC_IO_Write>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2201      	movs	r2, #1
 80028b4:	2122      	movs	r1, #34	@ 0x22
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f8be 	bl	8002a38 <CODEC_IO_Write>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2201      	movs	r2, #1
 80028cc:	2123      	movs	r1, #35	@ 0x23
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f8b2 	bl	8002a38 <CODEC_IO_Write>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e025      	b.n	800292c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	2122      	movs	r1, #34	@ 0x22
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f8a5 	bl	8002a38 <CODEC_IO_Write>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	2123      	movs	r1, #35	@ 0x23
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f899 	bl	8002a38 <CODEC_IO_Write>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <cs43l22_SetMute+0xb8>)
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	2104      	movs	r1, #4
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f88b 	bl	8002a38 <CODEC_IO_Write>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200004b0 	.word	0x200004b0

0800293c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	460a      	mov	r2, r1
 8002946:	80fb      	strh	r3, [r7, #6]
 8002948:	4613      	mov	r3, r2
 800294a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002950:	797b      	ldrb	r3, [r7, #5]
 8002952:	3b01      	subs	r3, #1
 8002954:	2b03      	cmp	r3, #3
 8002956:	d84b      	bhi.n	80029f0 <cs43l22_SetOutputMode+0xb4>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <cs43l22_SetOutputMode+0x24>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002991 	.word	0x08002991
 8002968:	080029b1 	.word	0x080029b1
 800296c:	080029d1 	.word	0x080029d1
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	22fa      	movs	r2, #250	@ 0xfa
 8002976:	2104      	movs	r1, #4
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f85d 	bl	8002a38 <CODEC_IO_Write>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8002988:	4b24      	ldr	r3, [pc, #144]	@ (8002a1c <cs43l22_SetOutputMode+0xe0>)
 800298a:	22fa      	movs	r2, #250	@ 0xfa
 800298c:	701a      	strb	r2, [r3, #0]
      break;
 800298e:	e03f      	b.n	8002a10 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	22af      	movs	r2, #175	@ 0xaf
 8002996:	2104      	movs	r1, #4
 8002998:	4618      	mov	r0, r3
 800299a:	f000 f84d 	bl	8002a38 <CODEC_IO_Write>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 80029a8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a1c <cs43l22_SetOutputMode+0xe0>)
 80029aa:	22af      	movs	r2, #175	@ 0xaf
 80029ac:	701a      	strb	r2, [r3, #0]
      break;
 80029ae:	e02f      	b.n	8002a10 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	22aa      	movs	r2, #170	@ 0xaa
 80029b6:	2104      	movs	r1, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f83d 	bl	8002a38 <CODEC_IO_Write>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80029c8:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <cs43l22_SetOutputMode+0xe0>)
 80029ca:	22aa      	movs	r2, #170	@ 0xaa
 80029cc:	701a      	strb	r2, [r3, #0]
      break;
 80029ce:	e01f      	b.n	8002a10 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2205      	movs	r2, #5
 80029d6:	2104      	movs	r1, #4
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f82d 	bl	8002a38 <CODEC_IO_Write>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a1c <cs43l22_SetOutputMode+0xe0>)
 80029ea:	2205      	movs	r2, #5
 80029ec:	701a      	strb	r2, [r3, #0]
      break;    
 80029ee:	e00f      	b.n	8002a10 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2205      	movs	r2, #5
 80029f6:	2104      	movs	r1, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f81d 	bl	8002a38 <CODEC_IO_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <cs43l22_SetOutputMode+0xe0>)
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
      break;
 8002a0e:	bf00      	nop
  }  
  return counter;
 8002a10:	68fb      	ldr	r3, [r7, #12]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200004b0 	.word	0x200004b0

08002a20 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  return 0;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	460b      	mov	r3, r1
 8002a44:	71bb      	strb	r3, [r7, #6]
 8002a46:	4613      	mov	r3, r2
 8002a48:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8002a4e:	797a      	ldrb	r2, [r7, #5]
 8002a50:	79b9      	ldrb	r1, [r7, #6]
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 ff37 	bl	80078c8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	b2db      	uxtb	r3, r3
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <Format_PCM_For_Plotter>:
	char uart_tx_buffer[UART_TX_BUFFER_SIZE];


	//esse size é a quantidade de amostras do buffer : pcmBuffer[size]
	void Format_PCM_For_Plotter(int16_t* pcmBuffer, uint16_t size)
	{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
	    uint16_t len = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	81fb      	strh	r3, [r7, #14]
	    for (uint16_t i = 0; i < size; i++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	81bb      	strh	r3, [r7, #12]
 8002a7c:	e01b      	b.n	8002ab6 <Format_PCM_For_Plotter+0x4e>
	    {
	        len += snprintf(&uart_tx_buffer[len], UART_TX_BUFFER_SIZE - len, "%d\n", pcmBuffer[i]);
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <Format_PCM_For_Plotter+0x64>)
 8002a82:	1898      	adds	r0, r3, r2
 8002a84:	89fb      	ldrh	r3, [r7, #14]
 8002a86:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	89bb      	ldrh	r3, [r7, #12]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad0 <Format_PCM_For_Plotter+0x68>)
 8002a9a:	f005 f98d 	bl	8007db8 <sniprintf>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	81fb      	strh	r3, [r7, #14]
	        if (len >= UART_TX_BUFFER_SIZE - 8) break;
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8002aae:	d207      	bcs.n	8002ac0 <Format_PCM_For_Plotter+0x58>
	    for (uint16_t i = 0; i < size; i++)
 8002ab0:	89bb      	ldrh	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	81bb      	strh	r3, [r7, #12]
 8002ab6:	89ba      	ldrh	r2, [r7, #12]
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3df      	bcc.n	8002a7e <Format_PCM_For_Plotter+0x16>
	    }
	    //HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
	}
 8002abe:	e000      	b.n	8002ac2 <Format_PCM_For_Plotter+0x5a>
	        if (len >= UART_TX_BUFFER_SIZE - 8) break;
 8002ac0:	bf00      	nop
	}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000890 	.word	0x20000890
 8002ad0:	08008f18 	.word	0x08008f18

08002ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ada:	f000 fe63 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ade:	f000 f8fb 	bl	8002cd8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ae2:	f000 f961 	bl	8002da8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae6:	f000 fa7b 	bl	8002fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aea:	f000 fa49 	bl	8002f80 <MX_DMA_Init>
  MX_I2S2_Init();
 8002aee:	f000 f9c1 	bl	8002e74 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 8002af2:	f000 fa1b 	bl	8002f2c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002af6:	f000 f973 	bl	8002de0 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8002afa:	f005 f933 	bl	8007d64 <MX_PDM2PCM_Init>
  MX_I2S3_Init();
 8002afe:	f000 f9e7 	bl	8002ed0 <MX_I2S3_Init>
  MX_I2C1_Init();
 8002b02:	f000 f989 	bl	8002e18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	  //resetando o codec

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2110      	movs	r1, #16
 8002b0a:	4862      	ldr	r0, [pc, #392]	@ (8002c94 <main+0x1c0>)
 8002b0c:	f001 fd78 	bl	8004600 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8002b10:	2005      	movs	r0, #5
 8002b12:	f000 feb9 	bl	8003888 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8002b16:	2201      	movs	r2, #1
 8002b18:	2110      	movs	r1, #16
 8002b1a:	485e      	ldr	r0, [pc, #376]	@ (8002c94 <main+0x1c0>)
 8002b1c:	f001 fd70 	bl	8004600 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8002b20:	2005      	movs	r0, #5
 8002b22:	f000 feb1 	bl	8003888 <HAL_Delay>
	  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 90, I2S_AUDIOFREQ_16K);
 8002b26:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8002b2a:	215a      	movs	r1, #90	@ 0x5a
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f004 ff11 	bl	8007954 <BSP_AUDIO_OUT_Init>
	  BSP_AUDIO_OUT_SetVolume(90);
 8002b32:	205a      	movs	r0, #90	@ 0x5a
 8002b34:	f004 ff86 	bl	8007a44 <BSP_AUDIO_OUT_SetVolume>
	  memset(audioBufferPCM, 0, sizeof(audioBufferPCM)); //evita lixo eletronico zerando os bytes do buffer pcm
 8002b38:	2240      	movs	r2, #64	@ 0x40
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4856      	ldr	r0, [pc, #344]	@ (8002c98 <main+0x1c4>)
 8002b3e:	f005 f971 	bl	8007e24 <memset>
	  BSP_AUDIO_OUT_Play((uint16_t*)audioBufferPCM, AUDIO_BUFFER_SIZE_PCM * 2);
 8002b42:	2140      	movs	r1, #64	@ 0x40
 8002b44:	4854      	ldr	r0, [pc, #336]	@ (8002c98 <main+0x1c4>)
 8002b46:	f004 ff53 	bl	80079f0 <BSP_AUDIO_OUT_Play>
	  HAL_I2S_Receive_DMA(&hi2s2,(uint16_t*)audioBufferPDM, AUDIO_BUFFER_SIZE_PDM);
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	4953      	ldr	r1, [pc, #332]	@ (8002c9c <main+0x1c8>)
 8002b4e:	4854      	ldr	r0, [pc, #336]	@ (8002ca0 <main+0x1cc>)
 8002b50:	f002 ff92 	bl	8005a78 <HAL_I2S_Receive_DMA>
	  //BSP_AUDIO_OUT_Play((uint16_t*)audioTestBuffer, AUDIO_TEST_BUFFER_SIZE * 2);
	  //HAL_Delay(5000);
	  //BSP_AUDIO_OUT_SetVolume(0);

	  pcm_buffer_half_free = 1;
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <main+0x1d0>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
	   {
			  if (pcm_buffer_half_free == 1)
 8002b5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ca4 <main+0x1d0>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d120      	bne.n	8002ba6 <main+0xd2>
				{

				  if (isAudioBufferPDMHalf == 1)
 8002b64:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <main+0x1d4>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d10b      	bne.n	8002b86 <main+0xb2>
				  {

					PDM_Filter((uint8_t*)&audioBufferPDM[0], &audioBufferPCM[0], &PDM1_filter_handler);
 8002b6e:	4a4f      	ldr	r2, [pc, #316]	@ (8002cac <main+0x1d8>)
 8002b70:	4949      	ldr	r1, [pc, #292]	@ (8002c98 <main+0x1c4>)
 8002b72:	484a      	ldr	r0, [pc, #296]	@ (8002c9c <main+0x1c8>)
 8002b74:	f7fd fd25 	bl	80005c2 <PDM_Filter>
					//PDM_Filter((uint8_t*)&audioBufferPDM[0], &uartBufferPCM[0], &PDM1_filter_handler);
					isAudioBufferPDMHalf = 0;
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <main+0x1d4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
					pcm_buffer_half_free = 0;
 8002b7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ca4 <main+0x1d0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e00f      	b.n	8002ba6 <main+0xd2>
					//pcm_counter++;


				  }
				  else if (isAudioBufferPDMFull == 1)
 8002b86:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb0 <main+0x1dc>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10a      	bne.n	8002ba6 <main+0xd2>
					 {
					   PDM_Filter((uint8_t*)&audioBufferPDM[AUDIO_BUFFER_SIZE_PDM/2], &audioBufferPCM[0], &PDM1_filter_handler);
 8002b90:	4a46      	ldr	r2, [pc, #280]	@ (8002cac <main+0x1d8>)
 8002b92:	4941      	ldr	r1, [pc, #260]	@ (8002c98 <main+0x1c4>)
 8002b94:	4847      	ldr	r0, [pc, #284]	@ (8002cb4 <main+0x1e0>)
 8002b96:	f7fd fd14 	bl	80005c2 <PDM_Filter>
					   //PDM_Filter((uint8_t*)&audioBufferPDM[0], &uartBufferPCM[0], &PDM1_filter_handler);
					   isAudioBufferPDMFull = 0;
 8002b9a:	4b45      	ldr	r3, [pc, #276]	@ (8002cb0 <main+0x1dc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
					   pcm_buffer_half_free = 0;
 8002ba0:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <main+0x1d0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]

					 }
				   }


			  if (pcm_buffer_half_free == 2)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca4 <main+0x1d0>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d127      	bne.n	8002c00 <main+0x12c>
				{

				  if (isAudioBufferPDMHalf == 1)
 8002bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <main+0x1d4>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10b      	bne.n	8002bd2 <main+0xfe>
				  {

					PDM_Filter((uint8_t*)&audioBufferPDM[0], &audioBufferPCM[16], &PDM1_filter_handler);
 8002bba:	4a3c      	ldr	r2, [pc, #240]	@ (8002cac <main+0x1d8>)
 8002bbc:	493e      	ldr	r1, [pc, #248]	@ (8002cb8 <main+0x1e4>)
 8002bbe:	4837      	ldr	r0, [pc, #220]	@ (8002c9c <main+0x1c8>)
 8002bc0:	f7fd fcff 	bl	80005c2 <PDM_Filter>
					//PDM_Filter((uint8_t*)&audioBufferPDM[0], &uartBufferPCM[0], &PDM1_filter_handler);
					isAudioBufferPDMHalf = 0;
 8002bc4:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <main+0x1d4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
					pcm_buffer_half_free = 0;
 8002bca:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <main+0x1d0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e016      	b.n	8002c00 <main+0x12c>

				  }
				  else if (isAudioBufferPDMFull == 1)
 8002bd2:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <main+0x1dc>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d111      	bne.n	8002c00 <main+0x12c>
				  {

					PDM_Filter((uint8_t*)&audioBufferPDM[AUDIO_BUFFER_SIZE_PDM/2], &audioBufferPCM[16], &PDM1_filter_handler);
 8002bdc:	4a33      	ldr	r2, [pc, #204]	@ (8002cac <main+0x1d8>)
 8002bde:	4936      	ldr	r1, [pc, #216]	@ (8002cb8 <main+0x1e4>)
 8002be0:	4834      	ldr	r0, [pc, #208]	@ (8002cb4 <main+0x1e0>)
 8002be2:	f7fd fcee 	bl	80005c2 <PDM_Filter>
					//PDM_Filter((uint8_t*)&audioBufferPDM[0], &uartBufferPCM[0], &PDM1_filter_handler);
					isAudioBufferPDMFull = 0;
 8002be6:	4b32      	ldr	r3, [pc, #200]	@ (8002cb0 <main+0x1dc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
					pcm_buffer_half_free = 0;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <main+0x1d0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
					pcm_counter++;
 8002bf2:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <main+0x1e8>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <main+0x1e8>)
 8002bfe:	701a      	strb	r2, [r3, #0]
				  }
				}


		 if (isI2SReadingError)
 8002c00:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc0 <main+0x1ec>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <main+0x146>
		 {
		   isI2SReadingError = 0u;
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <main+0x1ec>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
		   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c14:	481f      	ldr	r0, [pc, #124]	@ (8002c94 <main+0x1c0>)
 8002c16:	f001 fd0c 	bl	8004632 <HAL_GPIO_TogglePin>
		 }
		 if(pcm_counter == 2)
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <main+0x1e8>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d116      	bne.n	8002c52 <main+0x17e>
		 {
			 //memcpy(pcm_tx_buffer, audioBufferPCM, sizeof(pcm_tx_buffer));//faz uma cópia do buffer pcm pro buffer tx
			 for (int i = 0; i < AUDIO_BUFFER_SIZE_PCM; i++) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	e00a      	b.n	8002c40 <main+0x16c>
			     pcm_tx_buffer[i] = audioBufferPCM[i];
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c98 <main+0x1c4>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002c32:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <main+0x1f0>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 for (int i = 0; i < AUDIO_BUFFER_SIZE_PCM; i++) {
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b1f      	cmp	r3, #31
 8002c44:	ddf1      	ble.n	8002c2a <main+0x156>
			 }
			 pcm_counter = 0;
 8002c46:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <main+0x1e8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
			 pcm_ready = 1;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <main+0x1f4>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
		 }
		 if (!uart_busy) {
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <main+0x1f8>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f af7e 	bne.w	8002b5a <main+0x86>
			 if (pcm_ready)
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <main+0x1f4>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f43f af78 	beq.w	8002b5a <main+0x86>
			 {
				uart_busy = 1;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <main+0x1f8>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
				pcm_ready = 0;
 8002c70:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <main+0x1f4>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
				//sprintf(uart_tx_buffer, "%d\n", 500);
				Format_PCM_For_Plotter(pcm_tx_buffer, AUDIO_BUFFER_SIZE_PCM);
 8002c76:	2120      	movs	r1, #32
 8002c78:	4812      	ldr	r0, [pc, #72]	@ (8002cc4 <main+0x1f0>)
 8002c7a:	f7ff fef5 	bl	8002a68 <Format_PCM_For_Plotter>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer));
 8002c7e:	4814      	ldr	r0, [pc, #80]	@ (8002cd0 <main+0x1fc>)
 8002c80:	f7ff f986 	bl	8001f90 <strlen>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4911      	ldr	r1, [pc, #68]	@ (8002cd0 <main+0x1fc>)
 8002c8c:	4811      	ldr	r0, [pc, #68]	@ (8002cd4 <main+0x200>)
 8002c8e:	f004 f9d5 	bl	800703c <HAL_UART_Transmit_DMA>
			  if (pcm_buffer_half_free == 1)
 8002c92:	e762      	b.n	8002b5a <main+0x86>
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	20000810 	.word	0x20000810
 8002c9c:	20000710 	.word	0x20000710
 8002ca0:	20000510 	.word	0x20000510
 8002ca4:	2000070a 	.word	0x2000070a
 8002ca8:	20000708 	.word	0x20000708
 8002cac:	20001144 	.word	0x20001144
 8002cb0:	20000709 	.word	0x20000709
 8002cb4:	20000790 	.word	0x20000790
 8002cb8:	20000830 	.word	0x20000830
 8002cbc:	2000070d 	.word	0x2000070d
 8002cc0:	2000070b 	.word	0x2000070b
 8002cc4:	20000850 	.word	0x20000850
 8002cc8:	2000070e 	.word	0x2000070e
 8002ccc:	2000070c 	.word	0x2000070c
 8002cd0:	20000890 	.word	0x20000890
 8002cd4:	20000660 	.word	0x20000660

08002cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b094      	sub	sp, #80	@ 0x50
 8002cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cde:	f107 0320 	add.w	r3, r7, #32
 8002ce2:	2230      	movs	r2, #48	@ 0x30
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 f89c 	bl	8007e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	4b27      	ldr	r3, [pc, #156]	@ (8002da0 <SystemClock_Config+0xc8>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a26      	ldr	r2, [pc, #152]	@ (8002da0 <SystemClock_Config+0xc8>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <SystemClock_Config+0xc8>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <SystemClock_Config+0xcc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a20      	ldr	r2, [pc, #128]	@ (8002da4 <SystemClock_Config+0xcc>)
 8002d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <SystemClock_Config+0xcc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002d48:	2305      	movs	r3, #5
 8002d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002d4c:	2354      	movs	r3, #84	@ 0x54
 8002d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d54:	2307      	movs	r3, #7
 8002d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d58:	f107 0320 	add.w	r3, r7, #32
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fb17 	bl	8006390 <HAL_RCC_OscConfig>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d68:	f000 fa06 	bl	8003178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d70:	2302      	movs	r3, #2
 8002d72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fd79 	bl	8006880 <HAL_RCC_ClockConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d94:	f000 f9f0 	bl	8003178 <Error_Handler>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3750      	adds	r7, #80	@ 0x50
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000

08002da8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dae:	463b      	mov	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002dbe:	23c0      	movs	r3, #192	@ 0xc0
 8002dc0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 ff79 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8002dd4:	f000 f9d0 	bl	8003178 <Error_Handler>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <MX_CRC_Init+0x30>)
 8002de6:	4a0b      	ldr	r2, [pc, #44]	@ (8002e14 <MX_CRC_Init+0x34>)
 8002de8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002dea:	4809      	ldr	r0, [pc, #36]	@ (8002e10 <MX_CRC_Init+0x30>)
 8002dec:	f000 fe81 	bl	8003af2 <HAL_CRC_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002df6:	f000 f9bf 	bl	8003178 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <MX_CRC_Init+0x30>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <MX_CRC_Init+0x30>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200004b4 	.word	0x200004b4
 8002e14:	40023000 	.word	0x40023000

08002e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <MX_I2C1_Init+0x54>)
 8002e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e22:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e24:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <MX_I2C1_Init+0x58>)
 8002e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e42:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e48:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e54:	4804      	ldr	r0, [pc, #16]	@ (8002e68 <MX_I2C1_Init+0x50>)
 8002e56:	f001 fc07 	bl	8004668 <HAL_I2C_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e60:	f000 f98a 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200004bc 	.word	0x200004bc
 8002e6c:	40005400 	.word	0x40005400
 8002e70:	000186a0 	.word	0x000186a0

08002e74 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002e7a:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <MX_I2S2_Init+0x58>)
 8002e7c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002e80:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e84:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002e88:	2210      	movs	r2, #16
 8002e8a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002e9a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8002e9e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002eb2:	4805      	ldr	r0, [pc, #20]	@ (8002ec8 <MX_I2S2_Init+0x54>)
 8002eb4:	f002 fbfc 	bl	80056b0 <HAL_I2S_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8002ebe:	f000 f95b 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000510 	.word	0x20000510
 8002ecc:	40003800 	.word	0x40003800

08002ed0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002ed6:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <MX_I2S3_Init+0x58>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002eda:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002eee:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002ef6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8002efa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002f02:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	@ (8002f24 <MX_I2S3_Init+0x54>)
 8002f10:	f002 fbce 	bl	80056b0 <HAL_I2S_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002f1a:	f000 f92d 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000558 	.word	0x20000558
 8002f28:	40003c00 	.word	0x40003c00

08002f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f30:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <MX_USART2_UART_Init+0x50>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f36:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f64:	f004 f81a 	bl	8006f9c <HAL_UART_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f6e:	f000 f903 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000660 	.word	0x20000660
 8002f7c:	40004400 	.word	0x40004400

08002f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <MX_DMA_Init+0x5c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a13      	ldr	r2, [pc, #76]	@ (8002fdc <MX_DMA_Init+0x5c>)
 8002f90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <MX_DMA_Init+0x5c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	200e      	movs	r0, #14
 8002fa8:	f000 fd6d 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002fac:	200e      	movs	r0, #14
 8002fae:	f000 fd86 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2010      	movs	r0, #16
 8002fb8:	f000 fd65 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002fbc:	2010      	movs	r0, #16
 8002fbe:	f000 fd7e 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2011      	movs	r0, #17
 8002fc8:	f000 fd5d 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002fcc:	2011      	movs	r0, #17
 8002fce:	f000 fd76 	bl	8003abe <HAL_NVIC_EnableIRQ>

}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
 8002ff4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003004:	6313      	str	r3, [r2, #48]	@ 0x30
 8003006:	4b2b      	ldr	r3, [pc, #172]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	4b27      	ldr	r3, [pc, #156]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a26      	ldr	r2, [pc, #152]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b16      	ldr	r3, [pc, #88]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a11      	ldr	r2, [pc, #68]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b0f      	ldr	r3, [pc, #60]	@ (80030b4 <MX_GPIO_Init+0xd4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_4, GPIO_PIN_RESET);
 8003082:	2200      	movs	r2, #0
 8003084:	f241 0110 	movw	r1, #4112	@ 0x1010
 8003088:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <MX_GPIO_Init+0xd8>)
 800308a:	f001 fab9 	bl	8004600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4;
 800308e:	f241 0310 	movw	r3, #4112	@ 0x1010
 8003092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4619      	mov	r1, r3
 80030a6:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_GPIO_Init+0xd8>)
 80030a8:	f001 f90e 	bl	80042c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	bf00      	nop
 80030ae:	3728      	adds	r7, #40	@ 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020c00 	.word	0x40020c00

080030bc <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
	void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
	{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
		isAudioBufferPDMHalf = 1;
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]

	}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000708 	.word	0x20000708

080030dc <HAL_I2S_RxCpltCallback>:

	void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
	{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

		isAudioBufferPDMFull = 1;
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_I2S_RxCpltCallback+0x1c>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]


	}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000709 	.word	0x20000709

080030fc <HAL_I2S_ErrorCallback>:

	void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
	{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
		isI2SReadingError = 1u;
 8003104:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_I2S_ErrorCallback+0x1c>)
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
	}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000070b 	.word	0x2000070b

0800311c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
	void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
	{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
		pcm_buffer_half_free = 1; // Sinaliza que a PRIMEIRA metade está livre
 8003120:	4b03      	ldr	r3, [pc, #12]	@ (8003130 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
	}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	2000070a 	.word	0x2000070a

08003134 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
	void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
	{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
		pcm_buffer_half_free = 2; // Sinaliza que a SEGUNDA metade está livre
 8003138:	4b03      	ldr	r3, [pc, #12]	@ (8003148 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]
	}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	2000070a 	.word	0x2000070a

0800314c <HAL_UART_TxCpltCallback>:

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	  Error_Handler();
	}
	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
		if (huart->Instance == USART2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <HAL_UART_TxCpltCallback+0x24>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d102      	bne.n	8003164 <HAL_UART_TxCpltCallback+0x18>
		{
			uart_busy = 0;
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_UART_TxCpltCallback+0x28>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
		}
	}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40004400 	.word	0x40004400
 8003174:	2000070c 	.word	0x2000070c

08003178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <Error_Handler+0x8>

08003184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <HAL_MspInit+0x4c>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	4a0f      	ldr	r2, [pc, #60]	@ (80031d0 <HAL_MspInit+0x4c>)
 8003194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003198:	6453      	str	r3, [r2, #68]	@ 0x44
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <HAL_MspInit+0x4c>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_MspInit+0x4c>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_MspInit+0x4c>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_MspInit+0x4c>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031c2:	2007      	movs	r0, #7
 80031c4:	f000 fc54 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003210 <HAL_CRC_MspInit+0x3c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10d      	bne.n	8003202 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <HAL_CRC_MspInit+0x40>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a09      	ldr	r2, [pc, #36]	@ (8003214 <HAL_CRC_MspInit+0x40>)
 80031f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b07      	ldr	r3, [pc, #28]	@ (8003214 <HAL_CRC_MspInit+0x40>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023000 	.word	0x40023000
 8003214:	40023800 	.word	0x40023800

08003218 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a19      	ldr	r2, [pc, #100]	@ (800329c <HAL_I2C_MspInit+0x84>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d12c      	bne.n	8003294 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b18      	ldr	r3, [pc, #96]	@ (80032a0 <HAL_I2C_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <HAL_I2C_MspInit+0x88>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6313      	str	r3, [r2, #48]	@ 0x30
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <HAL_I2C_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003256:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800325c:	2312      	movs	r3, #18
 800325e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003260:	2301      	movs	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003268:	2304      	movs	r3, #4
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	480c      	ldr	r0, [pc, #48]	@ (80032a4 <HAL_I2C_MspInit+0x8c>)
 8003274:	f001 f828 	bl	80042c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <HAL_I2C_MspInit+0x88>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	4a07      	ldr	r2, [pc, #28]	@ (80032a0 <HAL_I2C_MspInit+0x88>)
 8003282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003286:	6413      	str	r3, [r2, #64]	@ 0x40
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_I2C_MspInit+0x88>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003294:	bf00      	nop
 8003296:	3728      	adds	r7, #40	@ 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40005400 	.word	0x40005400
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020400 	.word	0x40020400

080032a8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08e      	sub	sp, #56	@ 0x38
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a90      	ldr	r2, [pc, #576]	@ (8003508 <HAL_I2S_MspInit+0x260>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 808e 	bne.w	80033e8 <HAL_I2S_MspInit+0x140>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	4b8e      	ldr	r3, [pc, #568]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4a8d      	ldr	r2, [pc, #564]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80032d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032da:	6413      	str	r3, [r2, #64]	@ 0x40
 80032dc:	4b8b      	ldr	r3, [pc, #556]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	4b87      	ldr	r3, [pc, #540]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a86      	ldr	r2, [pc, #536]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b84      	ldr	r3, [pc, #528]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	4b80      	ldr	r3, [pc, #512]	@ (800350c <HAL_I2S_MspInit+0x264>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	4a7f      	ldr	r2, [pc, #508]	@ (800350c <HAL_I2S_MspInit+0x264>)
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	6313      	str	r3, [r2, #48]	@ 0x30
 8003314:	4b7d      	ldr	r3, [pc, #500]	@ (800350c <HAL_I2S_MspInit+0x264>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003320:	2308      	movs	r3, #8
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003330:	2305      	movs	r3, #5
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003338:	4619      	mov	r1, r3
 800333a:	4875      	ldr	r0, [pc, #468]	@ (8003510 <HAL_I2S_MspInit+0x268>)
 800333c:	f000 ffc4 	bl	80042c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003352:	2305      	movs	r3, #5
 8003354:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800335a:	4619      	mov	r1, r3
 800335c:	486d      	ldr	r0, [pc, #436]	@ (8003514 <HAL_I2S_MspInit+0x26c>)
 800335e:	f000 ffb3 	bl	80042c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003374:	2305      	movs	r3, #5
 8003376:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337c:	4619      	mov	r1, r3
 800337e:	4865      	ldr	r0, [pc, #404]	@ (8003514 <HAL_I2S_MspInit+0x26c>)
 8003380:	f000 ffa2 	bl	80042c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003384:	4b64      	ldr	r3, [pc, #400]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 8003386:	4a65      	ldr	r2, [pc, #404]	@ (800351c <HAL_I2S_MspInit+0x274>)
 8003388:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800338a:	4b63      	ldr	r3, [pc, #396]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 800338c:	2200      	movs	r2, #0
 800338e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003390:	4b61      	ldr	r3, [pc, #388]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003396:	4b60      	ldr	r3, [pc, #384]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 8003398:	2200      	movs	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	4b5e      	ldr	r3, [pc, #376]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 800339e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80033b4:	4b58      	ldr	r3, [pc, #352]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80033bc:	4b56      	ldr	r3, [pc, #344]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033c4:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80033ca:	4853      	ldr	r0, [pc, #332]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033cc:	f000 fbae 	bl	8003b2c <HAL_DMA_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 80033d6:	f7ff fecf 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003518 <HAL_I2S_MspInit+0x270>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80033e6:	e08a      	b.n	80034fe <HAL_I2S_MspInit+0x256>
  else if(hi2s->Instance==SPI3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003520 <HAL_I2S_MspInit+0x278>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f040 8085 	bne.w	80034fe <HAL_I2S_MspInit+0x256>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	4b44      	ldr	r3, [pc, #272]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	4a43      	ldr	r2, [pc, #268]	@ (800350c <HAL_I2S_MspInit+0x264>)
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003402:	6413      	str	r3, [r2, #64]	@ 0x40
 8003404:	4b41      	ldr	r3, [pc, #260]	@ (800350c <HAL_I2S_MspInit+0x264>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	4b3d      	ldr	r3, [pc, #244]	@ (800350c <HAL_I2S_MspInit+0x264>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_I2S_MspInit+0x264>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003420:	4b3a      	ldr	r3, [pc, #232]	@ (800350c <HAL_I2S_MspInit+0x264>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	4b36      	ldr	r3, [pc, #216]	@ (800350c <HAL_I2S_MspInit+0x264>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	4a35      	ldr	r2, [pc, #212]	@ (800350c <HAL_I2S_MspInit+0x264>)
 8003436:	f043 0304 	orr.w	r3, r3, #4
 800343a:	6313      	str	r3, [r2, #48]	@ 0x30
 800343c:	4b33      	ldr	r3, [pc, #204]	@ (800350c <HAL_I2S_MspInit+0x264>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003448:	2310      	movs	r3, #16
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003458:	2306      	movs	r3, #6
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	4830      	ldr	r0, [pc, #192]	@ (8003524 <HAL_I2S_MspInit+0x27c>)
 8003464:	f000 ff30 	bl	80042c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003468:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800347a:	2306      	movs	r3, #6
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003482:	4619      	mov	r1, r3
 8003484:	4822      	ldr	r0, [pc, #136]	@ (8003510 <HAL_I2S_MspInit+0x268>)
 8003486:	f000 ff1f 	bl	80042c8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800348a:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_I2S_MspInit+0x284>)
 800348e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 8003492:	2200      	movs	r2, #0
 8003494:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003496:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349c:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034a2:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034a8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034b0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034c0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80034c2:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034c8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80034ca:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034cc:	2204      	movs	r2, #4
 80034ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80034d0:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034d8:	2200      	movs	r2, #0
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80034dc:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80034e2:	4811      	ldr	r0, [pc, #68]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034e4:	f000 fb22 	bl	8003b2c <HAL_DMA_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2S_MspInit+0x24a>
      Error_Handler();
 80034ee:	f7ff fe43 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80034f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003528 <HAL_I2S_MspInit+0x280>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80034fe:	bf00      	nop
 8003500:	3738      	adds	r7, #56	@ 0x38
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40003800 	.word	0x40003800
 800350c:	40023800 	.word	0x40023800
 8003510:	40020800 	.word	0x40020800
 8003514:	40020400 	.word	0x40020400
 8003518:	200005a0 	.word	0x200005a0
 800351c:	40026058 	.word	0x40026058
 8003520:	40003c00 	.word	0x40003c00
 8003524:	40020000 	.word	0x40020000
 8003528:	20000600 	.word	0x20000600
 800352c:	40026088 	.word	0x40026088

08003530 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a30      	ldr	r2, [pc, #192]	@ (8003610 <HAL_UART_MspInit+0xe0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d15a      	bne.n	8003608 <HAL_UART_MspInit+0xd8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <HAL_UART_MspInit+0xe4>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4a2e      	ldr	r2, [pc, #184]	@ (8003614 <HAL_UART_MspInit+0xe4>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003560:	6413      	str	r3, [r2, #64]	@ 0x40
 8003562:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <HAL_UART_MspInit+0xe4>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b28      	ldr	r3, [pc, #160]	@ (8003614 <HAL_UART_MspInit+0xe4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	4a27      	ldr	r2, [pc, #156]	@ (8003614 <HAL_UART_MspInit+0xe4>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6313      	str	r3, [r2, #48]	@ 0x30
 800357e:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_UART_MspInit+0xe4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800358a:	230c      	movs	r3, #12
 800358c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003596:	2303      	movs	r3, #3
 8003598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359a:	2307      	movs	r3, #7
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	481c      	ldr	r0, [pc, #112]	@ (8003618 <HAL_UART_MspInit+0xe8>)
 80035a6:	f000 fe8f 	bl	80042c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003620 <HAL_UART_MspInit+0xf0>)
 80035ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035b8:	4b18      	ldr	r3, [pc, #96]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035ba:	2240      	movs	r2, #64	@ 0x40
 80035bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035be:	4b17      	ldr	r3, [pc, #92]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035c4:	4b15      	ldr	r3, [pc, #84]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035cc:	4b13      	ldr	r3, [pc, #76]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d2:	4b12      	ldr	r3, [pc, #72]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80035d8:	4b10      	ldr	r3, [pc, #64]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035e0:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80035ec:	480b      	ldr	r0, [pc, #44]	@ (800361c <HAL_UART_MspInit+0xec>)
 80035ee:	f000 fa9d 	bl	8003b2c <HAL_DMA_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80035f8:	f7ff fdbe 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a07      	ldr	r2, [pc, #28]	@ (800361c <HAL_UART_MspInit+0xec>)
 8003600:	639a      	str	r2, [r3, #56]	@ 0x38
 8003602:	4a06      	ldr	r2, [pc, #24]	@ (800361c <HAL_UART_MspInit+0xec>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	@ 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40004400 	.word	0x40004400
 8003614:	40023800 	.word	0x40023800
 8003618:	40020000 	.word	0x40020000
 800361c:	200006a8 	.word	0x200006a8
 8003620:	400260a0 	.word	0x400260a0

08003624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <NMI_Handler+0x4>

0800362c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <HardFault_Handler+0x4>

08003634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <MemManage_Handler+0x4>

0800363c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <BusFault_Handler+0x4>

08003644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <UsageFault_Handler+0x4>

0800364c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800367a:	f000 f8e5 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003688:	4802      	ldr	r0, [pc, #8]	@ (8003694 <DMA1_Stream3_IRQHandler+0x10>)
 800368a:	f000 fbb3 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200005a0 	.word	0x200005a0

08003698 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <DMA1_Stream5_IRQHandler+0x10>)
 800369e:	f000 fba9 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000600 	.word	0x20000600

080036ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036b0:	4802      	ldr	r0, [pc, #8]	@ (80036bc <DMA1_Stream6_IRQHandler+0x10>)
 80036b2:	f000 fb9f 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200006a8 	.word	0x200006a8

080036c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c8:	4a14      	ldr	r2, [pc, #80]	@ (800371c <_sbrk+0x5c>)
 80036ca:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <_sbrk+0x60>)
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d4:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <_sbrk+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036dc:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <_sbrk+0x64>)
 80036de:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <_sbrk+0x68>)
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e2:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f0:	f004 fba0 	bl	8007e34 <__errno>
 80036f4:	4603      	mov	r3, r0
 80036f6:	220c      	movs	r2, #12
 80036f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	e009      	b.n	8003714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003700:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <_sbrk+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003706:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	4a05      	ldr	r2, [pc, #20]	@ (8003724 <_sbrk+0x64>)
 8003710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20020000 	.word	0x20020000
 8003720:	00000400 	.word	0x00000400
 8003724:	20001090 	.word	0x20001090
 8003728:	200012e0 	.word	0x200012e0

0800372c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <SystemInit+0x20>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	4a05      	ldr	r2, [pc, #20]	@ (800374c <SystemInit+0x20>)
 8003738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800373c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003788 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003754:	f7ff ffea 	bl	800372c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003758:	480c      	ldr	r0, [pc, #48]	@ (800378c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800375a:	490d      	ldr	r1, [pc, #52]	@ (8003790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800375c:	4a0d      	ldr	r2, [pc, #52]	@ (8003794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003760:	e002      	b.n	8003768 <LoopCopyDataInit>

08003762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003766:	3304      	adds	r3, #4

08003768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800376c:	d3f9      	bcc.n	8003762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003770:	4c0a      	ldr	r4, [pc, #40]	@ (800379c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003774:	e001      	b.n	800377a <LoopFillZerobss>

08003776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003778:	3204      	adds	r2, #4

0800377a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800377c:	d3fb      	bcc.n	8003776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800377e:	f004 fb5f 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7ff f9a7 	bl	8002ad4 <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800378c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003790:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 8003794:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 8003798:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 800379c:	200012e0 	.word	0x200012e0

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	@ (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 f94f 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fcd4 	bl	8003184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	@ (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f967 	bl	8003ada <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f000 f92f 	bl	8003a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	@ (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000438 	.word	0x20000438
 8003840:	20000440 	.word	0x20000440
 8003844:	2000043c 	.word	0x2000043c

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	@ (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	@ (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000440 	.word	0x20000440
 800386c:	20001094 	.word	0x20001094

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	@ (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20001094 	.word	0x20001094

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000440 	.word	0x20000440

080038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	@ (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	@ (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	@ (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
         );
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	@ 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3c:	d301      	bcc.n	8003a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00f      	b.n	8003a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <SysTick_Config+0x40>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f7ff ff8e 	bl	8003970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <SysTick_Config+0x40>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5a:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <SysTick_Config+0x40>)
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	e000e010 	.word	0xe000e010

08003a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff29 	bl	80038d0 <__NVIC_SetPriorityGrouping>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a98:	f7ff ff3e 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	6978      	ldr	r0, [r7, #20]
 8003aa4:	f7ff ff8e 	bl	80039c4 <NVIC_EncodePriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff5d 	bl	8003970 <__NVIC_SetPriority>
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff31 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffa2 	bl	8003a2c <SysTick_Config>
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00e      	b.n	8003b22 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	795b      	ldrb	r3, [r3, #5]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fb5d 	bl	80031d4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff fe9a 	bl	8003870 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e099      	b.n	8003c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b68:	e00f      	b.n	8003b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b6a:	f7ff fe81 	bl	8003870 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d908      	bls.n	8003b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e078      	b.n	8003c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e8      	bne.n	8003b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4b38      	ldr	r3, [pc, #224]	@ (8003c84 <HAL_DMA_Init+0x158>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	4313      	orrs	r3, r2
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d117      	bne.n	8003c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 facd 	bl	80041d0 <DMA_CheckFifoParam>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2240      	movs	r2, #64	@ 0x40
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e016      	b.n	8003c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa84 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	223f      	movs	r2, #63	@ 0x3f
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	f010803f 	.word	0xf010803f

08003c88 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e050      	b.n	8003d3c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e048      	b.n	8003d3c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2221      	movs	r2, #33	@ 0x21
 8003ce8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa3a 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	223f      	movs	r2, #63	@ 0x3f
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_DMA_Start_IT+0x26>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e040      	b.n	8003dec <HAL_DMA_Start_IT+0xa8>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d12f      	bne.n	8003dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f9b8 	bl	8004108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	223f      	movs	r2, #63	@ 0x3f
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0216 	orr.w	r2, r2, #22
 8003db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e005      	b.n	8003dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
 8003de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e00:	4b8e      	ldr	r3, [pc, #568]	@ (800403c <HAL_DMA_IRQHandler+0x248>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a8e      	ldr	r2, [pc, #568]	@ (8004040 <HAL_DMA_IRQHandler+0x24c>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0a9b      	lsrs	r3, r3, #10
 8003e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	2208      	movs	r2, #8
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01a      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0204 	bic.w	r2, r2, #4
 8003e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d012      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	f043 0202 	orr.w	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb8:	2204      	movs	r2, #4
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	f043 0204 	orr.w	r2, r3, #4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d043      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03c      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	2210      	movs	r2, #16
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d024      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
 8003f22:	e01f      	b.n	8003f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
 8003f34:	e016      	b.n	8003f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0208 	bic.w	r2, r2, #8
 8003f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	2220      	movs	r2, #32
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 808f 	beq.w	8004094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8087 	beq.w	8004094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d136      	bne.n	800400c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0216 	bic.w	r2, r2, #22
 8003fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_DMA_IRQHandler+0x1da>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0208 	bic.w	r2, r2, #8
 8003fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	223f      	movs	r2, #63	@ 0x3f
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d07e      	beq.n	8004100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
        }
        return;
 800400a:	e079      	b.n	8004100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01d      	beq.n	8004056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10d      	bne.n	8004044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	2b00      	cmp	r3, #0
 800402e:	d031      	beq.n	8004094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
 8004038:	e02c      	b.n	8004094 <HAL_DMA_IRQHandler+0x2a0>
 800403a:	bf00      	nop
 800403c:	20000438 	.word	0x20000438
 8004040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d023      	beq.n	8004094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e01e      	b.n	8004094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10f      	bne.n	8004084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0210 	bic.w	r2, r2, #16
 8004072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	2b00      	cmp	r3, #0
 800409a:	d032      	beq.n	8004102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d022      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2205      	movs	r2, #5
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d307      	bcc.n	80040dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f2      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x2cc>
 80040da:	e000      	b.n	80040de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
 80040fe:	e000      	b.n	8004102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004100:	bf00      	nop
    }
  }
}
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d108      	bne.n	8004148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004146:	e007      	b.n	8004158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3b10      	subs	r3, #16
 8004174:	4a14      	ldr	r2, [pc, #80]	@ (80041c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800417e:	4a13      	ldr	r2, [pc, #76]	@ (80041cc <DMA_CalcBaseAndBitshift+0x68>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d909      	bls.n	80041a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80041a4:	e007      	b.n	80041b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	aaaaaaab 	.word	0xaaaaaaab
 80041cc:	08008f34 	.word	0x08008f34

080041d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d856      	bhi.n	800429e <DMA_CheckFifoParam+0xce>
 80041f0:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <DMA_CheckFifoParam+0x28>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004209 	.word	0x08004209
 80041fc:	0800421b 	.word	0x0800421b
 8004200:	08004209 	.word	0x08004209
 8004204:	0800429f 	.word	0x0800429f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d046      	beq.n	80042a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e043      	b.n	80042a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004222:	d140      	bne.n	80042a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e03d      	b.n	80042a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004232:	d121      	bne.n	8004278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d837      	bhi.n	80042aa <DMA_CheckFifoParam+0xda>
 800423a:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <DMA_CheckFifoParam+0x70>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004251 	.word	0x08004251
 8004244:	08004257 	.word	0x08004257
 8004248:	08004251 	.word	0x08004251
 800424c:	08004269 	.word	0x08004269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	e030      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d025      	beq.n	80042ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004266:	e022      	b.n	80042ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004270:	d11f      	bne.n	80042b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004276:	e01c      	b.n	80042b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d903      	bls.n	8004286 <DMA_CheckFifoParam+0xb6>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d003      	beq.n	800428c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004284:	e018      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      break;
 800428a:	e015      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e00b      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 800429e:	bf00      	nop
 80042a0:	e00a      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a2:	bf00      	nop
 80042a4:	e008      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
 80042a8:	e006      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <DMA_CheckFifoParam+0xe8>
      break;
 80042b6:	bf00      	nop
    }
  } 
  
  return status; 
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	@ 0x24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e16b      	b.n	80045bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042e4:	2201      	movs	r2, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f040 815a 	bne.w	80045b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d005      	beq.n	800431a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004316:	2b02      	cmp	r3, #2
 8004318:	d130      	bne.n	800437c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	2203      	movs	r2, #3
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004350:	2201      	movs	r2, #1
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 0201 	and.w	r2, r3, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b03      	cmp	r3, #3
 8004386:	d017      	beq.n	80043b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2203      	movs	r2, #3
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d123      	bne.n	800440c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	08da      	lsrs	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3208      	adds	r2, #8
 80043cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	220f      	movs	r2, #15
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	08da      	lsrs	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3208      	adds	r2, #8
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0203 	and.w	r2, r3, #3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80b4 	beq.w	80045b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	4b60      	ldr	r3, [pc, #384]	@ (80045d4 <HAL_GPIO_Init+0x30c>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	4a5f      	ldr	r2, [pc, #380]	@ (80045d4 <HAL_GPIO_Init+0x30c>)
 8004458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800445c:	6453      	str	r3, [r2, #68]	@ 0x44
 800445e:	4b5d      	ldr	r3, [pc, #372]	@ (80045d4 <HAL_GPIO_Init+0x30c>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800446a:	4a5b      	ldr	r2, [pc, #364]	@ (80045d8 <HAL_GPIO_Init+0x310>)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	3302      	adds	r3, #2
 8004472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a52      	ldr	r2, [pc, #328]	@ (80045dc <HAL_GPIO_Init+0x314>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02b      	beq.n	80044ee <HAL_GPIO_Init+0x226>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a51      	ldr	r2, [pc, #324]	@ (80045e0 <HAL_GPIO_Init+0x318>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_Init+0x222>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a50      	ldr	r2, [pc, #320]	@ (80045e4 <HAL_GPIO_Init+0x31c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_Init+0x21e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4f      	ldr	r2, [pc, #316]	@ (80045e8 <HAL_GPIO_Init+0x320>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x21a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4e      	ldr	r2, [pc, #312]	@ (80045ec <HAL_GPIO_Init+0x324>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x216>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4d      	ldr	r2, [pc, #308]	@ (80045f0 <HAL_GPIO_Init+0x328>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x212>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4c      	ldr	r2, [pc, #304]	@ (80045f4 <HAL_GPIO_Init+0x32c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x20e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4b      	ldr	r2, [pc, #300]	@ (80045f8 <HAL_GPIO_Init+0x330>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x20a>
 80044ce:	2307      	movs	r3, #7
 80044d0:	e00e      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044d2:	2308      	movs	r3, #8
 80044d4:	e00c      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e00a      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044da:	2305      	movs	r3, #5
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044de:	2304      	movs	r3, #4
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x228>
 80044ee:	2300      	movs	r3, #0
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f002 0203 	and.w	r2, r2, #3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004500:	4935      	ldr	r1, [pc, #212]	@ (80045d8 <HAL_GPIO_Init+0x310>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450e:	4b3b      	ldr	r3, [pc, #236]	@ (80045fc <HAL_GPIO_Init+0x334>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004532:	4a32      	ldr	r2, [pc, #200]	@ (80045fc <HAL_GPIO_Init+0x334>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004538:	4b30      	ldr	r3, [pc, #192]	@ (80045fc <HAL_GPIO_Init+0x334>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800455c:	4a27      	ldr	r2, [pc, #156]	@ (80045fc <HAL_GPIO_Init+0x334>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <HAL_GPIO_Init+0x334>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004586:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <HAL_GPIO_Init+0x334>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458c:	4b1b      	ldr	r3, [pc, #108]	@ (80045fc <HAL_GPIO_Init+0x334>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b0:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <HAL_GPIO_Init+0x334>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	f67f ae90 	bls.w	80042e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	@ 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40020800 	.word	0x40020800
 80045e8:	40020c00 	.word	0x40020c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40021400 	.word	0x40021400
 80045f4:	40021800 	.word	0x40021800
 80045f8:	40021c00 	.word	0x40021c00
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	807b      	strh	r3, [r7, #2]
 800460c:	4613      	mov	r3, r2
 800460e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004610:	787b      	ldrb	r3, [r7, #1]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004616:	887a      	ldrh	r2, [r7, #2]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800461c:	e003      	b.n	8004626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800461e:	887b      	ldrh	r3, [r7, #2]
 8004620:	041a      	lsls	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	619a      	str	r2, [r3, #24]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4013      	ands	r3, r2
 800464a:	041a      	lsls	r2, r3, #16
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	43d9      	mvns	r1, r3
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	400b      	ands	r3, r1
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e12b      	b.n	80048d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe fdc2 	bl	8003218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2224      	movs	r2, #36	@ 0x24
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046cc:	f002 fad0 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4a81      	ldr	r2, [pc, #516]	@ (80048dc <HAL_I2C_Init+0x274>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d807      	bhi.n	80046ec <HAL_I2C_Init+0x84>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a80      	ldr	r2, [pc, #512]	@ (80048e0 <HAL_I2C_Init+0x278>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bf94      	ite	ls
 80046e4:	2301      	movls	r3, #1
 80046e6:	2300      	movhi	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e006      	b.n	80046fa <HAL_I2C_Init+0x92>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a7d      	ldr	r2, [pc, #500]	@ (80048e4 <HAL_I2C_Init+0x27c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bf94      	ite	ls
 80046f4:	2301      	movls	r3, #1
 80046f6:	2300      	movhi	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0e7      	b.n	80048d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a78      	ldr	r2, [pc, #480]	@ (80048e8 <HAL_I2C_Init+0x280>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0c9b      	lsrs	r3, r3, #18
 800470c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a6a      	ldr	r2, [pc, #424]	@ (80048dc <HAL_I2C_Init+0x274>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d802      	bhi.n	800473c <HAL_I2C_Init+0xd4>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3301      	adds	r3, #1
 800473a:	e009      	b.n	8004750 <HAL_I2C_Init+0xe8>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	4a69      	ldr	r2, [pc, #420]	@ (80048ec <HAL_I2C_Init+0x284>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	099b      	lsrs	r3, r3, #6
 800474e:	3301      	adds	r3, #1
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	430b      	orrs	r3, r1
 8004756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004762:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	495c      	ldr	r1, [pc, #368]	@ (80048dc <HAL_I2C_Init+0x274>)
 800476c:	428b      	cmp	r3, r1
 800476e:	d819      	bhi.n	80047a4 <HAL_I2C_Init+0x13c>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e59      	subs	r1, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fbb1 f3f3 	udiv	r3, r1, r3
 800477e:	1c59      	adds	r1, r3, #1
 8004780:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004784:	400b      	ands	r3, r1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_I2C_Init+0x138>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1e59      	subs	r1, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	fbb1 f3f3 	udiv	r3, r1, r3
 8004798:	3301      	adds	r3, #1
 800479a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479e:	e051      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e04f      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d111      	bne.n	80047d0 <HAL_I2C_Init+0x168>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e58      	subs	r0, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e012      	b.n	80047f6 <HAL_I2C_Init+0x18e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1e58      	subs	r0, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	0099      	lsls	r1, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e6:	3301      	adds	r3, #1
 80047e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Init+0x196>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e022      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10e      	bne.n	8004824 <HAL_I2C_Init+0x1bc>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1e58      	subs	r0, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	440b      	add	r3, r1
 8004814:	fbb0 f3f3 	udiv	r3, r0, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004822:	e00f      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1e58      	subs	r0, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	0099      	lsls	r1, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	fbb0 f3f3 	udiv	r3, r0, r3
 800483a:	3301      	adds	r3, #1
 800483c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004840:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	6809      	ldr	r1, [r1, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004872:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6911      	ldr	r1, [r2, #16]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	430b      	orrs	r3, r1
 8004886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	000186a0 	.word	0x000186a0
 80048e0:	001e847f 	.word	0x001e847f
 80048e4:	003d08ff 	.word	0x003d08ff
 80048e8:	431bde83 	.word	0x431bde83
 80048ec:	10624dd3 	.word	0x10624dd3

080048f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	460b      	mov	r3, r1
 8004904:	813b      	strh	r3, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800490a:	f7fe ffb1 	bl	8003870 <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	f040 80d9 	bne.w	8004ad0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2319      	movs	r3, #25
 8004924:	2201      	movs	r2, #1
 8004926:	496d      	ldr	r1, [pc, #436]	@ (8004adc <HAL_I2C_Mem_Write+0x1ec>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fc8b 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
 8004936:	e0cc      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_I2C_Mem_Write+0x56>
 8004942:	2302      	movs	r3, #2
 8004944:	e0c5      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d007      	beq.n	800496c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2221      	movs	r2, #33	@ 0x21
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2240      	movs	r2, #64	@ 0x40
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a3a      	ldr	r2, [r7, #32]
 8004996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800499c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a4d      	ldr	r2, [pc, #308]	@ (8004ae0 <HAL_I2C_Mem_Write+0x1f0>)
 80049ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ae:	88f8      	ldrh	r0, [r7, #6]
 80049b0:	893a      	ldrh	r2, [r7, #8]
 80049b2:	8979      	ldrh	r1, [r7, #10]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4603      	mov	r3, r0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fac2 	bl	8004f48 <I2C_RequestMemoryWrite>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d052      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e081      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fd50 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d107      	bne.n	80049f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06b      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <HAL_I2C_Mem_Write+0x180>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1aa      	bne.n	80049ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fd43 	bl	8005508 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d107      	bne.n	8004aa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e016      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	00100002 	.word	0x00100002
 8004ae0:	ffff0000 	.word	0xffff0000

08004ae4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	@ 0x30
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	460b      	mov	r3, r1
 8004af8:	813b      	strh	r3, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004afe:	f7fe feb7 	bl	8003870 <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	f040 8214 	bne.w	8004f3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2319      	movs	r3, #25
 8004b18:	2201      	movs	r2, #1
 8004b1a:	497b      	ldr	r1, [pc, #492]	@ (8004d08 <HAL_I2C_Mem_Read+0x224>)
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fb91 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e207      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x56>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e200      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d007      	beq.n	8004b60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2222      	movs	r2, #34	@ 0x22
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2240      	movs	r2, #64	@ 0x40
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8004d0c <HAL_I2C_Mem_Read+0x228>)
 8004ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba2:	88f8      	ldrh	r0, [r7, #6]
 8004ba4:	893a      	ldrh	r2, [r7, #8]
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fa5e 	bl	8005074 <I2C_RequestMemoryRead>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e1bc      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d113      	bne.n	8004bf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e190      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d11b      	bne.n	8004c32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e170      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d11b      	bne.n	8004c72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	e150      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c88:	e144      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	f200 80f1 	bhi.w	8004e76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d123      	bne.n	8004ce4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fc79 	bl	8005598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e145      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ce2:	e117      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d14e      	bne.n	8004d8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4906      	ldr	r1, [pc, #24]	@ (8004d10 <HAL_I2C_Mem_Read+0x22c>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 faa4 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e11a      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
 8004d06:	bf00      	nop
 8004d08:	00100002 	.word	0x00100002
 8004d0c:	ffff0000 	.word	0xffff0000
 8004d10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d88:	e0c4      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	2200      	movs	r2, #0
 8004d92:	496c      	ldr	r1, [pc, #432]	@ (8004f44 <HAL_I2C_Mem_Read+0x460>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fa55 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0cb      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	2200      	movs	r2, #0
 8004dee:	4955      	ldr	r1, [pc, #340]	@ (8004f44 <HAL_I2C_Mem_Read+0x460>)
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa27 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e09d      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e74:	e04e      	b.n	8004f14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fb8c 	bl	8005598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e058      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d124      	bne.n	8004f14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f aeb6 	bne.w	8004c8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	@ 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	00010004 	.word	0x00010004

08004f48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	813b      	strh	r3, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f960 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f98:	d103      	bne.n	8004fa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e05f      	b.n	8005066 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fa6:	897b      	ldrh	r3, [r7, #10]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	492d      	ldr	r1, [pc, #180]	@ (8005070 <I2C_RequestMemoryWrite+0x128>)
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9bb 	bl	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e04c      	b.n	8005066 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe4:	6a39      	ldr	r1, [r7, #32]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fa46 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d107      	bne.n	800500a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005008:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e02b      	b.n	8005066 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005014:	893b      	ldrh	r3, [r7, #8]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]
 800501e:	e021      	b.n	8005064 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005020:	893b      	ldrh	r3, [r7, #8]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	b29b      	uxth	r3, r3
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	6a39      	ldr	r1, [r7, #32]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fa20 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	2b04      	cmp	r3, #4
 8005044:	d107      	bne.n	8005056 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005054:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e005      	b.n	8005066 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800505a:	893b      	ldrh	r3, [r7, #8]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	00010002 	.word	0x00010002

08005074 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	4608      	mov	r0, r1
 800507e:	4611      	mov	r1, r2
 8005080:	461a      	mov	r2, r3
 8005082:	4603      	mov	r3, r0
 8005084:	817b      	strh	r3, [r7, #10]
 8005086:	460b      	mov	r3, r1
 8005088:	813b      	strh	r3, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800509c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f8c2 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d4:	d103      	bne.n	80050de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0aa      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	4952      	ldr	r1, [pc, #328]	@ (8005240 <I2C_RequestMemoryRead+0x1cc>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f91d 	bl	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e097      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005120:	6a39      	ldr	r1, [r7, #32]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f9a8 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	2b04      	cmp	r3, #4
 8005134:	d107      	bne.n	8005146 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e076      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005150:	893b      	ldrh	r3, [r7, #8]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]
 800515a:	e021      	b.n	80051a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800516a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516c:	6a39      	ldr	r1, [r7, #32]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f982 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	2b04      	cmp	r3, #4
 8005180:	d107      	bne.n	8005192 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e050      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a2:	6a39      	ldr	r1, [r7, #32]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f967 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d107      	bne.n	80051c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e035      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f82b 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005202:	d103      	bne.n	800520c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e013      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005210:	897b      	ldrh	r3, [r7, #10]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	4906      	ldr	r1, [pc, #24]	@ (8005240 <I2C_RequestMemoryRead+0x1cc>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f886 	bl	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	00010002 	.word	0x00010002

08005244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005254:	e048      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d044      	beq.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fe fb07 	bl	8003870 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d139      	bne.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10d      	bne.n	800529a <I2C_WaitOnFlagUntilTimeout+0x56>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	43da      	mvns	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	e00c      	b.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	43da      	mvns	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d116      	bne.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e023      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10d      	bne.n	800530e <I2C_WaitOnFlagUntilTimeout+0xca>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	43da      	mvns	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	e00c      	b.n	8005328 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	43da      	mvns	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d093      	beq.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005346:	e071      	b.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005356:	d123      	bne.n	80053a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005366:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	f043 0204 	orr.w	r2, r3, #4
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e067      	b.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d041      	beq.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fe fa62 	bl	8003870 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d136      	bne.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10c      	bne.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	e00b      	b.n	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	43da      	mvns	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e021      	b.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10c      	bne.n	8005450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	43da      	mvns	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e00b      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	f47f af6d 	bne.w	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005484:	e034      	b.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8e3 	bl	8005652 <I2C_IsAcknowledgeFailed>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e034      	b.n	8005500 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d028      	beq.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fe f9e7 	bl	8003870 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11d      	bne.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	2b80      	cmp	r3, #128	@ 0x80
 80054c0:	d016      	beq.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e007      	b.n	8005500 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fa:	2b80      	cmp	r3, #128	@ 0x80
 80054fc:	d1c3      	bne.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005514:	e034      	b.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f89b 	bl	8005652 <I2C_IsAcknowledgeFailed>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e034      	b.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d028      	beq.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fe f99f 	bl	8003870 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d11d      	bne.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d016      	beq.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e007      	b.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d1c3      	bne.n	8005516 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a4:	e049      	b.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d119      	bne.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e030      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7fe f942 	bl	8003870 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d302      	bcc.n	80055fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11d      	bne.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d016      	beq.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f043 0220 	orr.w	r2, r3, #32
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e007      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	d1ae      	bne.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005668:	d11b      	bne.n	80056a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005672:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e128      	b.n	8005914 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a90      	ldr	r2, [pc, #576]	@ (800591c <HAL_I2S_Init+0x26c>)
 80056da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fd fde3 	bl	80032a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056f8:	f023 030f 	bic.w	r3, r3, #15
 80056fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2202      	movs	r2, #2
 8005704:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d060      	beq.n	80057d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005716:	2310      	movs	r3, #16
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	e001      	b.n	8005720 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800571c:	2320      	movs	r3, #32
 800571e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b20      	cmp	r3, #32
 8005726:	d802      	bhi.n	800572e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800572e:	2001      	movs	r0, #1
 8005730:	f001 fbd4 	bl	8006edc <HAL_RCCEx_GetPeriphCLKFreq>
 8005734:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573e:	d125      	bne.n	800578c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d010      	beq.n	800576a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	3305      	adds	r3, #5
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	e01f      	b.n	80057aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	fbb2 f2f3 	udiv	r2, r2, r3
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	fbb2 f3f3 	udiv	r3, r2, r3
 8005786:	3305      	adds	r3, #5
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e00e      	b.n	80057aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	fbb2 f2f3 	udiv	r2, r2, r3
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	3305      	adds	r3, #5
 80057a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4a5c      	ldr	r2, [pc, #368]	@ (8005920 <HAL_I2S_Init+0x270>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	08db      	lsrs	r3, r3, #3
 80057b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e003      	b.n	80057d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80057d0:	2302      	movs	r3, #2
 80057d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d902      	bls.n	80057e4 <HAL_I2S_Init+0x134>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2bff      	cmp	r3, #255	@ 0xff
 80057e2:	d907      	bls.n	80057f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	f043 0210 	orr.w	r2, r3, #16
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e08f      	b.n	8005914 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	ea42 0103 	orr.w	r1, r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	430a      	orrs	r2, r1
 8005806:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005812:	f023 030f 	bic.w	r3, r3, #15
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6851      	ldr	r1, [r2, #4]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6892      	ldr	r2, [r2, #8]
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68d2      	ldr	r2, [r2, #12]
 8005824:	4311      	orrs	r1, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6992      	ldr	r2, [r2, #24]
 800582a:	430a      	orrs	r2, r1
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005836:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d161      	bne.n	8005904 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a38      	ldr	r2, [pc, #224]	@ (8005924 <HAL_I2S_Init+0x274>)
 8005844:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <HAL_I2S_Init+0x278>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_I2S_Init+0x1a4>
 8005850:	4b36      	ldr	r3, [pc, #216]	@ (800592c <HAL_I2S_Init+0x27c>)
 8005852:	e001      	b.n	8005858 <HAL_I2S_Init+0x1a8>
 8005854:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	4932      	ldr	r1, [pc, #200]	@ (8005928 <HAL_I2S_Init+0x278>)
 8005860:	428a      	cmp	r2, r1
 8005862:	d101      	bne.n	8005868 <HAL_I2S_Init+0x1b8>
 8005864:	4a31      	ldr	r2, [pc, #196]	@ (800592c <HAL_I2S_Init+0x27c>)
 8005866:	e001      	b.n	800586c <HAL_I2S_Init+0x1bc>
 8005868:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800586c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005870:	f023 030f 	bic.w	r3, r3, #15
 8005874:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2b      	ldr	r2, [pc, #172]	@ (8005928 <HAL_I2S_Init+0x278>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <HAL_I2S_Init+0x1d4>
 8005880:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <HAL_I2S_Init+0x27c>)
 8005882:	e001      	b.n	8005888 <HAL_I2S_Init+0x1d8>
 8005884:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005888:	2202      	movs	r2, #2
 800588a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a25      	ldr	r2, [pc, #148]	@ (8005928 <HAL_I2S_Init+0x278>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <HAL_I2S_Init+0x1ea>
 8005896:	4b25      	ldr	r3, [pc, #148]	@ (800592c <HAL_I2S_Init+0x27c>)
 8005898:	e001      	b.n	800589e <HAL_I2S_Init+0x1ee>
 800589a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058aa:	d003      	beq.n	80058b4 <HAL_I2S_Init+0x204>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d103      	bne.n	80058bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80058b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e001      	b.n	80058c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058d4:	4313      	orrs	r3, r2
 80058d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058de:	4313      	orrs	r3, r2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	897b      	ldrh	r3, [r7, #10]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005928 <HAL_I2S_Init+0x278>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_I2S_Init+0x24c>
 80058f8:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <HAL_I2S_Init+0x27c>)
 80058fa:	e001      	b.n	8005900 <HAL_I2S_Init+0x250>
 80058fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005900:	897a      	ldrh	r2, [r7, #10]
 8005902:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	08005dc7 	.word	0x08005dc7
 8005920:	cccccccd 	.word	0xcccccccd
 8005924:	08005edd 	.word	0x08005edd
 8005928:	40003800 	.word	0x40003800
 800592c:	40003400 	.word	0x40003400

08005930 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_I2S_Transmit_DMA+0x1a>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e08a      	b.n	8005a64 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
 800595c:	e082      	b.n	8005a64 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_I2S_Transmit_DMA+0x3e>
 800596a:	2302      	movs	r3, #2
 800596c:	e07a      	b.n	8005a64 <HAL_I2S_Transmit_DMA+0x134>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2203      	movs	r2, #3
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d002      	beq.n	80059a2 <HAL_I2S_Transmit_DMA+0x72>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d10a      	bne.n	80059b8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059b6:	e005      	b.n	80059c4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	4a28      	ldr	r2, [pc, #160]	@ (8005a6c <HAL_I2S_Transmit_DMA+0x13c>)
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <HAL_I2S_Transmit_DMA+0x140>)
 80059d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	4a26      	ldr	r2, [pc, #152]	@ (8005a74 <HAL_I2S_Transmit_DMA+0x144>)
 80059da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059e4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059ec:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059f4:	f7fe f9a6 	bl	8003d44 <HAL_DMA_Start_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00f      	beq.n	8005a1e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f043 0208 	orr.w	r2, r3, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e022      	b.n	8005a64 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d107      	bne.n	8005a44 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0202 	orr.w	r2, r2, #2
 8005a42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a60:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	08005c47 	.word	0x08005c47
 8005a70:	08005c05 	.word	0x08005c05
 8005a74:	08005cc1 	.word	0x08005cc1

08005a78 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_I2S_Receive_DMA+0x1a>
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e09d      	b.n	8005bd2 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e095      	b.n	8005bd2 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2S_Receive_DMA+0x3e>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e08d      	b.n	8005bd2 <HAL_I2S_Receive_DMA+0x15a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d002      	beq.n	8005aea <HAL_I2S_Receive_DMA+0x72>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d10a      	bne.n	8005b00 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	865a      	strh	r2, [r3, #50]	@ 0x32
 8005afe:	e005      	b.n	8005b0c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	4a32      	ldr	r2, [pc, #200]	@ (8005bdc <HAL_I2S_Receive_DMA+0x164>)
 8005b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	4a31      	ldr	r2, [pc, #196]	@ (8005be0 <HAL_I2S_Receive_DMA+0x168>)
 8005b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b20:	4a30      	ldr	r2, [pc, #192]	@ (8005be4 <HAL_I2S_Receive_DMA+0x16c>)
 8005b22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b32:	d10a      	bne.n	8005b4a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	4619      	mov	r1, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005b60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005b62:	f7fe f8ef 	bl	8003d44 <HAL_DMA_Start_IT>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00f      	beq.n	8005b8c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b70:	f043 0208 	orr.w	r2, r3, #8
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e022      	b.n	8005bd2 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d107      	bne.n	8005bb2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0201 	orr.w	r2, r2, #1
 8005bb0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bce:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	08005ca5 	.word	0x08005ca5
 8005be0:	08005c63 	.word	0x08005c63
 8005be4:	08005cc1 	.word	0x08005cc1

08005be8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(const I2S_HandleTypeDef *hi2s)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf6:	b2db      	uxtb	r3, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10e      	bne.n	8005c38 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0202 	bic.w	r2, r2, #2
 8005c28:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f001 ff1b 	bl	8007a74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f001 ff1f 	bl	8007a98 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0201 	bic.w	r2, r2, #1
 8005c86:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7fd fa20 	bl	80030dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7fd fa02 	bl	80030bc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0203 	bic.w	r2, r2, #3
 8005cdc:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	f043 0208 	orr.w	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7fd f9fc 	bl	80030fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	1c9a      	adds	r2, r3, #2
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fe8a 	bl	8007a74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7a:	b292      	uxth	r2, r2
 8005d7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10e      	bne.n	8005dbe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fd f98f 	bl	80030dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d13a      	bne.n	8005e58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d109      	bne.n	8005e00 <I2S_IRQHandler+0x3a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df6:	2b40      	cmp	r3, #64	@ 0x40
 8005df8:	d102      	bne.n	8005e00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff ffb4 	bl	8005d68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d126      	bne.n	8005e58 <I2S_IRQHandler+0x92>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d11f      	bne.n	8005e58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4a:	f043 0202 	orr.w	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fd f952 	bl	80030fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d136      	bne.n	8005ed2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d109      	bne.n	8005e82 <I2S_IRQHandler+0xbc>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b80      	cmp	r3, #128	@ 0x80
 8005e7a:	d102      	bne.n	8005e82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff45 	bl	8005d0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d122      	bne.n	8005ed2 <I2S_IRQHandler+0x10c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d11b      	bne.n	8005ed2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ea8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec4:	f043 0204 	orr.w	r2, r3, #4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fd f915 	bl	80030fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a92      	ldr	r2, [pc, #584]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ef6:	4b92      	ldr	r3, [pc, #584]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef8:	e001      	b.n	8005efe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005efa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a8b      	ldr	r2, [pc, #556]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d101      	bne.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005f14:	4b8a      	ldr	r3, [pc, #552]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f16:	e001      	b.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f28:	d004      	beq.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 8099 	bne.w	8006066 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d107      	bne.n	8005f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f925 	bl	8006198 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d107      	bne.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9c8 	bl	80062f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d13a      	bne.n	8005fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d035      	beq.n	8005fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6e      	ldr	r2, [pc, #440]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f86:	4b6e      	ldr	r3, [pc, #440]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f88:	e001      	b.n	8005f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4969      	ldr	r1, [pc, #420]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f96:	428b      	cmp	r3, r1
 8005f98:	d101      	bne.n	8005f9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f9a:	4b69      	ldr	r3, [pc, #420]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f9c:	e001      	b.n	8005fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fa2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fa6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f043 0202 	orr.w	r2, r3, #2
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fd f88a 	bl	80030fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	f040 80c3 	bne.w	800617a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80bd 	beq.w	800617a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800600e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a49      	ldr	r2, [pc, #292]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800601a:	4b49      	ldr	r3, [pc, #292]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800601c:	e001      	b.n	8006022 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800601e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4944      	ldr	r1, [pc, #272]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800602a:	428b      	cmp	r3, r1
 800602c:	d101      	bne.n	8006032 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800602e:	4b44      	ldr	r3, [pc, #272]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006030:	e001      	b.n	8006036 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006032:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006036:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800603a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006056:	f043 0204 	orr.w	r2, r3, #4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fd f84c 	bl	80030fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006064:	e089      	b.n	800617a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	d107      	bne.n	8006080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8be 	bl	80061fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d107      	bne.n	800609a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8fd 	bl	8006294 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a0:	2b40      	cmp	r3, #64	@ 0x40
 80060a2:	d12f      	bne.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02a      	beq.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1e      	ldr	r2, [pc, #120]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d101      	bne.n	80060cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ca:	e001      	b.n	80060d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4919      	ldr	r1, [pc, #100]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060d8:	428b      	cmp	r3, r1
 80060da:	d101      	bne.n	80060e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060dc:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060de:	e001      	b.n	80060e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f6:	f043 0202 	orr.w	r2, r3, #2
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fc fffc 	bl	80030fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b08      	cmp	r3, #8
 800610c:	d136      	bne.n	800617c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d031      	beq.n	800617c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a07      	ldr	r2, [pc, #28]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006122:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006124:	e001      	b.n	800612a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4902      	ldr	r1, [pc, #8]	@ (800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006132:	428b      	cmp	r3, r1
 8006134:	d106      	bne.n	8006144 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006136:	4b02      	ldr	r3, [pc, #8]	@ (8006140 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006138:	e006      	b.n	8006148 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800613a:	bf00      	nop
 800613c:	40003800 	.word	0x40003800
 8006140:	40003400 	.word	0x40003400
 8006144:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006148:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800614c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800615c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	f043 0204 	orr.w	r2, r3, #4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc ffc2 	bl	80030fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006178:	e000      	b.n	800617c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800617a:	bf00      	nop
}
 800617c:	bf00      	nop
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	1c99      	adds	r1, r3, #2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80061aa:	881a      	ldrh	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d113      	bne.n	80061f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ffc9 	bl	8006184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	1c99      	adds	r1, r3, #2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6251      	str	r1, [r2, #36]	@ 0x24
 800620e:	8819      	ldrh	r1, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1d      	ldr	r2, [pc, #116]	@ (800628c <I2SEx_TxISR_I2SExt+0x90>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <I2SEx_TxISR_I2SExt+0x22>
 800621a:	4b1d      	ldr	r3, [pc, #116]	@ (8006290 <I2SEx_TxISR_I2SExt+0x94>)
 800621c:	e001      	b.n	8006222 <I2SEx_TxISR_I2SExt+0x26>
 800621e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006222:	460a      	mov	r2, r1
 8006224:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d121      	bne.n	8006282 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a12      	ldr	r2, [pc, #72]	@ (800628c <I2SEx_TxISR_I2SExt+0x90>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d101      	bne.n	800624c <I2SEx_TxISR_I2SExt+0x50>
 8006248:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <I2SEx_TxISR_I2SExt+0x94>)
 800624a:	e001      	b.n	8006250 <I2SEx_TxISR_I2SExt+0x54>
 800624c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	490d      	ldr	r1, [pc, #52]	@ (800628c <I2SEx_TxISR_I2SExt+0x90>)
 8006258:	428b      	cmp	r3, r1
 800625a:	d101      	bne.n	8006260 <I2SEx_TxISR_I2SExt+0x64>
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <I2SEx_TxISR_I2SExt+0x94>)
 800625e:	e001      	b.n	8006264 <I2SEx_TxISR_I2SExt+0x68>
 8006260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006264:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006268:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff81 	bl	8006184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40003800 	.word	0x40003800
 8006290:	40003400 	.word	0x40003400

08006294 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68d8      	ldr	r0, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	1c99      	adds	r1, r3, #2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062ac:	b282      	uxth	r2, r0
 80062ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d113      	bne.n	80062f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff ff4a 	bl	8006184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a20      	ldr	r2, [pc, #128]	@ (8006388 <I2SEx_RxISR_I2SExt+0x90>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d101      	bne.n	800630e <I2SEx_RxISR_I2SExt+0x16>
 800630a:	4b20      	ldr	r3, [pc, #128]	@ (800638c <I2SEx_RxISR_I2SExt+0x94>)
 800630c:	e001      	b.n	8006312 <I2SEx_RxISR_I2SExt+0x1a>
 800630e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006312:	68d8      	ldr	r0, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	1c99      	adds	r1, r3, #2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800631e:	b282      	uxth	r2, r0
 8006320:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d121      	bne.n	800637e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <I2SEx_RxISR_I2SExt+0x90>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d101      	bne.n	8006348 <I2SEx_RxISR_I2SExt+0x50>
 8006344:	4b11      	ldr	r3, [pc, #68]	@ (800638c <I2SEx_RxISR_I2SExt+0x94>)
 8006346:	e001      	b.n	800634c <I2SEx_RxISR_I2SExt+0x54>
 8006348:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	490d      	ldr	r1, [pc, #52]	@ (8006388 <I2SEx_RxISR_I2SExt+0x90>)
 8006354:	428b      	cmp	r3, r1
 8006356:	d101      	bne.n	800635c <I2SEx_RxISR_I2SExt+0x64>
 8006358:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <I2SEx_RxISR_I2SExt+0x94>)
 800635a:	e001      	b.n	8006360 <I2SEx_RxISR_I2SExt+0x68>
 800635c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006360:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006364:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d106      	bne.n	800637e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ff03 	bl	8006184 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40003800 	.word	0x40003800
 800638c:	40003400 	.word	0x40003400

08006390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e267      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d075      	beq.n	800649a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063ae:	4b88      	ldr	r3, [pc, #544]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d00c      	beq.n	80063d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ba:	4b85      	ldr	r3, [pc, #532]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d112      	bne.n	80063ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063c6:	4b82      	ldr	r3, [pc, #520]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063d2:	d10b      	bne.n	80063ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d4:	4b7e      	ldr	r3, [pc, #504]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05b      	beq.n	8006498 <HAL_RCC_OscConfig+0x108>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d157      	bne.n	8006498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e242      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f4:	d106      	bne.n	8006404 <HAL_RCC_OscConfig+0x74>
 80063f6:	4b76      	ldr	r3, [pc, #472]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a75      	ldr	r2, [pc, #468]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80063fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e01d      	b.n	8006440 <HAL_RCC_OscConfig+0xb0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800640c:	d10c      	bne.n	8006428 <HAL_RCC_OscConfig+0x98>
 800640e:	4b70      	ldr	r3, [pc, #448]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6f      	ldr	r2, [pc, #444]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b6d      	ldr	r3, [pc, #436]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6c      	ldr	r2, [pc, #432]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e00b      	b.n	8006440 <HAL_RCC_OscConfig+0xb0>
 8006428:	4b69      	ldr	r3, [pc, #420]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a68      	ldr	r2, [pc, #416]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800642e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	4b66      	ldr	r3, [pc, #408]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a65      	ldr	r2, [pc, #404]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800643a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800643e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d013      	beq.n	8006470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006448:	f7fd fa12 	bl	8003870 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006450:	f7fd fa0e 	bl	8003870 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b64      	cmp	r3, #100	@ 0x64
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e207      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006462:	4b5b      	ldr	r3, [pc, #364]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0xc0>
 800646e:	e014      	b.n	800649a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fd f9fe 	bl	8003870 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006478:	f7fd f9fa 	bl	8003870 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b64      	cmp	r3, #100	@ 0x64
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e1f3      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800648a:	4b51      	ldr	r3, [pc, #324]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0xe8>
 8006496:	e000      	b.n	800649a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d063      	beq.n	800656e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064a6:	4b4a      	ldr	r3, [pc, #296]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 030c 	and.w	r3, r3, #12
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b2:	4b47      	ldr	r3, [pc, #284]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d11c      	bne.n	80064f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064be:	4b44      	ldr	r3, [pc, #272]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d116      	bne.n	80064f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ca:	4b41      	ldr	r3, [pc, #260]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <HAL_RCC_OscConfig+0x152>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d001      	beq.n	80064e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e1c7      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e2:	4b3b      	ldr	r3, [pc, #236]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4937      	ldr	r1, [pc, #220]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f6:	e03a      	b.n	800656e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d020      	beq.n	8006542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006500:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <HAL_RCC_OscConfig+0x244>)
 8006502:	2201      	movs	r2, #1
 8006504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006506:	f7fd f9b3 	bl	8003870 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650c:	e008      	b.n	8006520 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650e:	f7fd f9af 	bl	8003870 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e1a8      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006520:	4b2b      	ldr	r3, [pc, #172]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652c:	4b28      	ldr	r3, [pc, #160]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4925      	ldr	r1, [pc, #148]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]
 8006540:	e015      	b.n	800656e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006542:	4b24      	ldr	r3, [pc, #144]	@ (80065d4 <HAL_RCC_OscConfig+0x244>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fd f992 	bl	8003870 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006550:	f7fd f98e 	bl	8003870 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e187      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006562:	4b1b      	ldr	r3, [pc, #108]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d036      	beq.n	80065e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d016      	beq.n	80065b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <HAL_RCC_OscConfig+0x248>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006588:	f7fd f972 	bl	8003870 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006590:	f7fd f96e 	bl	8003870 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e167      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a2:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <HAL_RCC_OscConfig+0x240>)
 80065a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0x200>
 80065ae:	e01b      	b.n	80065e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065b0:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <HAL_RCC_OscConfig+0x248>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b6:	f7fd f95b 	bl	8003870 <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065bc:	e00e      	b.n	80065dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065be:	f7fd f957 	bl	8003870 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d907      	bls.n	80065dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e150      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
 80065d0:	40023800 	.word	0x40023800
 80065d4:	42470000 	.word	0x42470000
 80065d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065dc:	4b88      	ldr	r3, [pc, #544]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80065de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1ea      	bne.n	80065be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8097 	beq.w	8006724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065fa:	4b81      	ldr	r3, [pc, #516]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10f      	bne.n	8006626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	4b7d      	ldr	r3, [pc, #500]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	4a7c      	ldr	r2, [pc, #496]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006614:	6413      	str	r3, [r2, #64]	@ 0x40
 8006616:	4b7a      	ldr	r3, [pc, #488]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006626:	4b77      	ldr	r3, [pc, #476]	@ (8006804 <HAL_RCC_OscConfig+0x474>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d118      	bne.n	8006664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006632:	4b74      	ldr	r3, [pc, #464]	@ (8006804 <HAL_RCC_OscConfig+0x474>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a73      	ldr	r2, [pc, #460]	@ (8006804 <HAL_RCC_OscConfig+0x474>)
 8006638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800663e:	f7fd f917 	bl	8003870 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006646:	f7fd f913 	bl	8003870 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e10c      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	4b6a      	ldr	r3, [pc, #424]	@ (8006804 <HAL_RCC_OscConfig+0x474>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <HAL_RCC_OscConfig+0x2ea>
 800666c:	4b64      	ldr	r3, [pc, #400]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 800666e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006670:	4a63      	ldr	r2, [pc, #396]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	6713      	str	r3, [r2, #112]	@ 0x70
 8006678:	e01c      	b.n	80066b4 <HAL_RCC_OscConfig+0x324>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b05      	cmp	r3, #5
 8006680:	d10c      	bne.n	800669c <HAL_RCC_OscConfig+0x30c>
 8006682:	4b5f      	ldr	r3, [pc, #380]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	4a5e      	ldr	r2, [pc, #376]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006688:	f043 0304 	orr.w	r3, r3, #4
 800668c:	6713      	str	r3, [r2, #112]	@ 0x70
 800668e:	4b5c      	ldr	r3, [pc, #368]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	4a5b      	ldr	r2, [pc, #364]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	6713      	str	r3, [r2, #112]	@ 0x70
 800669a:	e00b      	b.n	80066b4 <HAL_RCC_OscConfig+0x324>
 800669c:	4b58      	ldr	r3, [pc, #352]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a0:	4a57      	ldr	r2, [pc, #348]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a8:	4b55      	ldr	r3, [pc, #340]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ac:	4a54      	ldr	r2, [pc, #336]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80066ae:	f023 0304 	bic.w	r3, r3, #4
 80066b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d015      	beq.n	80066e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066bc:	f7fd f8d8 	bl	8003870 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c2:	e00a      	b.n	80066da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c4:	f7fd f8d4 	bl	8003870 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e0cb      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066da:	4b49      	ldr	r3, [pc, #292]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0ee      	beq.n	80066c4 <HAL_RCC_OscConfig+0x334>
 80066e6:	e014      	b.n	8006712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e8:	f7fd f8c2 	bl	8003870 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ee:	e00a      	b.n	8006706 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f0:	f7fd f8be 	bl	8003870 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e0b5      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006706:	4b3e      	ldr	r3, [pc, #248]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ee      	bne.n	80066f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d105      	bne.n	8006724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006718:	4b39      	ldr	r3, [pc, #228]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	4a38      	ldr	r2, [pc, #224]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 800671e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80a1 	beq.w	8006870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800672e:	4b34      	ldr	r3, [pc, #208]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	2b08      	cmp	r3, #8
 8006738:	d05c      	beq.n	80067f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d141      	bne.n	80067c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006742:	4b31      	ldr	r3, [pc, #196]	@ (8006808 <HAL_RCC_OscConfig+0x478>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fd f892 	bl	8003870 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006750:	f7fd f88e 	bl	8003870 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e087      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006762:	4b27      	ldr	r3, [pc, #156]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	3b01      	subs	r3, #1
 8006788:	041b      	lsls	r3, r3, #16
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	061b      	lsls	r3, r3, #24
 8006792:	491b      	ldr	r1, [pc, #108]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 8006794:	4313      	orrs	r3, r2
 8006796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006798:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <HAL_RCC_OscConfig+0x478>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679e:	f7fd f867 	bl	8003870 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a6:	f7fd f863 	bl	8003870 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e05c      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b8:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x416>
 80067c4:	e054      	b.n	8006870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c6:	4b10      	ldr	r3, [pc, #64]	@ (8006808 <HAL_RCC_OscConfig+0x478>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067cc:	f7fd f850 	bl	8003870 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fd f84c 	bl	8003870 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e045      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <HAL_RCC_OscConfig+0x470>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x444>
 80067f2:	e03d      	b.n	8006870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e038      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
 8006800:	40023800 	.word	0x40023800
 8006804:	40007000 	.word	0x40007000
 8006808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800680c:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <HAL_RCC_OscConfig+0x4ec>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d028      	beq.n	800686c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d121      	bne.n	800686c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d11a      	bne.n	800686c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800683c:	4013      	ands	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006844:	4293      	cmp	r3, r2
 8006846:	d111      	bne.n	800686c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	3b01      	subs	r3, #1
 8006856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d107      	bne.n	800686c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d001      	beq.n	8006870 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800

08006880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0cc      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4b68      	ldr	r3, [pc, #416]	@ (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d90c      	bls.n	80068bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b65      	ldr	r3, [pc, #404]	@ (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b63      	ldr	r3, [pc, #396]	@ (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0b8      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068d4:	4b59      	ldr	r3, [pc, #356]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4a58      	ldr	r2, [pc, #352]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068ec:	4b53      	ldr	r3, [pc, #332]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	4a52      	ldr	r2, [pc, #328]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f8:	4b50      	ldr	r3, [pc, #320]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	494d      	ldr	r1, [pc, #308]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	4313      	orrs	r3, r2
 8006908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d044      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d107      	bne.n	800692e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691e:	4b47      	ldr	r3, [pc, #284]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d119      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e07f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d003      	beq.n	800693e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693a:	2b03      	cmp	r3, #3
 800693c:	d107      	bne.n	800694e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e06f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e067      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695e:	4b37      	ldr	r3, [pc, #220]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4934      	ldr	r1, [pc, #208]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	4313      	orrs	r3, r2
 800696e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006970:	f7fc ff7e 	bl	8003870 <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	e00a      	b.n	800698e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006978:	f7fc ff7a 	bl	8003870 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e04f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	4b2b      	ldr	r3, [pc, #172]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 020c 	and.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d1eb      	bne.n	8006978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b25      	ldr	r3, [pc, #148]	@ (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d20c      	bcs.n	80069c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b22      	ldr	r3, [pc, #136]	@ (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b20      	ldr	r3, [pc, #128]	@ (8006a38 <HAL_RCC_ClockConfig+0x1b8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e032      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d4:	4b19      	ldr	r3, [pc, #100]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4916      	ldr	r1, [pc, #88]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069f2:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	490e      	ldr	r1, [pc, #56]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a06:	f000 f821 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	490a      	ldr	r1, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 8006a18:	5ccb      	ldrb	r3, [r1, r3]
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	4a09      	ldr	r2, [pc, #36]	@ (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a22:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <HAL_RCC_ClockConfig+0x1c8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fc fede 	bl	80037e8 <HAL_InitTick>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40023c00 	.word	0x40023c00
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	08008f1c 	.word	0x08008f1c
 8006a44:	20000438 	.word	0x20000438
 8006a48:	2000043c 	.word	0x2000043c

08006a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a50:	b094      	sub	sp, #80	@ 0x50
 8006a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a64:	4b79      	ldr	r3, [pc, #484]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d00d      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x40>
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	f200 80e1 	bhi.w	8006c38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x34>
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a7e:	e0db      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a80:	4b73      	ldr	r3, [pc, #460]	@ (8006c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a84:	e0db      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a86:	4b73      	ldr	r3, [pc, #460]	@ (8006c54 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a8a:	e0d8      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a96:	4b6d      	ldr	r3, [pc, #436]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d063      	beq.n	8006b6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f04f 0100 	mov.w	r1, #0
 8006aca:	0159      	lsls	r1, r3, #5
 8006acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ad0:	0150      	lsls	r0, r2, #5
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	1a51      	subs	r1, r2, r1
 8006ada:	6139      	str	r1, [r7, #16]
 8006adc:	4629      	mov	r1, r5
 8006ade:	eb63 0301 	sbc.w	r3, r3, r1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006af0:	4659      	mov	r1, fp
 8006af2:	018b      	lsls	r3, r1, #6
 8006af4:	4651      	mov	r1, sl
 8006af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006afa:	4651      	mov	r1, sl
 8006afc:	018a      	lsls	r2, r1, #6
 8006afe:	4651      	mov	r1, sl
 8006b00:	ebb2 0801 	subs.w	r8, r2, r1
 8006b04:	4659      	mov	r1, fp
 8006b06:	eb63 0901 	sbc.w	r9, r3, r1
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b1e:	4690      	mov	r8, r2
 8006b20:	4699      	mov	r9, r3
 8006b22:	4623      	mov	r3, r4
 8006b24:	eb18 0303 	adds.w	r3, r8, r3
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	eb49 0303 	adc.w	r3, r9, r3
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b3e:	4629      	mov	r1, r5
 8006b40:	024b      	lsls	r3, r1, #9
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b48:	4621      	mov	r1, r4
 8006b4a:	024a      	lsls	r2, r1, #9
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b52:	2200      	movs	r2, #0
 8006b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b5c:	f7fb fac0 	bl	80020e0 <__aeabi_uldivmod>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4613      	mov	r3, r2
 8006b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b68:	e058      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b6a:	4b38      	ldr	r3, [pc, #224]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	2200      	movs	r2, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	4611      	mov	r1, r2
 8006b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	f04f 0000 	mov.w	r0, #0
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	0159      	lsls	r1, r3, #5
 8006b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b96:	0150      	lsls	r0, r2, #5
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bbc:	ebb2 040a 	subs.w	r4, r2, sl
 8006bc0:	eb63 050b 	sbc.w	r5, r3, fp
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	00eb      	lsls	r3, r5, #3
 8006bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bd2:	00e2      	lsls	r2, r4, #3
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	4643      	mov	r3, r8
 8006bda:	18e3      	adds	r3, r4, r3
 8006bdc:	603b      	str	r3, [r7, #0]
 8006bde:	464b      	mov	r3, r9
 8006be0:	eb45 0303 	adc.w	r3, r5, r3
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	028b      	lsls	r3, r1, #10
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	028a      	lsls	r2, r1, #10
 8006c00:	4610      	mov	r0, r2
 8006c02:	4619      	mov	r1, r3
 8006c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c06:	2200      	movs	r2, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	61fa      	str	r2, [r7, #28]
 8006c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c10:	f7fb fa66 	bl	80020e0 <__aeabi_uldivmod>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4613      	mov	r3, r2
 8006c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	0c1b      	lsrs	r3, r3, #16
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	3301      	adds	r3, #1
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c36:	e002      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c38:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3750      	adds	r7, #80	@ 0x50
 8006c44:	46bd      	mov	sp, r7
 8006c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	00f42400 	.word	0x00f42400
 8006c54:	007a1200 	.word	0x007a1200

08006c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c5c:	4b03      	ldr	r3, [pc, #12]	@ (8006c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000438 	.word	0x20000438

08006c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c74:	f7ff fff0 	bl	8006c58 <HAL_RCC_GetHCLKFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	0a9b      	lsrs	r3, r3, #10
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4903      	ldr	r1, [pc, #12]	@ (8006c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40023800 	.word	0x40023800
 8006c94:	08008f2c 	.word	0x08008f2c

08006c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c9c:	f7ff ffdc 	bl	8006c58 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	0b5b      	lsrs	r3, r3, #13
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4903      	ldr	r1, [pc, #12]	@ (8006cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	08008f2c 	.word	0x08008f2c

08006cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d035      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ce8:	4b62      	ldr	r3, [pc, #392]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cee:	f7fc fdbf 	bl	8003870 <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cf6:	f7fc fdbb 	bl	8003870 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e0b0      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d08:	4b5b      	ldr	r3, [pc, #364]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f0      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	019a      	lsls	r2, r3, #6
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	071b      	lsls	r3, r3, #28
 8006d20:	4955      	ldr	r1, [pc, #340]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d28:	4b52      	ldr	r3, [pc, #328]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d2e:	f7fc fd9f 	bl	8003870 <HAL_GetTick>
 8006d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d34:	e008      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d36:	f7fc fd9b 	bl	8003870 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e090      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d48:	4b4b      	ldr	r3, [pc, #300]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0f0      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8083 	beq.w	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	4b44      	ldr	r3, [pc, #272]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	4a43      	ldr	r2, [pc, #268]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d72:	4b41      	ldr	r3, [pc, #260]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a3e      	ldr	r2, [pc, #248]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d8a:	f7fc fd71 	bl	8003870 <HAL_GetTick>
 8006d8e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d90:	e008      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d92:	f7fc fd6d 	bl	8003870 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e062      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006da4:	4b35      	ldr	r3, [pc, #212]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006db0:	4b31      	ldr	r3, [pc, #196]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02f      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d028      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dce:	4b2a      	ldr	r3, [pc, #168]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dd8:	4b29      	ldr	r3, [pc, #164]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dde:	4b28      	ldr	r3, [pc, #160]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006de4:	4a24      	ldr	r2, [pc, #144]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dea:	4b23      	ldr	r3, [pc, #140]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d114      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006df6:	f7fc fd3b 	bl	8003870 <HAL_GetTick>
 8006dfa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfc:	e00a      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7fc fd37 	bl	8003870 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e02a      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e14:	4b18      	ldr	r3, [pc, #96]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0ee      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e2c:	d10d      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e2e:	4b12      	ldr	r3, [pc, #72]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e42:	490d      	ldr	r1, [pc, #52]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	608b      	str	r3, [r1, #8]
 8006e48:	e005      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e50:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e54:	6093      	str	r3, [r2, #8]
 8006e56:	4b08      	ldr	r3, [pc, #32]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e62:	4905      	ldr	r1, [pc, #20]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	42470068 	.word	0x42470068
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	40007000 	.word	0x40007000
 8006e80:	42470e40 	.word	0x42470e40

08006e84 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006e92:	4b11      	ldr	r3, [pc, #68]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ea8:	0f1b      	lsrs	r3, r3, #28
 8006eaa:	f003 0207 	and.w	r2, r3, #7
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006eb2:	4b09      	ldr	r3, [pc, #36]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006eba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40023800 	.word	0x40023800

08006edc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d13f      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006efa:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f02:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d006      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f10:	d12f      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f12:	4b1f      	ldr	r3, [pc, #124]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f14:	617b      	str	r3, [r7, #20]
          break;
 8006f16:	e02f      	b.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f18:	4b1c      	ldr	r3, [pc, #112]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f24:	d108      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f26:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f2e:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	e007      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f38:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f40:	4a15      	ldr	r2, [pc, #84]	@ (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f48:	4b10      	ldr	r3, [pc, #64]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4e:	099b      	lsrs	r3, r3, #6
 8006f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f62:	0f1b      	lsrs	r3, r3, #28
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	617b      	str	r3, [r7, #20]
          break;
 8006f70:	e002      	b.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
          break;
 8006f76:	bf00      	nop
        }
      }
      break;
 8006f78:	e000      	b.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006f7a:	bf00      	nop
    }
  }
  return frequency;
 8006f7c:	697b      	ldr	r3, [r7, #20]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	00bb8000 	.word	0x00bb8000
 8006f94:	007a1200 	.word	0x007a1200
 8006f98:	00f42400 	.word	0x00f42400

08006f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e042      	b.n	8007034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fc fab4 	bl	8003530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	@ 0x24
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f9eb 	bl	80073bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695a      	ldr	r2, [r3, #20]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08c      	sub	sp, #48	@ 0x30
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b20      	cmp	r3, #32
 8007054:	d162      	bne.n	800711c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_UART_Transmit_DMA+0x26>
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e05b      	b.n	800711e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	88fa      	ldrh	r2, [r7, #6]
 8007076:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2221      	movs	r2, #33	@ 0x21
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	4a27      	ldr	r2, [pc, #156]	@ (8007128 <HAL_UART_Transmit_DMA+0xec>)
 800708c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	4a26      	ldr	r2, [pc, #152]	@ (800712c <HAL_UART_Transmit_DMA+0xf0>)
 8007094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	4a25      	ldr	r2, [pc, #148]	@ (8007130 <HAL_UART_Transmit_DMA+0xf4>)
 800709c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	2200      	movs	r2, #0
 80070a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3304      	adds	r3, #4
 80070ba:	461a      	mov	r2, r3
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	f7fc fe41 	bl	8003d44 <HAL_DMA_Start_IT>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2210      	movs	r2, #16
 80070cc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e021      	b.n	800711e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	617b      	str	r3, [r7, #20]
   return(result);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3314      	adds	r3, #20
 8007102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007104:	627a      	str	r2, [r7, #36]	@ 0x24
 8007106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	61fb      	str	r3, [r7, #28]
   return(result);
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	e000      	b.n	800711e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
  }
}
 800711e:	4618      	mov	r0, r3
 8007120:	3730      	adds	r7, #48	@ 0x30
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	0800715d 	.word	0x0800715d
 800712c:	080071f7 	.word	0x080071f7
 8007130:	08007213 	.word	0x08007213

08007134 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b090      	sub	sp, #64	@ 0x40
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d137      	bne.n	80071e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717a:	2200      	movs	r2, #0
 800717c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3314      	adds	r3, #20
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	623b      	str	r3, [r7, #32]
   return(result);
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800719e:	633a      	str	r2, [r7, #48]	@ 0x30
 80071a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e5      	bne.n	800717e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071d2:	61fa      	str	r2, [r7, #28]
 80071d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	69b9      	ldr	r1, [r7, #24]
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	617b      	str	r3, [r7, #20]
   return(result);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071e6:	e002      	b.n	80071ee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071ea:	f7fb ffaf 	bl	800314c <HAL_UART_TxCpltCallback>
}
 80071ee:	bf00      	nop
 80071f0:	3740      	adds	r7, #64	@ 0x40
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007202:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff ff95 	bl	8007134 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722e:	2b80      	cmp	r3, #128	@ 0x80
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b21      	cmp	r3, #33	@ 0x21
 8007244:	d108      	bne.n	8007258 <UART_DMAError+0x46>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007252:	68b8      	ldr	r0, [r7, #8]
 8007254:	f000 f827 	bl	80072a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007262:	2b40      	cmp	r3, #64	@ 0x40
 8007264:	bf0c      	ite	eq
 8007266:	2301      	moveq	r3, #1
 8007268:	2300      	movne	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b22      	cmp	r3, #34	@ 0x22
 8007278:	d108      	bne.n	800728c <UART_DMAError+0x7a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007286:	68b8      	ldr	r0, [r7, #8]
 8007288:	f000 f835 	bl	80072f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007290:	f043 0210 	orr.w	r2, r3, #16
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f7ff ff55 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b089      	sub	sp, #36	@ 0x24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	330c      	adds	r3, #12
 80072b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	330c      	adds	r3, #12
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	61ba      	str	r2, [r7, #24]
 80072d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	613b      	str	r3, [r7, #16]
   return(result);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e5      	bne.n	80072ae <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80072ea:	bf00      	nop
 80072ec:	3724      	adds	r7, #36	@ 0x24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b095      	sub	sp, #84	@ 0x54
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800731e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e5      	bne.n	80072fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	61fb      	str	r3, [r7, #28]
   return(result);
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	2b01      	cmp	r3, #1
 800736c:	d119      	bne.n	80073a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	60bb      	str	r3, [r7, #8]
   return(result);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f023 0310 	bic.w	r3, r3, #16
 8007384:	647b      	str	r3, [r7, #68]	@ 0x44
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800738e:	61ba      	str	r2, [r7, #24]
 8007390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	613b      	str	r3, [r7, #16]
   return(result);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80073b0:	bf00      	nop
 80073b2:	3754      	adds	r7, #84	@ 0x54
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c0:	b0c0      	sub	sp, #256	@ 0x100
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d8:	68d9      	ldr	r1, [r3, #12]
 80073da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	ea40 0301 	orr.w	r3, r0, r1
 80073e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007414:	f021 010c 	bic.w	r1, r1, #12
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007422:	430b      	orrs	r3, r1
 8007424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007436:	6999      	ldr	r1, [r3, #24]
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	ea40 0301 	orr.w	r3, r0, r1
 8007442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b8f      	ldr	r3, [pc, #572]	@ (8007688 <UART_SetConfig+0x2cc>)
 800744c:	429a      	cmp	r2, r3
 800744e:	d005      	beq.n	800745c <UART_SetConfig+0xa0>
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b8d      	ldr	r3, [pc, #564]	@ (800768c <UART_SetConfig+0x2d0>)
 8007458:	429a      	cmp	r2, r3
 800745a:	d104      	bne.n	8007466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800745c:	f7ff fc1c 	bl	8006c98 <HAL_RCC_GetPCLK2Freq>
 8007460:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007464:	e003      	b.n	800746e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007466:	f7ff fc03 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 800746a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007478:	f040 810c 	bne.w	8007694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800747c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007480:	2200      	movs	r2, #0
 8007482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007486:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800748a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800748e:	4622      	mov	r2, r4
 8007490:	462b      	mov	r3, r5
 8007492:	1891      	adds	r1, r2, r2
 8007494:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007496:	415b      	adcs	r3, r3
 8007498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800749a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800749e:	4621      	mov	r1, r4
 80074a0:	eb12 0801 	adds.w	r8, r2, r1
 80074a4:	4629      	mov	r1, r5
 80074a6:	eb43 0901 	adc.w	r9, r3, r1
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074be:	4690      	mov	r8, r2
 80074c0:	4699      	mov	r9, r3
 80074c2:	4623      	mov	r3, r4
 80074c4:	eb18 0303 	adds.w	r3, r8, r3
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074cc:	462b      	mov	r3, r5
 80074ce:	eb49 0303 	adc.w	r3, r9, r3
 80074d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074ea:	460b      	mov	r3, r1
 80074ec:	18db      	adds	r3, r3, r3
 80074ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80074f0:	4613      	mov	r3, r2
 80074f2:	eb42 0303 	adc.w	r3, r2, r3
 80074f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007500:	f7fa fdee 	bl	80020e0 <__aeabi_uldivmod>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4b61      	ldr	r3, [pc, #388]	@ (8007690 <UART_SetConfig+0x2d4>)
 800750a:	fba3 2302 	umull	r2, r3, r3, r2
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	011c      	lsls	r4, r3, #4
 8007512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007516:	2200      	movs	r2, #0
 8007518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800751c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	1891      	adds	r1, r2, r2
 800752a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800752c:	415b      	adcs	r3, r3
 800752e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007534:	4641      	mov	r1, r8
 8007536:	eb12 0a01 	adds.w	sl, r2, r1
 800753a:	4649      	mov	r1, r9
 800753c:	eb43 0b01 	adc.w	fp, r3, r1
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800754c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007554:	4692      	mov	sl, r2
 8007556:	469b      	mov	fp, r3
 8007558:	4643      	mov	r3, r8
 800755a:	eb1a 0303 	adds.w	r3, sl, r3
 800755e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007562:	464b      	mov	r3, r9
 8007564:	eb4b 0303 	adc.w	r3, fp, r3
 8007568:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007578:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800757c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007580:	460b      	mov	r3, r1
 8007582:	18db      	adds	r3, r3, r3
 8007584:	643b      	str	r3, [r7, #64]	@ 0x40
 8007586:	4613      	mov	r3, r2
 8007588:	eb42 0303 	adc.w	r3, r2, r3
 800758c:	647b      	str	r3, [r7, #68]	@ 0x44
 800758e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007596:	f7fa fda3 	bl	80020e0 <__aeabi_uldivmod>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007690 <UART_SetConfig+0x2d4>)
 80075a2:	fba3 2301 	umull	r2, r3, r3, r1
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	2264      	movs	r2, #100	@ 0x64
 80075aa:	fb02 f303 	mul.w	r3, r2, r3
 80075ae:	1acb      	subs	r3, r1, r3
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075b6:	4b36      	ldr	r3, [pc, #216]	@ (8007690 <UART_SetConfig+0x2d4>)
 80075b8:	fba3 2302 	umull	r2, r3, r3, r2
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075c4:	441c      	add	r4, r3
 80075c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075d8:	4642      	mov	r2, r8
 80075da:	464b      	mov	r3, r9
 80075dc:	1891      	adds	r1, r2, r2
 80075de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075e0:	415b      	adcs	r3, r3
 80075e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075e8:	4641      	mov	r1, r8
 80075ea:	1851      	adds	r1, r2, r1
 80075ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80075ee:	4649      	mov	r1, r9
 80075f0:	414b      	adcs	r3, r1
 80075f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007600:	4659      	mov	r1, fp
 8007602:	00cb      	lsls	r3, r1, #3
 8007604:	4651      	mov	r1, sl
 8007606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800760a:	4651      	mov	r1, sl
 800760c:	00ca      	lsls	r2, r1, #3
 800760e:	4610      	mov	r0, r2
 8007610:	4619      	mov	r1, r3
 8007612:	4603      	mov	r3, r0
 8007614:	4642      	mov	r2, r8
 8007616:	189b      	adds	r3, r3, r2
 8007618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800761c:	464b      	mov	r3, r9
 800761e:	460a      	mov	r2, r1
 8007620:	eb42 0303 	adc.w	r3, r2, r3
 8007624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007634:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800763c:	460b      	mov	r3, r1
 800763e:	18db      	adds	r3, r3, r3
 8007640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007642:	4613      	mov	r3, r2
 8007644:	eb42 0303 	adc.w	r3, r2, r3
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800764a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800764e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007652:	f7fa fd45 	bl	80020e0 <__aeabi_uldivmod>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <UART_SetConfig+0x2d4>)
 800765c:	fba3 1302 	umull	r1, r3, r3, r2
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	2164      	movs	r1, #100	@ 0x64
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	3332      	adds	r3, #50	@ 0x32
 800766e:	4a08      	ldr	r2, [pc, #32]	@ (8007690 <UART_SetConfig+0x2d4>)
 8007670:	fba2 2303 	umull	r2, r3, r2, r3
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f003 0207 	and.w	r2, r3, #7
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4422      	add	r2, r4
 8007682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007684:	e106      	b.n	8007894 <UART_SetConfig+0x4d8>
 8007686:	bf00      	nop
 8007688:	40011000 	.word	0x40011000
 800768c:	40011400 	.word	0x40011400
 8007690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007698:	2200      	movs	r2, #0
 800769a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800769e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076a6:	4642      	mov	r2, r8
 80076a8:	464b      	mov	r3, r9
 80076aa:	1891      	adds	r1, r2, r2
 80076ac:	6239      	str	r1, [r7, #32]
 80076ae:	415b      	adcs	r3, r3
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076b6:	4641      	mov	r1, r8
 80076b8:	1854      	adds	r4, r2, r1
 80076ba:	4649      	mov	r1, r9
 80076bc:	eb43 0501 	adc.w	r5, r3, r1
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	00eb      	lsls	r3, r5, #3
 80076ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ce:	00e2      	lsls	r2, r4, #3
 80076d0:	4614      	mov	r4, r2
 80076d2:	461d      	mov	r5, r3
 80076d4:	4643      	mov	r3, r8
 80076d6:	18e3      	adds	r3, r4, r3
 80076d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076dc:	464b      	mov	r3, r9
 80076de:	eb45 0303 	adc.w	r3, r5, r3
 80076e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007702:	4629      	mov	r1, r5
 8007704:	008b      	lsls	r3, r1, #2
 8007706:	4621      	mov	r1, r4
 8007708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800770c:	4621      	mov	r1, r4
 800770e:	008a      	lsls	r2, r1, #2
 8007710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007714:	f7fa fce4 	bl	80020e0 <__aeabi_uldivmod>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4b60      	ldr	r3, [pc, #384]	@ (80078a0 <UART_SetConfig+0x4e4>)
 800771e:	fba3 2302 	umull	r2, r3, r3, r2
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	011c      	lsls	r4, r3, #4
 8007726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800772a:	2200      	movs	r2, #0
 800772c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007738:	4642      	mov	r2, r8
 800773a:	464b      	mov	r3, r9
 800773c:	1891      	adds	r1, r2, r2
 800773e:	61b9      	str	r1, [r7, #24]
 8007740:	415b      	adcs	r3, r3
 8007742:	61fb      	str	r3, [r7, #28]
 8007744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007748:	4641      	mov	r1, r8
 800774a:	1851      	adds	r1, r2, r1
 800774c:	6139      	str	r1, [r7, #16]
 800774e:	4649      	mov	r1, r9
 8007750:	414b      	adcs	r3, r1
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007760:	4659      	mov	r1, fp
 8007762:	00cb      	lsls	r3, r1, #3
 8007764:	4651      	mov	r1, sl
 8007766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800776a:	4651      	mov	r1, sl
 800776c:	00ca      	lsls	r2, r1, #3
 800776e:	4610      	mov	r0, r2
 8007770:	4619      	mov	r1, r3
 8007772:	4603      	mov	r3, r0
 8007774:	4642      	mov	r2, r8
 8007776:	189b      	adds	r3, r3, r2
 8007778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800777c:	464b      	mov	r3, r9
 800777e:	460a      	mov	r2, r1
 8007780:	eb42 0303 	adc.w	r3, r2, r3
 8007784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007792:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077a0:	4649      	mov	r1, r9
 80077a2:	008b      	lsls	r3, r1, #2
 80077a4:	4641      	mov	r1, r8
 80077a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077aa:	4641      	mov	r1, r8
 80077ac:	008a      	lsls	r2, r1, #2
 80077ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077b2:	f7fa fc95 	bl	80020e0 <__aeabi_uldivmod>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4611      	mov	r1, r2
 80077bc:	4b38      	ldr	r3, [pc, #224]	@ (80078a0 <UART_SetConfig+0x4e4>)
 80077be:	fba3 2301 	umull	r2, r3, r3, r1
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	2264      	movs	r2, #100	@ 0x64
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	1acb      	subs	r3, r1, r3
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	3332      	adds	r3, #50	@ 0x32
 80077d0:	4a33      	ldr	r2, [pc, #204]	@ (80078a0 <UART_SetConfig+0x4e4>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077dc:	441c      	add	r4, r3
 80077de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e2:	2200      	movs	r2, #0
 80077e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077ec:	4642      	mov	r2, r8
 80077ee:	464b      	mov	r3, r9
 80077f0:	1891      	adds	r1, r2, r2
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	415b      	adcs	r3, r3
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077fc:	4641      	mov	r1, r8
 80077fe:	1851      	adds	r1, r2, r1
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	4649      	mov	r1, r9
 8007804:	414b      	adcs	r3, r1
 8007806:	607b      	str	r3, [r7, #4]
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007814:	4659      	mov	r1, fp
 8007816:	00cb      	lsls	r3, r1, #3
 8007818:	4651      	mov	r1, sl
 800781a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800781e:	4651      	mov	r1, sl
 8007820:	00ca      	lsls	r2, r1, #3
 8007822:	4610      	mov	r0, r2
 8007824:	4619      	mov	r1, r3
 8007826:	4603      	mov	r3, r0
 8007828:	4642      	mov	r2, r8
 800782a:	189b      	adds	r3, r3, r2
 800782c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800782e:	464b      	mov	r3, r9
 8007830:	460a      	mov	r2, r1
 8007832:	eb42 0303 	adc.w	r3, r2, r3
 8007836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	663b      	str	r3, [r7, #96]	@ 0x60
 8007842:	667a      	str	r2, [r7, #100]	@ 0x64
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007850:	4649      	mov	r1, r9
 8007852:	008b      	lsls	r3, r1, #2
 8007854:	4641      	mov	r1, r8
 8007856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800785a:	4641      	mov	r1, r8
 800785c:	008a      	lsls	r2, r1, #2
 800785e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007862:	f7fa fc3d 	bl	80020e0 <__aeabi_uldivmod>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4b0d      	ldr	r3, [pc, #52]	@ (80078a0 <UART_SetConfig+0x4e4>)
 800786c:	fba3 1302 	umull	r1, r3, r3, r2
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	2164      	movs	r1, #100	@ 0x64
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	3332      	adds	r3, #50	@ 0x32
 800787e:	4a08      	ldr	r2, [pc, #32]	@ (80078a0 <UART_SetConfig+0x4e4>)
 8007880:	fba2 2303 	umull	r2, r3, r2, r3
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	f003 020f 	and.w	r2, r3, #15
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4422      	add	r2, r4
 8007892:	609a      	str	r2, [r3, #8]
}
 8007894:	bf00      	nop
 8007896:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800789a:	46bd      	mov	sp, r7
 800789c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a0:	51eb851f 	.word	0x51eb851f

080078a4 <AUDIO_IO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
void AUDIO_IO_Init(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&AUDIO_I2C_HANDLE);
 80078a8:	4802      	ldr	r0, [pc, #8]	@ (80078b4 <AUDIO_IO_Init+0x10>)
 80078aa:	f7fc fedd 	bl	8004668 <HAL_I2C_Init>
}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200004bc 	.word	0x200004bc

080078b8 <AUDIO_IO_DeInit>:
void AUDIO_IO_DeInit(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
}
 80078bc:	bf00      	nop
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
	...

080078c8 <AUDIO_IO_Write>:
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af04      	add	r7, sp, #16
 80078ce:	4603      	mov	r3, r0
 80078d0:	71fb      	strb	r3, [r7, #7]
 80078d2:	460b      	mov	r3, r1
 80078d4:	71bb      	strb	r3, [r7, #6]
 80078d6:	4613      	mov	r3, r2
 80078d8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&AUDIO_I2C_HANDLE, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	b299      	uxth	r1, r3
 80078e2:	79bb      	ldrb	r3, [r7, #6]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	2364      	movs	r3, #100	@ 0x64
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	2301      	movs	r3, #1
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	1d7b      	adds	r3, r7, #5
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2301      	movs	r3, #1
 80078f4:	4804      	ldr	r0, [pc, #16]	@ (8007908 <AUDIO_IO_Write+0x40>)
 80078f6:	f7fc fffb 	bl	80048f0 <HAL_I2C_Mem_Write>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* You may add a call to the error handler */
    /* Error_Handler(); */
  }
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200004bc 	.word	0x200004bc

0800790c <AUDIO_IO_Read>:
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af04      	add	r7, sp, #16
 8007912:	4603      	mov	r3, r0
 8007914:	460a      	mov	r2, r1
 8007916:	71fb      	strb	r3, [r7, #7]
 8007918:	4613      	mov	r3, r2
 800791a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&AUDIO_I2C_HANDLE, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	b299      	uxth	r1, r3
 8007928:	79bb      	ldrb	r3, [r7, #6]
 800792a:	b29a      	uxth	r2, r3
 800792c:	2364      	movs	r3, #100	@ 0x64
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	2301      	movs	r3, #1
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	f107 030e 	add.w	r3, r7, #14
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	2301      	movs	r3, #1
 800793c:	4804      	ldr	r0, [pc, #16]	@ (8007950 <AUDIO_IO_Read+0x44>)
 800793e:	f7fd f8d1 	bl	8004ae4 <HAL_I2C_Mem_Read>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* You may add a call to the error handler */
    /* Error_Handler(); */
  }
  return value;
 8007946:	7bbb      	ldrb	r3, [r7, #14]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	200004bc 	.word	0x200004bc

08007954 <BSP_AUDIO_OUT_Init>:


uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8007954:	b590      	push	{r4, r7, lr}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	603a      	str	r2, [r7, #0]
 800795e:	80fb      	strh	r3, [r7, #6]
 8007960:	460b      	mov	r3, r1
 8007962:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8007968:	2200      	movs	r2, #0
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	481c      	ldr	r0, [pc, #112]	@ (80079e0 <BSP_AUDIO_OUT_Init+0x8c>)
 800796e:	f000 f8a5 	bl	8007abc <BSP_AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 8007972:	4b1b      	ldr	r3, [pc, #108]	@ (80079e0 <BSP_AUDIO_OUT_Init+0x8c>)
 8007974:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <BSP_AUDIO_OUT_Init+0x90>)
 8007976:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8007978:	4819      	ldr	r0, [pc, #100]	@ (80079e0 <BSP_AUDIO_OUT_Init+0x8c>)
 800797a:	f7fe f935 	bl	8005be8 <HAL_I2S_GetState>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <BSP_AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8007984:	2100      	movs	r1, #0
 8007986:	4816      	ldr	r0, [pc, #88]	@ (80079e0 <BSP_AUDIO_OUT_Init+0x8c>)
 8007988:	f000 f8f2 	bl	8007b70 <BSP_AUDIO_OUT_MspInit>
  }
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800798c:	6838      	ldr	r0, [r7, #0]
 800798e:	f000 f9b1 	bl	8007cf4 <I2S3_Init>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <BSP_AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == AUDIO_OK)
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10e      	bne.n	80079c0 <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retrieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80079a2:	4b11      	ldr	r3, [pc, #68]	@ (80079e8 <BSP_AUDIO_OUT_Init+0x94>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2094      	movs	r0, #148	@ 0x94
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80079b0:	2be0      	cmp	r3, #224	@ 0xe0
 80079b2:	d103      	bne.n	80079bc <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80079b4:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <BSP_AUDIO_OUT_Init+0x98>)
 80079b6:	4a0c      	ldr	r2, [pc, #48]	@ (80079e8 <BSP_AUDIO_OUT_Init+0x94>)
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e001      	b.n	80079c0 <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d107      	bne.n	80079d6 <BSP_AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80079c6:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <BSP_AUDIO_OUT_Init+0x98>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681c      	ldr	r4, [r3, #0]
 80079cc:	797a      	ldrb	r2, [r7, #5]
 80079ce:	88f9      	ldrh	r1, [r7, #6]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2094      	movs	r0, #148	@ 0x94
 80079d4:	47a0      	blx	r4
  }
  
  return ret;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd90      	pop	{r4, r7, pc}
 80079e0:	2000109c 	.word	0x2000109c
 80079e4:	40003c00 	.word	0x40003c00
 80079e8:	20000404 	.word	0x20000404
 80079ec:	20001098 	.word	0x20001098

080079f0 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80079fa:	4b10      	ldr	r3, [pc, #64]	@ (8007a3c <BSP_AUDIO_OUT_Play+0x4c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	b292      	uxth	r2, r2
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	2094      	movs	r0, #148	@ 0x94
 8007a08:	4798      	blx	r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <BSP_AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e00f      	b.n	8007a34 <BSP_AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a1a:	d203      	bcs.n	8007a24 <BSP_AUDIO_OUT_Play+0x34>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	085b      	lsrs	r3, r3, #1
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	e001      	b.n	8007a28 <BSP_AUDIO_OUT_Play+0x38>
 8007a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	4804      	ldr	r0, [pc, #16]	@ (8007a40 <BSP_AUDIO_OUT_Play+0x50>)
 8007a2e:	f7fd ff7f 	bl	8005930 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8007a32:	2300      	movs	r3, #0
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20001098 	.word	0x20001098
 8007a40:	2000109c 	.word	0x2000109c

08007a44 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8007a4e:	4b08      	ldr	r3, [pc, #32]	@ (8007a70 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	79fa      	ldrb	r2, [r7, #7]
 8007a56:	4611      	mov	r1, r2
 8007a58:	2094      	movs	r0, #148	@ 0x94
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <BSP_AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8007a66:	2300      	movs	r3, #0
  }
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20001098 	.word	0x20001098

08007a74 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a04      	ldr	r2, [pc, #16]	@ (8007a94 <HAL_I2S_TxCpltCallback+0x20>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d101      	bne.n	8007a8a <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8007a86:	f7fb fb55 	bl	8003134 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40003c00 	.word	0x40003c00

08007a98 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a04      	ldr	r2, [pc, #16]	@ (8007ab8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d101      	bne.n	8007aae <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8007aaa:	f7fb fb37 	bl	800311c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40003c00 	.word	0x40003c00

08007abc <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	@ 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ace:	23ff      	movs	r3, #255	@ 0xff
 8007ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
  for(index = 0; index < 8; index++)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ada:	e010      	b.n	8007afe <BSP_AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8007adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ae0:	4a20      	ldr	r2, [pc, #128]	@ (8007b64 <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 8007ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d103      	bne.n	8007af4 <BSP_AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8007aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007af0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  for(index = 0; index < 8; index++)
 8007af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007af8:	3301      	adds	r3, #1
 8007afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007afe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b02:	2b07      	cmp	r3, #7
 8007b04:	d9ea      	bls.n	8007adc <BSP_AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8007b06:	f107 0314 	add.w	r3, r7, #20
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff f9ba 	bl	8006e84 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8007b10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <BSP_AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8007b20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b24:	4a10      	ldr	r2, [pc, #64]	@ (8007b68 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 8007b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8007b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b30:	4a0e      	ldr	r2, [pc, #56]	@ (8007b6c <BSP_AUDIO_OUT_ClockConfig+0xb0>)
 8007b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b36:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8007b38:	f107 0314 	add.w	r3, r7, #20
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff f8bf 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8007b42:	e00b      	b.n	8007b5c <BSP_AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8007b48:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8007b4c:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8007b52:	f107 0314 	add.w	r3, r7, #20
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff f8b2 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
}
 8007b5c:	bf00      	nop
 8007b5e:	3728      	adds	r7, #40	@ 0x28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	08008f3c 	.word	0x08008f3c
 8007b68:	08008f5c 	.word	0x08008f5c
 8007b6c:	08008f7c 	.word	0x08008f7c

08007b70 <BSP_AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08c      	sub	sp, #48	@ 0x30
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	4b57      	ldr	r3, [pc, #348]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b82:	4a56      	ldr	r2, [pc, #344]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b8a:	4b54      	ldr	r3, [pc, #336]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	69bb      	ldr	r3, [r7, #24]
  
  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	4b50      	ldr	r3, [pc, #320]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9e:	4a4f      	ldr	r2, [pc, #316]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007ba0:	f043 0304 	orr.w	r3, r3, #4
 8007ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	4b49      	ldr	r3, [pc, #292]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bba:	4a48      	ldr	r2, [pc, #288]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007bc2:	4b46      	ldr	r3, [pc, #280]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	693b      	ldr	r3, [r7, #16]
  
  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8007bce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8007be0:	2306      	movs	r3, #6
 8007be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8007be4:	f107 031c 	add.w	r3, r7, #28
 8007be8:	4619      	mov	r1, r3
 8007bea:	483d      	ldr	r0, [pc, #244]	@ (8007ce0 <BSP_AUDIO_OUT_MspInit+0x170>)
 8007bec:	f7fc fb6c 	bl	80042c8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8007bf4:	f107 031c 	add.w	r3, r7, #28
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	483a      	ldr	r0, [pc, #232]	@ (8007ce4 <BSP_AUDIO_OUT_MspInit+0x174>)
 8007bfc:	f7fc fb64 	bl	80042c8 <HAL_GPIO_Init>
  
  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	4b35      	ldr	r3, [pc, #212]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	4a34      	ldr	r2, [pc, #208]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007c0a:	f043 0304 	orr.w	r3, r3, #4
 8007c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c10:	4b32      	ldr	r3, [pc, #200]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8007c1c:	2380      	movs	r3, #128	@ 0x80
 8007c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8007c20:	f107 031c 	add.w	r3, r7, #28
 8007c24:	4619      	mov	r1, r3
 8007c26:	482e      	ldr	r0, [pc, #184]	@ (8007ce0 <BSP_AUDIO_OUT_MspInit+0x170>)
 8007c28:	f7fc fb4e 	bl	80042c8 <HAL_GPIO_Init>
  
  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60bb      	str	r3, [r7, #8]
 8007c30:	4b2a      	ldr	r3, [pc, #168]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c34:	4a29      	ldr	r2, [pc, #164]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007c36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c3c:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <BSP_AUDIO_OUT_MspInit+0x16c>)
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	@ (8007ce8 <BSP_AUDIO_OUT_MspInit+0x178>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d137      	bne.n	8007cc2 <BSP_AUDIO_OUT_MspInit+0x152>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8007c52:	4b26      	ldr	r3, [pc, #152]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8007c58:	4b24      	ldr	r3, [pc, #144]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c5a:	2240      	movs	r2, #64	@ 0x40
 8007c5c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8007c5e:	4b23      	ldr	r3, [pc, #140]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8007c64:	4b21      	ldr	r3, [pc, #132]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c6a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c72:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8007c74:	4b1d      	ldr	r3, [pc, #116]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c7a:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_CIRCULAR;
 8007c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c82:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8007c84:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007c8a:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8007c8c:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c8e:	2204      	movs	r2, #4
 8007c90:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007c92:	4b16      	ldr	r3, [pc, #88]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c94:	2203      	movs	r2, #3
 8007c96:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007c98:	4b14      	ldr	r3, [pc, #80]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007c9e:	4b13      	ldr	r3, [pc, #76]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8007ca4:	4b11      	ldr	r3, [pc, #68]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007ca6:	4a12      	ldr	r2, [pc, #72]	@ (8007cf0 <BSP_AUDIO_OUT_MspInit+0x180>)
 8007ca8:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a0f      	ldr	r2, [pc, #60]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8007cb6:	480d      	ldr	r0, [pc, #52]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007cb8:	f7fb ffe6 	bl	8003c88 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8007cbc:	480b      	ldr	r0, [pc, #44]	@ (8007cec <BSP_AUDIO_OUT_MspInit+0x17c>)
 8007cbe:	f7fb ff35 	bl	8003b2c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	210e      	movs	r1, #14
 8007cc6:	202f      	movs	r0, #47	@ 0x2f
 8007cc8:	f7fb fedd 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8007ccc:	202f      	movs	r0, #47	@ 0x2f
 8007cce:	f7fb fef6 	bl	8003abe <HAL_NVIC_EnableIRQ>
}
 8007cd2:	bf00      	nop
 8007cd4:	3730      	adds	r7, #48	@ 0x30
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40023800 	.word	0x40023800
 8007ce0:	40020800 	.word	0x40020800
 8007ce4:	40020000 	.word	0x40020000
 8007ce8:	40003c00 	.word	0x40003c00
 8007cec:	200010e4 	.word	0x200010e4
 8007cf0:	400260b8 	.word	0x400260b8

08007cf4 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8007cfc:	4b17      	ldr	r3, [pc, #92]	@ (8007d5c <I2S3_Init+0x68>)
 8007cfe:	4a18      	ldr	r2, [pc, #96]	@ (8007d60 <I2S3_Init+0x6c>)
 8007d00:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8007d02:	4b16      	ldr	r3, [pc, #88]	@ (8007d5c <I2S3_Init+0x68>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	4b14      	ldr	r3, [pc, #80]	@ (8007d5c <I2S3_Init+0x68>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d10:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8007d12:	4a12      	ldr	r2, [pc, #72]	@ (8007d5c <I2S3_Init+0x68>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8007d18:	4b10      	ldr	r3, [pc, #64]	@ (8007d5c <I2S3_Init+0x68>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d5c <I2S3_Init+0x68>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8007d24:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <I2S3_Init+0x68>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d5c <I2S3_Init+0x68>)
 8007d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d30:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8007d32:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <I2S3_Init+0x68>)
 8007d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d38:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD_PHILIPS;
 8007d3a:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <I2S3_Init+0x68>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8007d40:	4806      	ldr	r0, [pc, #24]	@ (8007d5c <I2S3_Init+0x68>)
 8007d42:	f7fd fcb5 	bl	80056b0 <HAL_I2S_Init>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8007d50:	2300      	movs	r3, #0
  }
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	2000109c 	.word	0x2000109c
 8007d60:	40003c00 	.word	0x40003c00

08007d64 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8007d68:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007d74:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007d76:	4a0e      	ldr	r2, [pc, #56]	@ (8007db0 <MX_PDM2PCM_Init+0x4c>)
 8007d78:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007d86:	4809      	ldr	r0, [pc, #36]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007d88:	f7f8 fa22 	bl	80001d0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007d8c:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <MX_PDM2PCM_Init+0x50>)
 8007d8e:	2202      	movs	r2, #2
 8007d90:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007d92:	4b08      	ldr	r3, [pc, #32]	@ (8007db4 <MX_PDM2PCM_Init+0x50>)
 8007d94:	2210      	movs	r2, #16
 8007d96:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 1;
 8007d98:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <MX_PDM2PCM_Init+0x50>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007d9e:	4905      	ldr	r1, [pc, #20]	@ (8007db4 <MX_PDM2PCM_Init+0x50>)
 8007da0:	4802      	ldr	r0, [pc, #8]	@ (8007dac <MX_PDM2PCM_Init+0x48>)
 8007da2:	f7f8 fb09 	bl	80003b8 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007da6:	bf00      	nop
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20001144 	.word	0x20001144
 8007db0:	7d70a3d6 	.word	0x7d70a3d6
 8007db4:	20001190 	.word	0x20001190

08007db8 <sniprintf>:
 8007db8:	b40c      	push	{r2, r3}
 8007dba:	b530      	push	{r4, r5, lr}
 8007dbc:	4b18      	ldr	r3, [pc, #96]	@ (8007e20 <sniprintf+0x68>)
 8007dbe:	1e0c      	subs	r4, r1, #0
 8007dc0:	681d      	ldr	r5, [r3, #0]
 8007dc2:	b09d      	sub	sp, #116	@ 0x74
 8007dc4:	da08      	bge.n	8007dd8 <sniprintf+0x20>
 8007dc6:	238b      	movs	r3, #139	@ 0x8b
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	b01d      	add	sp, #116	@ 0x74
 8007dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dd4:	b002      	add	sp, #8
 8007dd6:	4770      	bx	lr
 8007dd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ddc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007de6:	bf14      	ite	ne
 8007de8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007dec:	4623      	moveq	r3, r4
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007df6:	9002      	str	r0, [sp, #8]
 8007df8:	9006      	str	r0, [sp, #24]
 8007dfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dfe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e00:	ab21      	add	r3, sp, #132	@ 0x84
 8007e02:	a902      	add	r1, sp, #8
 8007e04:	4628      	mov	r0, r5
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	f000 f998 	bl	800813c <_svfiprintf_r>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	bfbc      	itt	lt
 8007e10:	238b      	movlt	r3, #139	@ 0x8b
 8007e12:	602b      	strlt	r3, [r5, #0]
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	d0da      	beq.n	8007dce <sniprintf+0x16>
 8007e18:	9b02      	ldr	r3, [sp, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	e7d6      	b.n	8007dce <sniprintf+0x16>
 8007e20:	20000444 	.word	0x20000444

08007e24 <memset>:
 8007e24:	4402      	add	r2, r0
 8007e26:	4603      	mov	r3, r0
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d100      	bne.n	8007e2e <memset+0xa>
 8007e2c:	4770      	bx	lr
 8007e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e32:	e7f9      	b.n	8007e28 <memset+0x4>

08007e34 <__errno>:
 8007e34:	4b01      	ldr	r3, [pc, #4]	@ (8007e3c <__errno+0x8>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000444 	.word	0x20000444

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	@ (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	@ (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	@ (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	@ (8007e84 <__libc_init_array+0x44>)
 8007e54:	f001 f854 	bl	8008f00 <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	08008ff0 	.word	0x08008ff0
 8007e7c:	08008ff0 	.word	0x08008ff0
 8007e80:	08008ff0 	.word	0x08008ff0
 8007e84:	08008ff4 	.word	0x08008ff4

08007e88 <__retarget_lock_acquire_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <__retarget_lock_release_recursive>:
 8007e8a:	4770      	bx	lr

08007e8c <__aeabi_memclr>:
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f7fa b887 	b.w	8001fa0 <__aeabi_memset>
	...

08007e94 <_free_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	d041      	beq.n	8007f20 <_free_r+0x8c>
 8007e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea0:	1f0c      	subs	r4, r1, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfb8      	it	lt
 8007ea6:	18e4      	addlt	r4, r4, r3
 8007ea8:	f000 f8e0 	bl	800806c <__malloc_lock>
 8007eac:	4a1d      	ldr	r2, [pc, #116]	@ (8007f24 <_free_r+0x90>)
 8007eae:	6813      	ldr	r3, [r2, #0]
 8007eb0:	b933      	cbnz	r3, 8007ec0 <_free_r+0x2c>
 8007eb2:	6063      	str	r3, [r4, #4]
 8007eb4:	6014      	str	r4, [r2, #0]
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ebc:	f000 b8dc 	b.w	8008078 <__malloc_unlock>
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d908      	bls.n	8007ed6 <_free_r+0x42>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	1821      	adds	r1, r4, r0
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf01      	itttt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	1809      	addeq	r1, r1, r0
 8007ed2:	6021      	streq	r1, [r4, #0]
 8007ed4:	e7ed      	b.n	8007eb2 <_free_r+0x1e>
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	b10b      	cbz	r3, 8007ee0 <_free_r+0x4c>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d9fa      	bls.n	8007ed6 <_free_r+0x42>
 8007ee0:	6811      	ldr	r1, [r2, #0]
 8007ee2:	1850      	adds	r0, r2, r1
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d10b      	bne.n	8007f00 <_free_r+0x6c>
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	4401      	add	r1, r0
 8007eec:	1850      	adds	r0, r2, r1
 8007eee:	4283      	cmp	r3, r0
 8007ef0:	6011      	str	r1, [r2, #0]
 8007ef2:	d1e0      	bne.n	8007eb6 <_free_r+0x22>
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	6053      	str	r3, [r2, #4]
 8007efa:	4408      	add	r0, r1
 8007efc:	6010      	str	r0, [r2, #0]
 8007efe:	e7da      	b.n	8007eb6 <_free_r+0x22>
 8007f00:	d902      	bls.n	8007f08 <_free_r+0x74>
 8007f02:	230c      	movs	r3, #12
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	e7d6      	b.n	8007eb6 <_free_r+0x22>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	1821      	adds	r1, r4, r0
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf04      	itt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	bf04      	itt	eq
 8007f18:	1809      	addeq	r1, r1, r0
 8007f1a:	6021      	streq	r1, [r4, #0]
 8007f1c:	6054      	str	r4, [r2, #4]
 8007f1e:	e7ca      	b.n	8007eb6 <_free_r+0x22>
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	bf00      	nop
 8007f24:	200012dc 	.word	0x200012dc

08007f28 <sbrk_aligned>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8007f68 <sbrk_aligned+0x40>)
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	6831      	ldr	r1, [r6, #0]
 8007f30:	4605      	mov	r5, r0
 8007f32:	b911      	cbnz	r1, 8007f3a <sbrk_aligned+0x12>
 8007f34:	f000 fba4 	bl	8008680 <_sbrk_r>
 8007f38:	6030      	str	r0, [r6, #0]
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f000 fb9f 	bl	8008680 <_sbrk_r>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d103      	bne.n	8007f4e <sbrk_aligned+0x26>
 8007f46:	f04f 34ff 	mov.w	r4, #4294967295
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	bd70      	pop	{r4, r5, r6, pc}
 8007f4e:	1cc4      	adds	r4, r0, #3
 8007f50:	f024 0403 	bic.w	r4, r4, #3
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d0f8      	beq.n	8007f4a <sbrk_aligned+0x22>
 8007f58:	1a21      	subs	r1, r4, r0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 fb90 	bl	8008680 <_sbrk_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d1f2      	bne.n	8007f4a <sbrk_aligned+0x22>
 8007f64:	e7ef      	b.n	8007f46 <sbrk_aligned+0x1e>
 8007f66:	bf00      	nop
 8007f68:	200012d8 	.word	0x200012d8

08007f6c <_malloc_r>:
 8007f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f70:	1ccd      	adds	r5, r1, #3
 8007f72:	f025 0503 	bic.w	r5, r5, #3
 8007f76:	3508      	adds	r5, #8
 8007f78:	2d0c      	cmp	r5, #12
 8007f7a:	bf38      	it	cc
 8007f7c:	250c      	movcc	r5, #12
 8007f7e:	2d00      	cmp	r5, #0
 8007f80:	4606      	mov	r6, r0
 8007f82:	db01      	blt.n	8007f88 <_malloc_r+0x1c>
 8007f84:	42a9      	cmp	r1, r5
 8007f86:	d904      	bls.n	8007f92 <_malloc_r+0x26>
 8007f88:	230c      	movs	r3, #12
 8007f8a:	6033      	str	r3, [r6, #0]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008068 <_malloc_r+0xfc>
 8007f96:	f000 f869 	bl	800806c <__malloc_lock>
 8007f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f9e:	461c      	mov	r4, r3
 8007fa0:	bb44      	cbnz	r4, 8007ff4 <_malloc_r+0x88>
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f7ff ffbf 	bl	8007f28 <sbrk_aligned>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	4604      	mov	r4, r0
 8007fae:	d158      	bne.n	8008062 <_malloc_r+0xf6>
 8007fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8007fb4:	4627      	mov	r7, r4
 8007fb6:	2f00      	cmp	r7, #0
 8007fb8:	d143      	bne.n	8008042 <_malloc_r+0xd6>
 8007fba:	2c00      	cmp	r4, #0
 8007fbc:	d04b      	beq.n	8008056 <_malloc_r+0xea>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	eb04 0903 	add.w	r9, r4, r3
 8007fc8:	f000 fb5a 	bl	8008680 <_sbrk_r>
 8007fcc:	4581      	cmp	r9, r0
 8007fce:	d142      	bne.n	8008056 <_malloc_r+0xea>
 8007fd0:	6821      	ldr	r1, [r4, #0]
 8007fd2:	1a6d      	subs	r5, r5, r1
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff ffa6 	bl	8007f28 <sbrk_aligned>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d03a      	beq.n	8008056 <_malloc_r+0xea>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	442b      	add	r3, r5
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	bb62      	cbnz	r2, 8008048 <_malloc_r+0xdc>
 8007fee:	f8c8 7000 	str.w	r7, [r8]
 8007ff2:	e00f      	b.n	8008014 <_malloc_r+0xa8>
 8007ff4:	6822      	ldr	r2, [r4, #0]
 8007ff6:	1b52      	subs	r2, r2, r5
 8007ff8:	d420      	bmi.n	800803c <_malloc_r+0xd0>
 8007ffa:	2a0b      	cmp	r2, #11
 8007ffc:	d917      	bls.n	800802e <_malloc_r+0xc2>
 8007ffe:	1961      	adds	r1, r4, r5
 8008000:	42a3      	cmp	r3, r4
 8008002:	6025      	str	r5, [r4, #0]
 8008004:	bf18      	it	ne
 8008006:	6059      	strne	r1, [r3, #4]
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	bf08      	it	eq
 800800c:	f8c8 1000 	streq.w	r1, [r8]
 8008010:	5162      	str	r2, [r4, r5]
 8008012:	604b      	str	r3, [r1, #4]
 8008014:	4630      	mov	r0, r6
 8008016:	f000 f82f 	bl	8008078 <__malloc_unlock>
 800801a:	f104 000b 	add.w	r0, r4, #11
 800801e:	1d23      	adds	r3, r4, #4
 8008020:	f020 0007 	bic.w	r0, r0, #7
 8008024:	1ac2      	subs	r2, r0, r3
 8008026:	bf1c      	itt	ne
 8008028:	1a1b      	subne	r3, r3, r0
 800802a:	50a3      	strne	r3, [r4, r2]
 800802c:	e7af      	b.n	8007f8e <_malloc_r+0x22>
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	42a3      	cmp	r3, r4
 8008032:	bf0c      	ite	eq
 8008034:	f8c8 2000 	streq.w	r2, [r8]
 8008038:	605a      	strne	r2, [r3, #4]
 800803a:	e7eb      	b.n	8008014 <_malloc_r+0xa8>
 800803c:	4623      	mov	r3, r4
 800803e:	6864      	ldr	r4, [r4, #4]
 8008040:	e7ae      	b.n	8007fa0 <_malloc_r+0x34>
 8008042:	463c      	mov	r4, r7
 8008044:	687f      	ldr	r7, [r7, #4]
 8008046:	e7b6      	b.n	8007fb6 <_malloc_r+0x4a>
 8008048:	461a      	mov	r2, r3
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	42a3      	cmp	r3, r4
 800804e:	d1fb      	bne.n	8008048 <_malloc_r+0xdc>
 8008050:	2300      	movs	r3, #0
 8008052:	6053      	str	r3, [r2, #4]
 8008054:	e7de      	b.n	8008014 <_malloc_r+0xa8>
 8008056:	230c      	movs	r3, #12
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	4630      	mov	r0, r6
 800805c:	f000 f80c 	bl	8008078 <__malloc_unlock>
 8008060:	e794      	b.n	8007f8c <_malloc_r+0x20>
 8008062:	6005      	str	r5, [r0, #0]
 8008064:	e7d6      	b.n	8008014 <_malloc_r+0xa8>
 8008066:	bf00      	nop
 8008068:	200012dc 	.word	0x200012dc

0800806c <__malloc_lock>:
 800806c:	4801      	ldr	r0, [pc, #4]	@ (8008074 <__malloc_lock+0x8>)
 800806e:	f7ff bf0b 	b.w	8007e88 <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	200012d4 	.word	0x200012d4

08008078 <__malloc_unlock>:
 8008078:	4801      	ldr	r0, [pc, #4]	@ (8008080 <__malloc_unlock+0x8>)
 800807a:	f7ff bf06 	b.w	8007e8a <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	200012d4 	.word	0x200012d4

08008084 <__ssputs_r>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	688e      	ldr	r6, [r1, #8]
 800808a:	461f      	mov	r7, r3
 800808c:	42be      	cmp	r6, r7
 800808e:	680b      	ldr	r3, [r1, #0]
 8008090:	4682      	mov	sl, r0
 8008092:	460c      	mov	r4, r1
 8008094:	4690      	mov	r8, r2
 8008096:	d82d      	bhi.n	80080f4 <__ssputs_r+0x70>
 8008098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800809c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080a0:	d026      	beq.n	80080f0 <__ssputs_r+0x6c>
 80080a2:	6965      	ldr	r5, [r4, #20]
 80080a4:	6909      	ldr	r1, [r1, #16]
 80080a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080aa:	eba3 0901 	sub.w	r9, r3, r1
 80080ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080b2:	1c7b      	adds	r3, r7, #1
 80080b4:	444b      	add	r3, r9
 80080b6:	106d      	asrs	r5, r5, #1
 80080b8:	429d      	cmp	r5, r3
 80080ba:	bf38      	it	cc
 80080bc:	461d      	movcc	r5, r3
 80080be:	0553      	lsls	r3, r2, #21
 80080c0:	d527      	bpl.n	8008112 <__ssputs_r+0x8e>
 80080c2:	4629      	mov	r1, r5
 80080c4:	f7ff ff52 	bl	8007f6c <_malloc_r>
 80080c8:	4606      	mov	r6, r0
 80080ca:	b360      	cbz	r0, 8008126 <__ssputs_r+0xa2>
 80080cc:	6921      	ldr	r1, [r4, #16]
 80080ce:	464a      	mov	r2, r9
 80080d0:	f000 fae6 	bl	80086a0 <memcpy>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	6126      	str	r6, [r4, #16]
 80080e2:	6165      	str	r5, [r4, #20]
 80080e4:	444e      	add	r6, r9
 80080e6:	eba5 0509 	sub.w	r5, r5, r9
 80080ea:	6026      	str	r6, [r4, #0]
 80080ec:	60a5      	str	r5, [r4, #8]
 80080ee:	463e      	mov	r6, r7
 80080f0:	42be      	cmp	r6, r7
 80080f2:	d900      	bls.n	80080f6 <__ssputs_r+0x72>
 80080f4:	463e      	mov	r6, r7
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	4632      	mov	r2, r6
 80080fa:	4641      	mov	r1, r8
 80080fc:	f000 faa6 	bl	800864c <memmove>
 8008100:	68a3      	ldr	r3, [r4, #8]
 8008102:	1b9b      	subs	r3, r3, r6
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	4433      	add	r3, r6
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	2000      	movs	r0, #0
 800810e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008112:	462a      	mov	r2, r5
 8008114:	f000 fad2 	bl	80086bc <_realloc_r>
 8008118:	4606      	mov	r6, r0
 800811a:	2800      	cmp	r0, #0
 800811c:	d1e0      	bne.n	80080e0 <__ssputs_r+0x5c>
 800811e:	6921      	ldr	r1, [r4, #16]
 8008120:	4650      	mov	r0, sl
 8008122:	f7ff feb7 	bl	8007e94 <_free_r>
 8008126:	230c      	movs	r3, #12
 8008128:	f8ca 3000 	str.w	r3, [sl]
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e7e9      	b.n	800810e <__ssputs_r+0x8a>
	...

0800813c <_svfiprintf_r>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	4698      	mov	r8, r3
 8008142:	898b      	ldrh	r3, [r1, #12]
 8008144:	061b      	lsls	r3, r3, #24
 8008146:	b09d      	sub	sp, #116	@ 0x74
 8008148:	4607      	mov	r7, r0
 800814a:	460d      	mov	r5, r1
 800814c:	4614      	mov	r4, r2
 800814e:	d510      	bpl.n	8008172 <_svfiprintf_r+0x36>
 8008150:	690b      	ldr	r3, [r1, #16]
 8008152:	b973      	cbnz	r3, 8008172 <_svfiprintf_r+0x36>
 8008154:	2140      	movs	r1, #64	@ 0x40
 8008156:	f7ff ff09 	bl	8007f6c <_malloc_r>
 800815a:	6028      	str	r0, [r5, #0]
 800815c:	6128      	str	r0, [r5, #16]
 800815e:	b930      	cbnz	r0, 800816e <_svfiprintf_r+0x32>
 8008160:	230c      	movs	r3, #12
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	b01d      	add	sp, #116	@ 0x74
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	2340      	movs	r3, #64	@ 0x40
 8008170:	616b      	str	r3, [r5, #20]
 8008172:	2300      	movs	r3, #0
 8008174:	9309      	str	r3, [sp, #36]	@ 0x24
 8008176:	2320      	movs	r3, #32
 8008178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800817c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008180:	2330      	movs	r3, #48	@ 0x30
 8008182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008320 <_svfiprintf_r+0x1e4>
 8008186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800818a:	f04f 0901 	mov.w	r9, #1
 800818e:	4623      	mov	r3, r4
 8008190:	469a      	mov	sl, r3
 8008192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008196:	b10a      	cbz	r2, 800819c <_svfiprintf_r+0x60>
 8008198:	2a25      	cmp	r2, #37	@ 0x25
 800819a:	d1f9      	bne.n	8008190 <_svfiprintf_r+0x54>
 800819c:	ebba 0b04 	subs.w	fp, sl, r4
 80081a0:	d00b      	beq.n	80081ba <_svfiprintf_r+0x7e>
 80081a2:	465b      	mov	r3, fp
 80081a4:	4622      	mov	r2, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	4638      	mov	r0, r7
 80081aa:	f7ff ff6b 	bl	8008084 <__ssputs_r>
 80081ae:	3001      	adds	r0, #1
 80081b0:	f000 80a7 	beq.w	8008302 <_svfiprintf_r+0x1c6>
 80081b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b6:	445a      	add	r2, fp
 80081b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ba:	f89a 3000 	ldrb.w	r3, [sl]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 809f 	beq.w	8008302 <_svfiprintf_r+0x1c6>
 80081c4:	2300      	movs	r3, #0
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ce:	f10a 0a01 	add.w	sl, sl, #1
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081da:	931a      	str	r3, [sp, #104]	@ 0x68
 80081dc:	4654      	mov	r4, sl
 80081de:	2205      	movs	r2, #5
 80081e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e4:	484e      	ldr	r0, [pc, #312]	@ (8008320 <_svfiprintf_r+0x1e4>)
 80081e6:	f7f9 ff2b 	bl	8002040 <memchr>
 80081ea:	9a04      	ldr	r2, [sp, #16]
 80081ec:	b9d8      	cbnz	r0, 8008226 <_svfiprintf_r+0xea>
 80081ee:	06d0      	lsls	r0, r2, #27
 80081f0:	bf44      	itt	mi
 80081f2:	2320      	movmi	r3, #32
 80081f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081f8:	0711      	lsls	r1, r2, #28
 80081fa:	bf44      	itt	mi
 80081fc:	232b      	movmi	r3, #43	@ 0x2b
 80081fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008202:	f89a 3000 	ldrb.w	r3, [sl]
 8008206:	2b2a      	cmp	r3, #42	@ 0x2a
 8008208:	d015      	beq.n	8008236 <_svfiprintf_r+0xfa>
 800820a:	9a07      	ldr	r2, [sp, #28]
 800820c:	4654      	mov	r4, sl
 800820e:	2000      	movs	r0, #0
 8008210:	f04f 0c0a 	mov.w	ip, #10
 8008214:	4621      	mov	r1, r4
 8008216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800821a:	3b30      	subs	r3, #48	@ 0x30
 800821c:	2b09      	cmp	r3, #9
 800821e:	d94b      	bls.n	80082b8 <_svfiprintf_r+0x17c>
 8008220:	b1b0      	cbz	r0, 8008250 <_svfiprintf_r+0x114>
 8008222:	9207      	str	r2, [sp, #28]
 8008224:	e014      	b.n	8008250 <_svfiprintf_r+0x114>
 8008226:	eba0 0308 	sub.w	r3, r0, r8
 800822a:	fa09 f303 	lsl.w	r3, r9, r3
 800822e:	4313      	orrs	r3, r2
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	46a2      	mov	sl, r4
 8008234:	e7d2      	b.n	80081dc <_svfiprintf_r+0xa0>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	1d19      	adds	r1, r3, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	9103      	str	r1, [sp, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfbb      	ittet	lt
 8008242:	425b      	neglt	r3, r3
 8008244:	f042 0202 	orrlt.w	r2, r2, #2
 8008248:	9307      	strge	r3, [sp, #28]
 800824a:	9307      	strlt	r3, [sp, #28]
 800824c:	bfb8      	it	lt
 800824e:	9204      	strlt	r2, [sp, #16]
 8008250:	7823      	ldrb	r3, [r4, #0]
 8008252:	2b2e      	cmp	r3, #46	@ 0x2e
 8008254:	d10a      	bne.n	800826c <_svfiprintf_r+0x130>
 8008256:	7863      	ldrb	r3, [r4, #1]
 8008258:	2b2a      	cmp	r3, #42	@ 0x2a
 800825a:	d132      	bne.n	80082c2 <_svfiprintf_r+0x186>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	1d1a      	adds	r2, r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	9203      	str	r2, [sp, #12]
 8008264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008268:	3402      	adds	r4, #2
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008330 <_svfiprintf_r+0x1f4>
 8008270:	7821      	ldrb	r1, [r4, #0]
 8008272:	2203      	movs	r2, #3
 8008274:	4650      	mov	r0, sl
 8008276:	f7f9 fee3 	bl	8002040 <memchr>
 800827a:	b138      	cbz	r0, 800828c <_svfiprintf_r+0x150>
 800827c:	9b04      	ldr	r3, [sp, #16]
 800827e:	eba0 000a 	sub.w	r0, r0, sl
 8008282:	2240      	movs	r2, #64	@ 0x40
 8008284:	4082      	lsls	r2, r0
 8008286:	4313      	orrs	r3, r2
 8008288:	3401      	adds	r4, #1
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008290:	4824      	ldr	r0, [pc, #144]	@ (8008324 <_svfiprintf_r+0x1e8>)
 8008292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008296:	2206      	movs	r2, #6
 8008298:	f7f9 fed2 	bl	8002040 <memchr>
 800829c:	2800      	cmp	r0, #0
 800829e:	d036      	beq.n	800830e <_svfiprintf_r+0x1d2>
 80082a0:	4b21      	ldr	r3, [pc, #132]	@ (8008328 <_svfiprintf_r+0x1ec>)
 80082a2:	bb1b      	cbnz	r3, 80082ec <_svfiprintf_r+0x1b0>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	3307      	adds	r3, #7
 80082a8:	f023 0307 	bic.w	r3, r3, #7
 80082ac:	3308      	adds	r3, #8
 80082ae:	9303      	str	r3, [sp, #12]
 80082b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b2:	4433      	add	r3, r6
 80082b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082b6:	e76a      	b.n	800818e <_svfiprintf_r+0x52>
 80082b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082bc:	460c      	mov	r4, r1
 80082be:	2001      	movs	r0, #1
 80082c0:	e7a8      	b.n	8008214 <_svfiprintf_r+0xd8>
 80082c2:	2300      	movs	r3, #0
 80082c4:	3401      	adds	r4, #1
 80082c6:	9305      	str	r3, [sp, #20]
 80082c8:	4619      	mov	r1, r3
 80082ca:	f04f 0c0a 	mov.w	ip, #10
 80082ce:	4620      	mov	r0, r4
 80082d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d4:	3a30      	subs	r2, #48	@ 0x30
 80082d6:	2a09      	cmp	r2, #9
 80082d8:	d903      	bls.n	80082e2 <_svfiprintf_r+0x1a6>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0c6      	beq.n	800826c <_svfiprintf_r+0x130>
 80082de:	9105      	str	r1, [sp, #20]
 80082e0:	e7c4      	b.n	800826c <_svfiprintf_r+0x130>
 80082e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e6:	4604      	mov	r4, r0
 80082e8:	2301      	movs	r3, #1
 80082ea:	e7f0      	b.n	80082ce <_svfiprintf_r+0x192>
 80082ec:	ab03      	add	r3, sp, #12
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	462a      	mov	r2, r5
 80082f2:	4b0e      	ldr	r3, [pc, #56]	@ (800832c <_svfiprintf_r+0x1f0>)
 80082f4:	a904      	add	r1, sp, #16
 80082f6:	4638      	mov	r0, r7
 80082f8:	f3af 8000 	nop.w
 80082fc:	1c42      	adds	r2, r0, #1
 80082fe:	4606      	mov	r6, r0
 8008300:	d1d6      	bne.n	80082b0 <_svfiprintf_r+0x174>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	065b      	lsls	r3, r3, #25
 8008306:	f53f af2d 	bmi.w	8008164 <_svfiprintf_r+0x28>
 800830a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800830c:	e72c      	b.n	8008168 <_svfiprintf_r+0x2c>
 800830e:	ab03      	add	r3, sp, #12
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	462a      	mov	r2, r5
 8008314:	4b05      	ldr	r3, [pc, #20]	@ (800832c <_svfiprintf_r+0x1f0>)
 8008316:	a904      	add	r1, sp, #16
 8008318:	4638      	mov	r0, r7
 800831a:	f000 f879 	bl	8008410 <_printf_i>
 800831e:	e7ed      	b.n	80082fc <_svfiprintf_r+0x1c0>
 8008320:	08008f9c 	.word	0x08008f9c
 8008324:	08008fa6 	.word	0x08008fa6
 8008328:	00000000 	.word	0x00000000
 800832c:	08008085 	.word	0x08008085
 8008330:	08008fa2 	.word	0x08008fa2

08008334 <_printf_common>:
 8008334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008338:	4616      	mov	r6, r2
 800833a:	4698      	mov	r8, r3
 800833c:	688a      	ldr	r2, [r1, #8]
 800833e:	690b      	ldr	r3, [r1, #16]
 8008340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008344:	4293      	cmp	r3, r2
 8008346:	bfb8      	it	lt
 8008348:	4613      	movlt	r3, r2
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008350:	4607      	mov	r7, r0
 8008352:	460c      	mov	r4, r1
 8008354:	b10a      	cbz	r2, 800835a <_printf_common+0x26>
 8008356:	3301      	adds	r3, #1
 8008358:	6033      	str	r3, [r6, #0]
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	0699      	lsls	r1, r3, #26
 800835e:	bf42      	ittt	mi
 8008360:	6833      	ldrmi	r3, [r6, #0]
 8008362:	3302      	addmi	r3, #2
 8008364:	6033      	strmi	r3, [r6, #0]
 8008366:	6825      	ldr	r5, [r4, #0]
 8008368:	f015 0506 	ands.w	r5, r5, #6
 800836c:	d106      	bne.n	800837c <_printf_common+0x48>
 800836e:	f104 0a19 	add.w	sl, r4, #25
 8008372:	68e3      	ldr	r3, [r4, #12]
 8008374:	6832      	ldr	r2, [r6, #0]
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	42ab      	cmp	r3, r5
 800837a:	dc26      	bgt.n	80083ca <_printf_common+0x96>
 800837c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008380:	6822      	ldr	r2, [r4, #0]
 8008382:	3b00      	subs	r3, #0
 8008384:	bf18      	it	ne
 8008386:	2301      	movne	r3, #1
 8008388:	0692      	lsls	r2, r2, #26
 800838a:	d42b      	bmi.n	80083e4 <_printf_common+0xb0>
 800838c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008390:	4641      	mov	r1, r8
 8008392:	4638      	mov	r0, r7
 8008394:	47c8      	blx	r9
 8008396:	3001      	adds	r0, #1
 8008398:	d01e      	beq.n	80083d8 <_printf_common+0xa4>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	6922      	ldr	r2, [r4, #16]
 800839e:	f003 0306 	and.w	r3, r3, #6
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	bf02      	ittt	eq
 80083a6:	68e5      	ldreq	r5, [r4, #12]
 80083a8:	6833      	ldreq	r3, [r6, #0]
 80083aa:	1aed      	subeq	r5, r5, r3
 80083ac:	68a3      	ldr	r3, [r4, #8]
 80083ae:	bf0c      	ite	eq
 80083b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b4:	2500      	movne	r5, #0
 80083b6:	4293      	cmp	r3, r2
 80083b8:	bfc4      	itt	gt
 80083ba:	1a9b      	subgt	r3, r3, r2
 80083bc:	18ed      	addgt	r5, r5, r3
 80083be:	2600      	movs	r6, #0
 80083c0:	341a      	adds	r4, #26
 80083c2:	42b5      	cmp	r5, r6
 80083c4:	d11a      	bne.n	80083fc <_printf_common+0xc8>
 80083c6:	2000      	movs	r0, #0
 80083c8:	e008      	b.n	80083dc <_printf_common+0xa8>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4652      	mov	r2, sl
 80083ce:	4641      	mov	r1, r8
 80083d0:	4638      	mov	r0, r7
 80083d2:	47c8      	blx	r9
 80083d4:	3001      	adds	r0, #1
 80083d6:	d103      	bne.n	80083e0 <_printf_common+0xac>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e0:	3501      	adds	r5, #1
 80083e2:	e7c6      	b.n	8008372 <_printf_common+0x3e>
 80083e4:	18e1      	adds	r1, r4, r3
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	2030      	movs	r0, #48	@ 0x30
 80083ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ee:	4422      	add	r2, r4
 80083f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083f8:	3302      	adds	r3, #2
 80083fa:	e7c7      	b.n	800838c <_printf_common+0x58>
 80083fc:	2301      	movs	r3, #1
 80083fe:	4622      	mov	r2, r4
 8008400:	4641      	mov	r1, r8
 8008402:	4638      	mov	r0, r7
 8008404:	47c8      	blx	r9
 8008406:	3001      	adds	r0, #1
 8008408:	d0e6      	beq.n	80083d8 <_printf_common+0xa4>
 800840a:	3601      	adds	r6, #1
 800840c:	e7d9      	b.n	80083c2 <_printf_common+0x8e>
	...

08008410 <_printf_i>:
 8008410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	7e0f      	ldrb	r7, [r1, #24]
 8008416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008418:	2f78      	cmp	r7, #120	@ 0x78
 800841a:	4691      	mov	r9, r2
 800841c:	4680      	mov	r8, r0
 800841e:	460c      	mov	r4, r1
 8008420:	469a      	mov	sl, r3
 8008422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008426:	d807      	bhi.n	8008438 <_printf_i+0x28>
 8008428:	2f62      	cmp	r7, #98	@ 0x62
 800842a:	d80a      	bhi.n	8008442 <_printf_i+0x32>
 800842c:	2f00      	cmp	r7, #0
 800842e:	f000 80d1 	beq.w	80085d4 <_printf_i+0x1c4>
 8008432:	2f58      	cmp	r7, #88	@ 0x58
 8008434:	f000 80b8 	beq.w	80085a8 <_printf_i+0x198>
 8008438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800843c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008440:	e03a      	b.n	80084b8 <_printf_i+0xa8>
 8008442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008446:	2b15      	cmp	r3, #21
 8008448:	d8f6      	bhi.n	8008438 <_printf_i+0x28>
 800844a:	a101      	add	r1, pc, #4	@ (adr r1, 8008450 <_printf_i+0x40>)
 800844c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008450:	080084a9 	.word	0x080084a9
 8008454:	080084bd 	.word	0x080084bd
 8008458:	08008439 	.word	0x08008439
 800845c:	08008439 	.word	0x08008439
 8008460:	08008439 	.word	0x08008439
 8008464:	08008439 	.word	0x08008439
 8008468:	080084bd 	.word	0x080084bd
 800846c:	08008439 	.word	0x08008439
 8008470:	08008439 	.word	0x08008439
 8008474:	08008439 	.word	0x08008439
 8008478:	08008439 	.word	0x08008439
 800847c:	080085bb 	.word	0x080085bb
 8008480:	080084e7 	.word	0x080084e7
 8008484:	08008575 	.word	0x08008575
 8008488:	08008439 	.word	0x08008439
 800848c:	08008439 	.word	0x08008439
 8008490:	080085dd 	.word	0x080085dd
 8008494:	08008439 	.word	0x08008439
 8008498:	080084e7 	.word	0x080084e7
 800849c:	08008439 	.word	0x08008439
 80084a0:	08008439 	.word	0x08008439
 80084a4:	0800857d 	.word	0x0800857d
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6032      	str	r2, [r6, #0]
 80084b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084b8:	2301      	movs	r3, #1
 80084ba:	e09c      	b.n	80085f6 <_printf_i+0x1e6>
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	6820      	ldr	r0, [r4, #0]
 80084c0:	1d19      	adds	r1, r3, #4
 80084c2:	6031      	str	r1, [r6, #0]
 80084c4:	0606      	lsls	r6, r0, #24
 80084c6:	d501      	bpl.n	80084cc <_printf_i+0xbc>
 80084c8:	681d      	ldr	r5, [r3, #0]
 80084ca:	e003      	b.n	80084d4 <_printf_i+0xc4>
 80084cc:	0645      	lsls	r5, r0, #25
 80084ce:	d5fb      	bpl.n	80084c8 <_printf_i+0xb8>
 80084d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	da03      	bge.n	80084e0 <_printf_i+0xd0>
 80084d8:	232d      	movs	r3, #45	@ 0x2d
 80084da:	426d      	negs	r5, r5
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e0:	4858      	ldr	r0, [pc, #352]	@ (8008644 <_printf_i+0x234>)
 80084e2:	230a      	movs	r3, #10
 80084e4:	e011      	b.n	800850a <_printf_i+0xfa>
 80084e6:	6821      	ldr	r1, [r4, #0]
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	0608      	lsls	r0, r1, #24
 80084ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80084f0:	d402      	bmi.n	80084f8 <_printf_i+0xe8>
 80084f2:	0649      	lsls	r1, r1, #25
 80084f4:	bf48      	it	mi
 80084f6:	b2ad      	uxthmi	r5, r5
 80084f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80084fa:	4852      	ldr	r0, [pc, #328]	@ (8008644 <_printf_i+0x234>)
 80084fc:	6033      	str	r3, [r6, #0]
 80084fe:	bf14      	ite	ne
 8008500:	230a      	movne	r3, #10
 8008502:	2308      	moveq	r3, #8
 8008504:	2100      	movs	r1, #0
 8008506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800850a:	6866      	ldr	r6, [r4, #4]
 800850c:	60a6      	str	r6, [r4, #8]
 800850e:	2e00      	cmp	r6, #0
 8008510:	db05      	blt.n	800851e <_printf_i+0x10e>
 8008512:	6821      	ldr	r1, [r4, #0]
 8008514:	432e      	orrs	r6, r5
 8008516:	f021 0104 	bic.w	r1, r1, #4
 800851a:	6021      	str	r1, [r4, #0]
 800851c:	d04b      	beq.n	80085b6 <_printf_i+0x1a6>
 800851e:	4616      	mov	r6, r2
 8008520:	fbb5 f1f3 	udiv	r1, r5, r3
 8008524:	fb03 5711 	mls	r7, r3, r1, r5
 8008528:	5dc7      	ldrb	r7, [r0, r7]
 800852a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800852e:	462f      	mov	r7, r5
 8008530:	42bb      	cmp	r3, r7
 8008532:	460d      	mov	r5, r1
 8008534:	d9f4      	bls.n	8008520 <_printf_i+0x110>
 8008536:	2b08      	cmp	r3, #8
 8008538:	d10b      	bne.n	8008552 <_printf_i+0x142>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	07df      	lsls	r7, r3, #31
 800853e:	d508      	bpl.n	8008552 <_printf_i+0x142>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	6861      	ldr	r1, [r4, #4]
 8008544:	4299      	cmp	r1, r3
 8008546:	bfde      	ittt	le
 8008548:	2330      	movle	r3, #48	@ 0x30
 800854a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800854e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008552:	1b92      	subs	r2, r2, r6
 8008554:	6122      	str	r2, [r4, #16]
 8008556:	f8cd a000 	str.w	sl, [sp]
 800855a:	464b      	mov	r3, r9
 800855c:	aa03      	add	r2, sp, #12
 800855e:	4621      	mov	r1, r4
 8008560:	4640      	mov	r0, r8
 8008562:	f7ff fee7 	bl	8008334 <_printf_common>
 8008566:	3001      	adds	r0, #1
 8008568:	d14a      	bne.n	8008600 <_printf_i+0x1f0>
 800856a:	f04f 30ff 	mov.w	r0, #4294967295
 800856e:	b004      	add	sp, #16
 8008570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	f043 0320 	orr.w	r3, r3, #32
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	4832      	ldr	r0, [pc, #200]	@ (8008648 <_printf_i+0x238>)
 800857e:	2778      	movs	r7, #120	@ 0x78
 8008580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	6831      	ldr	r1, [r6, #0]
 8008588:	061f      	lsls	r7, r3, #24
 800858a:	f851 5b04 	ldr.w	r5, [r1], #4
 800858e:	d402      	bmi.n	8008596 <_printf_i+0x186>
 8008590:	065f      	lsls	r7, r3, #25
 8008592:	bf48      	it	mi
 8008594:	b2ad      	uxthmi	r5, r5
 8008596:	6031      	str	r1, [r6, #0]
 8008598:	07d9      	lsls	r1, r3, #31
 800859a:	bf44      	itt	mi
 800859c:	f043 0320 	orrmi.w	r3, r3, #32
 80085a0:	6023      	strmi	r3, [r4, #0]
 80085a2:	b11d      	cbz	r5, 80085ac <_printf_i+0x19c>
 80085a4:	2310      	movs	r3, #16
 80085a6:	e7ad      	b.n	8008504 <_printf_i+0xf4>
 80085a8:	4826      	ldr	r0, [pc, #152]	@ (8008644 <_printf_i+0x234>)
 80085aa:	e7e9      	b.n	8008580 <_printf_i+0x170>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	f023 0320 	bic.w	r3, r3, #32
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	e7f6      	b.n	80085a4 <_printf_i+0x194>
 80085b6:	4616      	mov	r6, r2
 80085b8:	e7bd      	b.n	8008536 <_printf_i+0x126>
 80085ba:	6833      	ldr	r3, [r6, #0]
 80085bc:	6825      	ldr	r5, [r4, #0]
 80085be:	6961      	ldr	r1, [r4, #20]
 80085c0:	1d18      	adds	r0, r3, #4
 80085c2:	6030      	str	r0, [r6, #0]
 80085c4:	062e      	lsls	r6, r5, #24
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	d501      	bpl.n	80085ce <_printf_i+0x1be>
 80085ca:	6019      	str	r1, [r3, #0]
 80085cc:	e002      	b.n	80085d4 <_printf_i+0x1c4>
 80085ce:	0668      	lsls	r0, r5, #25
 80085d0:	d5fb      	bpl.n	80085ca <_printf_i+0x1ba>
 80085d2:	8019      	strh	r1, [r3, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	4616      	mov	r6, r2
 80085da:	e7bc      	b.n	8008556 <_printf_i+0x146>
 80085dc:	6833      	ldr	r3, [r6, #0]
 80085de:	1d1a      	adds	r2, r3, #4
 80085e0:	6032      	str	r2, [r6, #0]
 80085e2:	681e      	ldr	r6, [r3, #0]
 80085e4:	6862      	ldr	r2, [r4, #4]
 80085e6:	2100      	movs	r1, #0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7f9 fd29 	bl	8002040 <memchr>
 80085ee:	b108      	cbz	r0, 80085f4 <_printf_i+0x1e4>
 80085f0:	1b80      	subs	r0, r0, r6
 80085f2:	6060      	str	r0, [r4, #4]
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	2300      	movs	r3, #0
 80085fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085fe:	e7aa      	b.n	8008556 <_printf_i+0x146>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	4632      	mov	r2, r6
 8008604:	4649      	mov	r1, r9
 8008606:	4640      	mov	r0, r8
 8008608:	47d0      	blx	sl
 800860a:	3001      	adds	r0, #1
 800860c:	d0ad      	beq.n	800856a <_printf_i+0x15a>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	079b      	lsls	r3, r3, #30
 8008612:	d413      	bmi.n	800863c <_printf_i+0x22c>
 8008614:	68e0      	ldr	r0, [r4, #12]
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	4298      	cmp	r0, r3
 800861a:	bfb8      	it	lt
 800861c:	4618      	movlt	r0, r3
 800861e:	e7a6      	b.n	800856e <_printf_i+0x15e>
 8008620:	2301      	movs	r3, #1
 8008622:	4632      	mov	r2, r6
 8008624:	4649      	mov	r1, r9
 8008626:	4640      	mov	r0, r8
 8008628:	47d0      	blx	sl
 800862a:	3001      	adds	r0, #1
 800862c:	d09d      	beq.n	800856a <_printf_i+0x15a>
 800862e:	3501      	adds	r5, #1
 8008630:	68e3      	ldr	r3, [r4, #12]
 8008632:	9903      	ldr	r1, [sp, #12]
 8008634:	1a5b      	subs	r3, r3, r1
 8008636:	42ab      	cmp	r3, r5
 8008638:	dcf2      	bgt.n	8008620 <_printf_i+0x210>
 800863a:	e7eb      	b.n	8008614 <_printf_i+0x204>
 800863c:	2500      	movs	r5, #0
 800863e:	f104 0619 	add.w	r6, r4, #25
 8008642:	e7f5      	b.n	8008630 <_printf_i+0x220>
 8008644:	08008fad 	.word	0x08008fad
 8008648:	08008fbe 	.word	0x08008fbe

0800864c <memmove>:
 800864c:	4288      	cmp	r0, r1
 800864e:	b510      	push	{r4, lr}
 8008650:	eb01 0402 	add.w	r4, r1, r2
 8008654:	d902      	bls.n	800865c <memmove+0x10>
 8008656:	4284      	cmp	r4, r0
 8008658:	4623      	mov	r3, r4
 800865a:	d807      	bhi.n	800866c <memmove+0x20>
 800865c:	1e43      	subs	r3, r0, #1
 800865e:	42a1      	cmp	r1, r4
 8008660:	d008      	beq.n	8008674 <memmove+0x28>
 8008662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800866a:	e7f8      	b.n	800865e <memmove+0x12>
 800866c:	4402      	add	r2, r0
 800866e:	4601      	mov	r1, r0
 8008670:	428a      	cmp	r2, r1
 8008672:	d100      	bne.n	8008676 <memmove+0x2a>
 8008674:	bd10      	pop	{r4, pc}
 8008676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800867a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800867e:	e7f7      	b.n	8008670 <memmove+0x24>

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	@ (800869c <_sbrk_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7fb f818 	bl	80036c0 <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	200012d0 	.word	0x200012d0

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}

080086bc <_realloc_r>:
 80086bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c0:	4607      	mov	r7, r0
 80086c2:	4614      	mov	r4, r2
 80086c4:	460d      	mov	r5, r1
 80086c6:	b921      	cbnz	r1, 80086d2 <_realloc_r+0x16>
 80086c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	4611      	mov	r1, r2
 80086ce:	f7ff bc4d 	b.w	8007f6c <_malloc_r>
 80086d2:	b92a      	cbnz	r2, 80086e0 <_realloc_r+0x24>
 80086d4:	f7ff fbde 	bl	8007e94 <_free_r>
 80086d8:	4625      	mov	r5, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	f000 f81a 	bl	8008718 <_malloc_usable_size_r>
 80086e4:	4284      	cmp	r4, r0
 80086e6:	4606      	mov	r6, r0
 80086e8:	d802      	bhi.n	80086f0 <_realloc_r+0x34>
 80086ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086ee:	d8f4      	bhi.n	80086da <_realloc_r+0x1e>
 80086f0:	4621      	mov	r1, r4
 80086f2:	4638      	mov	r0, r7
 80086f4:	f7ff fc3a 	bl	8007f6c <_malloc_r>
 80086f8:	4680      	mov	r8, r0
 80086fa:	b908      	cbnz	r0, 8008700 <_realloc_r+0x44>
 80086fc:	4645      	mov	r5, r8
 80086fe:	e7ec      	b.n	80086da <_realloc_r+0x1e>
 8008700:	42b4      	cmp	r4, r6
 8008702:	4622      	mov	r2, r4
 8008704:	4629      	mov	r1, r5
 8008706:	bf28      	it	cs
 8008708:	4632      	movcs	r2, r6
 800870a:	f7ff ffc9 	bl	80086a0 <memcpy>
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff fbbf 	bl	8007e94 <_free_r>
 8008716:	e7f1      	b.n	80086fc <_realloc_r+0x40>

08008718 <_malloc_usable_size_r>:
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f18      	subs	r0, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfbc      	itt	lt
 8008722:	580b      	ldrlt	r3, [r1, r0]
 8008724:	18c0      	addlt	r0, r0, r3
 8008726:	4770      	bx	lr

08008728 <powf>:
 8008728:	b508      	push	{r3, lr}
 800872a:	ed2d 8b04 	vpush	{d8-d9}
 800872e:	eeb0 8a60 	vmov.f32	s16, s1
 8008732:	eeb0 9a40 	vmov.f32	s18, s0
 8008736:	f000 f87d 	bl	8008834 <__ieee754_powf>
 800873a:	eeb4 8a48 	vcmp.f32	s16, s16
 800873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008742:	eef0 8a40 	vmov.f32	s17, s0
 8008746:	d63e      	bvs.n	80087c6 <powf+0x9e>
 8008748:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800874c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008750:	d112      	bne.n	8008778 <powf+0x50>
 8008752:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875a:	d039      	beq.n	80087d0 <powf+0xa8>
 800875c:	eeb0 0a48 	vmov.f32	s0, s16
 8008760:	f000 f839 	bl	80087d6 <finitef>
 8008764:	b378      	cbz	r0, 80087c6 <powf+0x9e>
 8008766:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800876a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876e:	d52a      	bpl.n	80087c6 <powf+0x9e>
 8008770:	f7ff fb60 	bl	8007e34 <__errno>
 8008774:	2322      	movs	r3, #34	@ 0x22
 8008776:	e014      	b.n	80087a2 <powf+0x7a>
 8008778:	f000 f82d 	bl	80087d6 <finitef>
 800877c:	b998      	cbnz	r0, 80087a6 <powf+0x7e>
 800877e:	eeb0 0a49 	vmov.f32	s0, s18
 8008782:	f000 f828 	bl	80087d6 <finitef>
 8008786:	b170      	cbz	r0, 80087a6 <powf+0x7e>
 8008788:	eeb0 0a48 	vmov.f32	s0, s16
 800878c:	f000 f823 	bl	80087d6 <finitef>
 8008790:	b148      	cbz	r0, 80087a6 <powf+0x7e>
 8008792:	eef4 8a68 	vcmp.f32	s17, s17
 8008796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879a:	d7e9      	bvc.n	8008770 <powf+0x48>
 800879c:	f7ff fb4a 	bl	8007e34 <__errno>
 80087a0:	2321      	movs	r3, #33	@ 0x21
 80087a2:	6003      	str	r3, [r0, #0]
 80087a4:	e00f      	b.n	80087c6 <powf+0x9e>
 80087a6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80087aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ae:	d10a      	bne.n	80087c6 <powf+0x9e>
 80087b0:	eeb0 0a49 	vmov.f32	s0, s18
 80087b4:	f000 f80f 	bl	80087d6 <finitef>
 80087b8:	b128      	cbz	r0, 80087c6 <powf+0x9e>
 80087ba:	eeb0 0a48 	vmov.f32	s0, s16
 80087be:	f000 f80a 	bl	80087d6 <finitef>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1d4      	bne.n	8008770 <powf+0x48>
 80087c6:	eeb0 0a68 	vmov.f32	s0, s17
 80087ca:	ecbd 8b04 	vpop	{d8-d9}
 80087ce:	bd08      	pop	{r3, pc}
 80087d0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80087d4:	e7f7      	b.n	80087c6 <powf+0x9e>

080087d6 <finitef>:
 80087d6:	ee10 3a10 	vmov	r3, s0
 80087da:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80087de:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80087e2:	bfac      	ite	ge
 80087e4:	2000      	movge	r0, #0
 80087e6:	2001      	movlt	r0, #1
 80087e8:	4770      	bx	lr
	...

080087ec <roundf>:
 80087ec:	ee10 0a10 	vmov	r0, s0
 80087f0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80087f4:	3a7f      	subs	r2, #127	@ 0x7f
 80087f6:	2a16      	cmp	r2, #22
 80087f8:	dc15      	bgt.n	8008826 <roundf+0x3a>
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	da08      	bge.n	8008810 <roundf+0x24>
 80087fe:	3201      	adds	r2, #1
 8008800:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8008804:	d101      	bne.n	800880a <roundf+0x1e>
 8008806:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800880a:	ee00 3a10 	vmov	s0, r3
 800880e:	4770      	bx	lr
 8008810:	4907      	ldr	r1, [pc, #28]	@ (8008830 <roundf+0x44>)
 8008812:	4111      	asrs	r1, r2
 8008814:	4201      	tst	r1, r0
 8008816:	d0fa      	beq.n	800880e <roundf+0x22>
 8008818:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800881c:	4113      	asrs	r3, r2
 800881e:	4403      	add	r3, r0
 8008820:	ea23 0301 	bic.w	r3, r3, r1
 8008824:	e7f1      	b.n	800880a <roundf+0x1e>
 8008826:	2a80      	cmp	r2, #128	@ 0x80
 8008828:	d1f1      	bne.n	800880e <roundf+0x22>
 800882a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800882e:	4770      	bx	lr
 8008830:	007fffff 	.word	0x007fffff

08008834 <__ieee754_powf>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	ee10 4a90 	vmov	r4, s1
 800883c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8008840:	ed2d 8b02 	vpush	{d8}
 8008844:	ee10 6a10 	vmov	r6, s0
 8008848:	eeb0 8a40 	vmov.f32	s16, s0
 800884c:	eef0 8a60 	vmov.f32	s17, s1
 8008850:	d10c      	bne.n	800886c <__ieee754_powf+0x38>
 8008852:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8008856:	0076      	lsls	r6, r6, #1
 8008858:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800885c:	f240 8274 	bls.w	8008d48 <__ieee754_powf+0x514>
 8008860:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008864:	ecbd 8b02 	vpop	{d8}
 8008868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8008870:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8008874:	d802      	bhi.n	800887c <__ieee754_powf+0x48>
 8008876:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800887a:	d908      	bls.n	800888e <__ieee754_powf+0x5a>
 800887c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008880:	d1ee      	bne.n	8008860 <__ieee754_powf+0x2c>
 8008882:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008886:	0064      	lsls	r4, r4, #1
 8008888:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800888c:	e7e6      	b.n	800885c <__ieee754_powf+0x28>
 800888e:	2e00      	cmp	r6, #0
 8008890:	da1f      	bge.n	80088d2 <__ieee754_powf+0x9e>
 8008892:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8008896:	f080 8260 	bcs.w	8008d5a <__ieee754_powf+0x526>
 800889a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800889e:	d32f      	bcc.n	8008900 <__ieee754_powf+0xcc>
 80088a0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80088a4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80088a8:	fa49 f503 	asr.w	r5, r9, r3
 80088ac:	fa05 f303 	lsl.w	r3, r5, r3
 80088b0:	454b      	cmp	r3, r9
 80088b2:	d123      	bne.n	80088fc <__ieee754_powf+0xc8>
 80088b4:	f005 0501 	and.w	r5, r5, #1
 80088b8:	f1c5 0502 	rsb	r5, r5, #2
 80088bc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80088c0:	d11f      	bne.n	8008902 <__ieee754_powf+0xce>
 80088c2:	2c00      	cmp	r4, #0
 80088c4:	f280 8246 	bge.w	8008d54 <__ieee754_powf+0x520>
 80088c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80088cc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80088d0:	e7c8      	b.n	8008864 <__ieee754_powf+0x30>
 80088d2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80088d6:	d111      	bne.n	80088fc <__ieee754_powf+0xc8>
 80088d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80088dc:	f000 8234 	beq.w	8008d48 <__ieee754_powf+0x514>
 80088e0:	d906      	bls.n	80088f0 <__ieee754_powf+0xbc>
 80088e2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8008bf8 <__ieee754_powf+0x3c4>
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	bfa8      	it	ge
 80088ea:	eeb0 0a68 	vmovge.f32	s0, s17
 80088ee:	e7b9      	b.n	8008864 <__ieee754_powf+0x30>
 80088f0:	2c00      	cmp	r4, #0
 80088f2:	f280 822c 	bge.w	8008d4e <__ieee754_powf+0x51a>
 80088f6:	eeb1 0a68 	vneg.f32	s0, s17
 80088fa:	e7b3      	b.n	8008864 <__ieee754_powf+0x30>
 80088fc:	2500      	movs	r5, #0
 80088fe:	e7dd      	b.n	80088bc <__ieee754_powf+0x88>
 8008900:	2500      	movs	r5, #0
 8008902:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008906:	d102      	bne.n	800890e <__ieee754_powf+0xda>
 8008908:	ee28 0a08 	vmul.f32	s0, s16, s16
 800890c:	e7aa      	b.n	8008864 <__ieee754_powf+0x30>
 800890e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008912:	f040 8227 	bne.w	8008d64 <__ieee754_powf+0x530>
 8008916:	2e00      	cmp	r6, #0
 8008918:	f2c0 8224 	blt.w	8008d64 <__ieee754_powf+0x530>
 800891c:	eeb0 0a48 	vmov.f32	s0, s16
 8008920:	ecbd 8b02 	vpop	{d8}
 8008924:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008928:	f000 bae6 	b.w	8008ef8 <__ieee754_sqrtf>
 800892c:	2d01      	cmp	r5, #1
 800892e:	d199      	bne.n	8008864 <__ieee754_powf+0x30>
 8008930:	eeb1 0a40 	vneg.f32	s0, s0
 8008934:	e796      	b.n	8008864 <__ieee754_powf+0x30>
 8008936:	0ff0      	lsrs	r0, r6, #31
 8008938:	3801      	subs	r0, #1
 800893a:	ea55 0300 	orrs.w	r3, r5, r0
 800893e:	d104      	bne.n	800894a <__ieee754_powf+0x116>
 8008940:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008944:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008948:	e78c      	b.n	8008864 <__ieee754_powf+0x30>
 800894a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800894e:	d96d      	bls.n	8008a2c <__ieee754_powf+0x1f8>
 8008950:	4baa      	ldr	r3, [pc, #680]	@ (8008bfc <__ieee754_powf+0x3c8>)
 8008952:	4598      	cmp	r8, r3
 8008954:	d808      	bhi.n	8008968 <__ieee754_powf+0x134>
 8008956:	2c00      	cmp	r4, #0
 8008958:	da0b      	bge.n	8008972 <__ieee754_powf+0x13e>
 800895a:	2000      	movs	r0, #0
 800895c:	ecbd 8b02 	vpop	{d8}
 8008960:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008964:	f000 bac2 	b.w	8008eec <__math_oflowf>
 8008968:	4ba5      	ldr	r3, [pc, #660]	@ (8008c00 <__ieee754_powf+0x3cc>)
 800896a:	4598      	cmp	r8, r3
 800896c:	d908      	bls.n	8008980 <__ieee754_powf+0x14c>
 800896e:	2c00      	cmp	r4, #0
 8008970:	dcf3      	bgt.n	800895a <__ieee754_powf+0x126>
 8008972:	2000      	movs	r0, #0
 8008974:	ecbd 8b02 	vpop	{d8}
 8008978:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	f000 bab0 	b.w	8008ee0 <__math_uflowf>
 8008980:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008984:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008988:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8008c04 <__ieee754_powf+0x3d0>
 800898c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008990:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008994:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008998:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800899c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80089a0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8008c08 <__ieee754_powf+0x3d4>
 80089a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089a8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8008c0c <__ieee754_powf+0x3d8>
 80089ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80089b0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8008c10 <__ieee754_powf+0x3dc>
 80089b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80089b8:	eeb0 7a67 	vmov.f32	s14, s15
 80089bc:	eea0 7a26 	vfma.f32	s14, s0, s13
 80089c0:	ee17 3a10 	vmov	r3, s14
 80089c4:	f36f 030b 	bfc	r3, #0, #12
 80089c8:	ee07 3a10 	vmov	s14, r3
 80089cc:	eeb0 6a47 	vmov.f32	s12, s14
 80089d0:	eea0 6a66 	vfms.f32	s12, s0, s13
 80089d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80089d8:	3d01      	subs	r5, #1
 80089da:	4305      	orrs	r5, r0
 80089dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80089e4:	f36f 040b 	bfc	r4, #0, #12
 80089e8:	bf18      	it	ne
 80089ea:	eeb0 8a66 	vmovne.f32	s16, s13
 80089ee:	ee06 4a90 	vmov	s13, r4
 80089f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80089f6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80089fa:	ee67 7a26 	vmul.f32	s15, s14, s13
 80089fe:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008a02:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008a06:	ee17 1a10 	vmov	r1, s14
 8008a0a:	2900      	cmp	r1, #0
 8008a0c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008a10:	f340 80dd 	ble.w	8008bce <__ieee754_powf+0x39a>
 8008a14:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8008a18:	f240 80ca 	bls.w	8008bb0 <__ieee754_powf+0x37c>
 8008a1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a24:	bf4c      	ite	mi
 8008a26:	2001      	movmi	r0, #1
 8008a28:	2000      	movpl	r0, #0
 8008a2a:	e797      	b.n	800895c <__ieee754_powf+0x128>
 8008a2c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008a30:	bf01      	itttt	eq
 8008a32:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8008c14 <__ieee754_powf+0x3e0>
 8008a36:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008a3a:	f06f 0317 	mvneq.w	r3, #23
 8008a3e:	ee17 7a90 	vmoveq	r7, s15
 8008a42:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8008a46:	bf18      	it	ne
 8008a48:	2300      	movne	r3, #0
 8008a4a:	3a7f      	subs	r2, #127	@ 0x7f
 8008a4c:	441a      	add	r2, r3
 8008a4e:	4b72      	ldr	r3, [pc, #456]	@ (8008c18 <__ieee754_powf+0x3e4>)
 8008a50:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8008a54:	429f      	cmp	r7, r3
 8008a56:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8008a5a:	dd06      	ble.n	8008a6a <__ieee754_powf+0x236>
 8008a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8008c1c <__ieee754_powf+0x3e8>)
 8008a5e:	429f      	cmp	r7, r3
 8008a60:	f340 80a4 	ble.w	8008bac <__ieee754_powf+0x378>
 8008a64:	3201      	adds	r2, #1
 8008a66:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8008c20 <__ieee754_powf+0x3ec>)
 8008a6e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008a72:	ee07 1a10 	vmov	s14, r1
 8008a76:	edd3 5a00 	vldr	s11, [r3]
 8008a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8008c24 <__ieee754_powf+0x3f0>)
 8008a7c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8008a80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a84:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008a88:	1049      	asrs	r1, r1, #1
 8008a8a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8008a8e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8008a92:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8008a96:	ee37 6a65 	vsub.f32	s12, s14, s11
 8008a9a:	ee07 1a90 	vmov	s15, r1
 8008a9e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8008aa2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8008aa6:	ee15 7a10 	vmov	r7, s10
 8008aaa:	401f      	ands	r7, r3
 8008aac:	ee06 7a90 	vmov	s13, r7
 8008ab0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8008ab4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008ab8:	ee65 7a05 	vmul.f32	s15, s10, s10
 8008abc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008ac0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008c28 <__ieee754_powf+0x3f4>
 8008ac4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8008c2c <__ieee754_powf+0x3f8>
 8008ac8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8008acc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8008c30 <__ieee754_powf+0x3fc>
 8008ad0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008ad4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8008c04 <__ieee754_powf+0x3d0>
 8008ad8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8008adc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8008c34 <__ieee754_powf+0x400>
 8008ae0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008ae4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8008c38 <__ieee754_powf+0x404>
 8008ae8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008aec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8008af0:	ee35 7a26 	vadd.f32	s14, s10, s13
 8008af4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8008af8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008afc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8008b00:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8008b04:	eef0 5a67 	vmov.f32	s11, s15
 8008b08:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8008b0c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8008b10:	ee15 1a90 	vmov	r1, s11
 8008b14:	4019      	ands	r1, r3
 8008b16:	ee05 1a90 	vmov	s11, r1
 8008b1a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008b1e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8008b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b26:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008b2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008b2e:	eeb0 6a67 	vmov.f32	s12, s15
 8008b32:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008b36:	ee16 1a10 	vmov	r1, s12
 8008b3a:	4019      	ands	r1, r3
 8008b3c:	ee06 1a10 	vmov	s12, r1
 8008b40:	eeb0 7a46 	vmov.f32	s14, s12
 8008b44:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8008b48:	493c      	ldr	r1, [pc, #240]	@ (8008c3c <__ieee754_powf+0x408>)
 8008b4a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8008b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b52:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8008c40 <__ieee754_powf+0x40c>
 8008b56:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8008c44 <__ieee754_powf+0x410>
 8008b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b5e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008c48 <__ieee754_powf+0x414>
 8008b62:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b66:	ed91 7a00 	vldr	s14, [r1]
 8008b6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b6e:	ee07 2a10 	vmov	s14, r2
 8008b72:	4a36      	ldr	r2, [pc, #216]	@ (8008c4c <__ieee754_powf+0x418>)
 8008b74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b78:	eeb0 7a67 	vmov.f32	s14, s15
 8008b7c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008b80:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8008b84:	ed92 5a00 	vldr	s10, [r2]
 8008b88:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008b8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008b90:	ee17 2a10 	vmov	r2, s14
 8008b94:	401a      	ands	r2, r3
 8008b96:	ee07 2a10 	vmov	s14, r2
 8008b9a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008b9e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008ba2:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008ba6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008baa:	e715      	b.n	80089d8 <__ieee754_powf+0x1a4>
 8008bac:	2601      	movs	r6, #1
 8008bae:	e75d      	b.n	8008a6c <__ieee754_powf+0x238>
 8008bb0:	d152      	bne.n	8008c58 <__ieee754_powf+0x424>
 8008bb2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8008c50 <__ieee754_powf+0x41c>
 8008bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bba:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008bbe:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc6:	f73f af29 	bgt.w	8008a1c <__ieee754_powf+0x1e8>
 8008bca:	2386      	movs	r3, #134	@ 0x86
 8008bcc:	e048      	b.n	8008c60 <__ieee754_powf+0x42c>
 8008bce:	4a21      	ldr	r2, [pc, #132]	@ (8008c54 <__ieee754_powf+0x420>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d907      	bls.n	8008be4 <__ieee754_powf+0x3b0>
 8008bd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bdc:	bf4c      	ite	mi
 8008bde:	2001      	movmi	r0, #1
 8008be0:	2000      	movpl	r0, #0
 8008be2:	e6c7      	b.n	8008974 <__ieee754_powf+0x140>
 8008be4:	d138      	bne.n	8008c58 <__ieee754_powf+0x424>
 8008be6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf2:	dbea      	blt.n	8008bca <__ieee754_powf+0x396>
 8008bf4:	e7ee      	b.n	8008bd4 <__ieee754_powf+0x3a0>
 8008bf6:	bf00      	nop
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	3f7ffff3 	.word	0x3f7ffff3
 8008c00:	3f800007 	.word	0x3f800007
 8008c04:	3eaaaaab 	.word	0x3eaaaaab
 8008c08:	3fb8aa00 	.word	0x3fb8aa00
 8008c0c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008c10:	36eca570 	.word	0x36eca570
 8008c14:	4b800000 	.word	0x4b800000
 8008c18:	001cc471 	.word	0x001cc471
 8008c1c:	005db3d6 	.word	0x005db3d6
 8008c20:	08008fe0 	.word	0x08008fe0
 8008c24:	fffff000 	.word	0xfffff000
 8008c28:	3e6c3255 	.word	0x3e6c3255
 8008c2c:	3e53f142 	.word	0x3e53f142
 8008c30:	3e8ba305 	.word	0x3e8ba305
 8008c34:	3edb6db7 	.word	0x3edb6db7
 8008c38:	3f19999a 	.word	0x3f19999a
 8008c3c:	08008fd0 	.word	0x08008fd0
 8008c40:	3f76384f 	.word	0x3f76384f
 8008c44:	3f763800 	.word	0x3f763800
 8008c48:	369dc3a0 	.word	0x369dc3a0
 8008c4c:	08008fd8 	.word	0x08008fd8
 8008c50:	3338aa3c 	.word	0x3338aa3c
 8008c54:	43160000 	.word	0x43160000
 8008c58:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008c5c:	d96f      	bls.n	8008d3e <__ieee754_powf+0x50a>
 8008c5e:	15db      	asrs	r3, r3, #23
 8008c60:	3b7e      	subs	r3, #126	@ 0x7e
 8008c62:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008c66:	4118      	asrs	r0, r3
 8008c68:	4408      	add	r0, r1
 8008c6a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8008da8 <__ieee754_powf+0x574>)
 8008c70:	3b7f      	subs	r3, #127	@ 0x7f
 8008c72:	411a      	asrs	r2, r3
 8008c74:	4002      	ands	r2, r0
 8008c76:	ee07 2a10 	vmov	s14, r2
 8008c7a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008c7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008c82:	f1c3 0317 	rsb	r3, r3, #23
 8008c86:	4118      	asrs	r0, r3
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c8e:	bfb8      	it	lt
 8008c90:	4240      	neglt	r0, r0
 8008c92:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8008c96:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8008dac <__ieee754_powf+0x578>
 8008c9a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008db0 <__ieee754_powf+0x57c>
 8008c9e:	ee16 3a90 	vmov	r3, s13
 8008ca2:	f36f 030b 	bfc	r3, #0, #12
 8008ca6:	ee06 3a90 	vmov	s13, r3
 8008caa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008cae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008cb2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008cb6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8008db4 <__ieee754_powf+0x580>
 8008cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cbe:	eee0 7a87 	vfma.f32	s15, s1, s14
 8008cc2:	eeb0 7a67 	vmov.f32	s14, s15
 8008cc6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8008cca:	eef0 5a47 	vmov.f32	s11, s14
 8008cce:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8008cd2:	ee67 6a07 	vmul.f32	s13, s14, s14
 8008cd6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008cda:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008db8 <__ieee754_powf+0x584>
 8008cde:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8008dbc <__ieee754_powf+0x588>
 8008ce2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008ce6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8008dc0 <__ieee754_powf+0x58c>
 8008cea:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008cee:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8008dc4 <__ieee754_powf+0x590>
 8008cf2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8008cf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008dc8 <__ieee754_powf+0x594>
 8008cfa:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008cfe:	eeb0 6a47 	vmov.f32	s12, s14
 8008d02:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8008d06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8008d0a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8008d0e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008d12:	eee7 7a27 	vfma.f32	s15, s14, s15
 8008d16:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008d1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d26:	ee10 3a10 	vmov	r3, s0
 8008d2a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008d2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d32:	da06      	bge.n	8008d42 <__ieee754_powf+0x50e>
 8008d34:	f000 f854 	bl	8008de0 <scalbnf>
 8008d38:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008d3c:	e592      	b.n	8008864 <__ieee754_powf+0x30>
 8008d3e:	2000      	movs	r0, #0
 8008d40:	e7a7      	b.n	8008c92 <__ieee754_powf+0x45e>
 8008d42:	ee00 3a10 	vmov	s0, r3
 8008d46:	e7f7      	b.n	8008d38 <__ieee754_powf+0x504>
 8008d48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008d4c:	e58a      	b.n	8008864 <__ieee754_powf+0x30>
 8008d4e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8008dcc <__ieee754_powf+0x598>
 8008d52:	e587      	b.n	8008864 <__ieee754_powf+0x30>
 8008d54:	eeb0 0a48 	vmov.f32	s0, s16
 8008d58:	e584      	b.n	8008864 <__ieee754_powf+0x30>
 8008d5a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008d5e:	f43f adbb 	beq.w	80088d8 <__ieee754_powf+0xa4>
 8008d62:	2502      	movs	r5, #2
 8008d64:	eeb0 0a48 	vmov.f32	s0, s16
 8008d68:	f000 f832 	bl	8008dd0 <fabsf>
 8008d6c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008d70:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008d74:	4647      	mov	r7, r8
 8008d76:	d003      	beq.n	8008d80 <__ieee754_powf+0x54c>
 8008d78:	f1b8 0f00 	cmp.w	r8, #0
 8008d7c:	f47f addb 	bne.w	8008936 <__ieee754_powf+0x102>
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	bfbc      	itt	lt
 8008d84:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8008d88:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008d8c:	2e00      	cmp	r6, #0
 8008d8e:	f6bf ad69 	bge.w	8008864 <__ieee754_powf+0x30>
 8008d92:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008d96:	ea58 0805 	orrs.w	r8, r8, r5
 8008d9a:	f47f adc7 	bne.w	800892c <__ieee754_powf+0xf8>
 8008d9e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008da2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008da6:	e55d      	b.n	8008864 <__ieee754_powf+0x30>
 8008da8:	ff800000 	.word	0xff800000
 8008dac:	3f317218 	.word	0x3f317218
 8008db0:	3f317200 	.word	0x3f317200
 8008db4:	35bfbe8c 	.word	0x35bfbe8c
 8008db8:	b5ddea0e 	.word	0xb5ddea0e
 8008dbc:	3331bb4c 	.word	0x3331bb4c
 8008dc0:	388ab355 	.word	0x388ab355
 8008dc4:	bb360b61 	.word	0xbb360b61
 8008dc8:	3e2aaaab 	.word	0x3e2aaaab
 8008dcc:	00000000 	.word	0x00000000

08008dd0 <fabsf>:
 8008dd0:	ee10 3a10 	vmov	r3, s0
 8008dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dd8:	ee00 3a10 	vmov	s0, r3
 8008ddc:	4770      	bx	lr
	...

08008de0 <scalbnf>:
 8008de0:	ee10 3a10 	vmov	r3, s0
 8008de4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008de8:	d02b      	beq.n	8008e42 <scalbnf+0x62>
 8008dea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008dee:	d302      	bcc.n	8008df6 <scalbnf+0x16>
 8008df0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008df4:	4770      	bx	lr
 8008df6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008dfa:	d123      	bne.n	8008e44 <scalbnf+0x64>
 8008dfc:	4b24      	ldr	r3, [pc, #144]	@ (8008e90 <scalbnf+0xb0>)
 8008dfe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008e94 <scalbnf+0xb4>
 8008e02:	4298      	cmp	r0, r3
 8008e04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e08:	db17      	blt.n	8008e3a <scalbnf+0x5a>
 8008e0a:	ee10 3a10 	vmov	r3, s0
 8008e0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e12:	3a19      	subs	r2, #25
 8008e14:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008e18:	4288      	cmp	r0, r1
 8008e1a:	dd15      	ble.n	8008e48 <scalbnf+0x68>
 8008e1c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008e98 <scalbnf+0xb8>
 8008e20:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008e9c <scalbnf+0xbc>
 8008e24:	ee10 3a10 	vmov	r3, s0
 8008e28:	eeb0 7a67 	vmov.f32	s14, s15
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bfb8      	it	lt
 8008e30:	eef0 7a66 	vmovlt.f32	s15, s13
 8008e34:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008e38:	4770      	bx	lr
 8008e3a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008ea0 <scalbnf+0xc0>
 8008e3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008e42:	4770      	bx	lr
 8008e44:	0dd2      	lsrs	r2, r2, #23
 8008e46:	e7e5      	b.n	8008e14 <scalbnf+0x34>
 8008e48:	4410      	add	r0, r2
 8008e4a:	28fe      	cmp	r0, #254	@ 0xfe
 8008e4c:	dce6      	bgt.n	8008e1c <scalbnf+0x3c>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	dd06      	ble.n	8008e60 <scalbnf+0x80>
 8008e52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e56:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008e5a:	ee00 3a10 	vmov	s0, r3
 8008e5e:	4770      	bx	lr
 8008e60:	f110 0f16 	cmn.w	r0, #22
 8008e64:	da09      	bge.n	8008e7a <scalbnf+0x9a>
 8008e66:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008ea0 <scalbnf+0xc0>
 8008e6a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008ea4 <scalbnf+0xc4>
 8008e6e:	ee10 3a10 	vmov	r3, s0
 8008e72:	eeb0 7a67 	vmov.f32	s14, s15
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	e7d9      	b.n	8008e2e <scalbnf+0x4e>
 8008e7a:	3019      	adds	r0, #25
 8008e7c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008e84:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008ea8 <scalbnf+0xc8>
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	e7d7      	b.n	8008e3e <scalbnf+0x5e>
 8008e8e:	bf00      	nop
 8008e90:	ffff3cb0 	.word	0xffff3cb0
 8008e94:	4c000000 	.word	0x4c000000
 8008e98:	7149f2ca 	.word	0x7149f2ca
 8008e9c:	f149f2ca 	.word	0xf149f2ca
 8008ea0:	0da24260 	.word	0x0da24260
 8008ea4:	8da24260 	.word	0x8da24260
 8008ea8:	33000000 	.word	0x33000000

08008eac <with_errnof>:
 8008eac:	b510      	push	{r4, lr}
 8008eae:	ed2d 8b02 	vpush	{d8}
 8008eb2:	eeb0 8a40 	vmov.f32	s16, s0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	f7fe ffbc 	bl	8007e34 <__errno>
 8008ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8008ec0:	ecbd 8b02 	vpop	{d8}
 8008ec4:	6004      	str	r4, [r0, #0]
 8008ec6:	bd10      	pop	{r4, pc}

08008ec8 <xflowf>:
 8008ec8:	b130      	cbz	r0, 8008ed8 <xflowf+0x10>
 8008eca:	eef1 7a40 	vneg.f32	s15, s0
 8008ece:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008ed2:	2022      	movs	r0, #34	@ 0x22
 8008ed4:	f7ff bfea 	b.w	8008eac <with_errnof>
 8008ed8:	eef0 7a40 	vmov.f32	s15, s0
 8008edc:	e7f7      	b.n	8008ece <xflowf+0x6>
	...

08008ee0 <__math_uflowf>:
 8008ee0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ee8 <__math_uflowf+0x8>
 8008ee4:	f7ff bff0 	b.w	8008ec8 <xflowf>
 8008ee8:	10000000 	.word	0x10000000

08008eec <__math_oflowf>:
 8008eec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ef4 <__math_oflowf+0x8>
 8008ef0:	f7ff bfea 	b.w	8008ec8 <xflowf>
 8008ef4:	70000000 	.word	0x70000000

08008ef8 <__ieee754_sqrtf>:
 8008ef8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008efc:	4770      	bx	lr
	...

08008f00 <_init>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr

08008f0c <_fini>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr
